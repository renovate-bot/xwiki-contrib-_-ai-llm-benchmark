{
  "id": "qa_032",
  "prompt": "Kann ich Benutzer mit Zugriffstoken authentifizieren?",
  "expected_answer": "Ja, Sie k\u00f6nnen Benutzer mit Zugriffstoken mithilfe der Token-basierten Authentifizierung f\u00fcr die LLM-Anwendung (BETA)-Erweiterung authentifizieren.\n\nDiese Erweiterung erm\u00f6glicht es externen Anwendungen, Benutzer mit signierten JSON Web Tokens (JWT) zu authentifizieren. Der Token muss bestimmte Anspr\u00fcche enthalten, wie Ablaufzeit, Aussteller, Betreff und Zielgruppe, und muss mit einem Ed25519-Schl\u00fcssel signiert sein.\n\nUm diesen Authentifizierer zu verwenden, m\u00fcssen Sie:\n\n1. Den Token-Authentifizierer aktivieren, indem Sie die Eigenschaft `xwiki.authentication.authclass` in der Datei `xwiki.properties` auf `org.xwiki.contrib.llm.authentication.JWTTokenAuth` setzen.\n2. Die autorisierten Anwendungen konfigurieren, indem Sie einen neuen Eintrag zur Liste der \u201eAutorisierten Anwendungen\u201c hinzuf\u00fcgen, wobei Sie den Titel, die URL, den \u00f6ffentlichen Schl\u00fcssel und das Gruppenformat der Anwendung angeben.\n3. Ein JWT-Token generieren, das die erforderlichen Anspr\u00fcche und Signierschl\u00fcssel erf\u00fcllt.\n4. Das Token im \u201eAuthorization\u201c-Header der Anfrage in der Form \u201eBearer TOKEN\u201c einf\u00fcgen.\n\nHinweis: Dieser Authentifizierer unterst\u00fctzt nur die Erstellung oder Aktualisierung von Benutzern auf der Grundlage der im Token bereitgestellten Informationen und unterst\u00fctzt nicht die Verwendung eines Tokens als Authentifizierung f\u00fcr einen bestehenden Benutzer, der nicht \u00fcber diesen Authentifizierer erstellt wurde.",
  "ai_answer": "https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/ \nhttps://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/ \n\n\nJa, es ist m\u00f6glich, Benutzer mit Zugriffstoken (Access Token) zu authentifizieren. Dies ist ein g\u00e4ngiges Verfahren in der OAuth- und OpenID-Connect-Authentifizierung.\n\nIm Kontext von XWiki kann dies durch die Verwendung des OpenID-Connect-Authentifizierungsmoduls erreicht werden. Hierbei wird der Benutzer an einen externen Authentifizierungsdienst (z.B. einen OpenID-Connect-Provider) weitergeleitet, um sich zu authentifizieren. Nach erfolgreicher Authentifizierung erh\u00e4lt XWiki ein Zugriffstoken, das verwendet wird, um den Benutzer zu authentifizieren.\n\nDas Zugriffstoken kann dann verwendet werden, um den Benutzer zu authentifizieren und ihm Zugriff auf gesch\u00fctzte Ressourcen zu gew\u00e4hren. Dies kann durch die Verwendung von APIs oder durch die Integration von XWiki mit anderen Systemen erreicht werden.\n\nEs ist jedoch wichtig zu beachten, dass die Verwendung von Zugriffstoken f\u00fcr die Authentifizierung auch Sicherheitsrisiken birgt, wenn nicht ordnungsgem\u00e4\u00df implementiert. Es ist daher wichtig, sicherzustellen, dass die Authentifizierung und Autorisierung korrekt konfiguriert sind und dass die Zugriffstoken sicher gespeichert und \u00fcbertragen werden.",
  "sources": [
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.OpenID Connect.OpenID Connect Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/",
      "content": "# Group synchronization\n\nThe default group synchronization is enabled by adding the claim xwiki\\_groups to the property oidc.userinfoclaims in the xwiki.properties file.\n\nBy default this synchronization expect to receive the list of group names (without the `wiki:XWiki.` prefix) in which the user should be placed (groups are automatically created when they don&#x27;t exist). You can also define a mapping between the XWiki groups and the provider groups using oidc.groups.mapping property.\n\nIt&#x27;s also possible to implement your own custom group synchronization in a listener. See [Listeners section](https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/#HListeners).\n\n# Customization\n\n## Templates\n\nThe authenticator uses a template to ask the user for the target provider when it&#x27;s not provided in the configuration. This template can be overwritten through the standard [template system](https://extensions.xwiki.org/xwiki/bin/view/Extension/Template%20Module).\n\nThe name of the template is oidc/client/provider.vm.\n\n## Listeners\n\nIt&#x27;s possible to implement an event [listener](https://extensions.xwiki.org/xwiki/bin/view/Extension/Observation%20Module%20Local) and be notified during user profile update to add more to this process or do other things after it:\n\n* org.xwiki.contrib.oidc.event.OIDCUserUpdating to modify the user profile before it being saved\n* org.xwiki.contrib.oidc.event.OIDCUserUpdated to do something after the user profile has been saved\n\n# Troubleshooting\n\n## Enable DEBUG log\n\nSee [Logging Admin Guide](https://xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Logging).\n\nThe specific packages to track for OpenID Connect module is org.xwiki.contrib.oidc. There is several ways to enable debug log.\n\n",
      "similarity_score": 0.5921043157577515,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "xwiki:Documentation.AdminGuide.Authentication.WebHome",
      "url": "https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/",
      "content": "| protection | Yes | all, validation, encryption, none | all | Protection level for the &quot;remember me&quot; cookie functionality |\n| useip | Yes | true / false | true | Specify to use the IP address when encrypting the cookie data; if IP address changes will need to re-login. |\n\n1. Only required if protection = encryption or all (default)\n2. Only required if protection = validation or all (default)\n\n## Security\n\nStarting with XWiki 11.6RC1 we provide some authentication strategies that are triggered if a user fails several time in a row to login.  \nYou can configure those strategies and when they should be triggered in the Administration &gt; Authentication page.\n\n![authentication-security-administration.png](https://www.xwiki.org/xwiki/bin/download/Documentation/AdminGuide/Authentication/WebHome/authentication-security-administration.png?rev=1.1)\n\nFor more information see the [Authencation Security Module documentation](https://extensions.xwiki.org/xwiki/bin/view/Extension/Authentication%20Security%20Module/).\n\n# Kerberos SSO Authentication\n\nThis implementation of SSO is currently under review see: &lt;https://jira.xwiki.org/browse/XWIKI-2496&gt; . The class which is described in this segment of documentation, AppServerTrustedKerberosAuthServiceImpl, is not part of the default XWiki distribution!\n\nThe following is an example of **mod\\_auth\\_kerb** for Apache being used to easily implement XWiki authentication of users via HTTP Negotiate on a linux server. This example assumes you already have a working Apache2 HTTPD and Apache Tomcat setup with mod\\_jk.\n\nFirst of all you need to create a principal and keytab for the webserver:\n\n",
      "similarity_score": 0.5823370218276978,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "xwiki:Documentation.AdminGuide.Authentication.WebHome",
      "url": "https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/",
      "content": "#LDAP group mapping  \nxwiki.authentication.ldap.group\\_mapping=XWiki.XWikiAdminGroup=CN=WIKI\\_Admin,............|\\  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0XWiki.XWikiAllGroup=CN=WIKI\\_User,...........The java code:\n\npackage com.wiki.sso;  \n  \n  \nimport org.apache.commons.logging.Log;  \nimport org.apache.commons.logging.LogFactory;  \n  \nimport com.xpn.xwiki.XWikiContext;  \nimport com.xpn.xwiki.XWikiException;  \nimport com.xpn.xwiki.user.api.XWikiUser;  \nimport com.xpn.xwiki.user.impl.LDAP.XWikiLDAPAuthServiceImpl;  \n  \nimport java.security.Principal;  \n  \npublic class SSOLdapAuthenicationImpl extends XWikiLDAPAuthServiceImpl {  \n \u00a0\u00a0\u00a0/\\*\\*  \n \u00a0\u00a0\u00a0\u00a0\\* Logging tool.  \n \u00a0\u00a0\u00a0\u00a0\\*/  \n\u00a0\u00a0\u00a0\u00a0private static final Log LOG = LogFactory.getLog(SSOLdapAuthenicationImpl.class);  \n  \n  \n\u00a0public XWikiUser checkAuth(XWikiContext context) throws XWikiException {  \n\u00a0\u00a0String user = getRemoteUser(context);  \n \u00a0if ((user != null) || !user.equals(&quot;&quot;)) {  \n \u00a0\u00a0if (LOG.isInfoEnabled())  \n\u00a0\u00a0\u00a0\u00a0LOG.info(&quot;Launching create user for &quot; + user);  \n \u00a0\u00a0if ( authenticate(user, context) != null ) {  \n \u00a0\u00a0\u00a0if (LOG.isInfoEnabled())  \n\u00a0\u00a0\u00a0\u00a0\u00a0LOG.info(&quot;Create user done for &quot; + user);  \n\u00a0\u00a0\u00a0\u00a0user = &quot;XWiki.&quot; + user;  \n\u00a0\u00a0\u00a0\u00a0context.setUser(user);  \n\u00a0\u00a0\u00a0\u00a0System.out.println(&quot;User is set to:&quot; + user);  \n \u00a0\u00a0\u00a0return new XWikiUser(user);  \n\u00a0\u00a0\u00a0} else {  \n\u00a0\u00a0\u00a0\u00a0LOG.error( &quot;User &quot; + user + &quot; can&#x27;t be authenticated against ldap&quot; );  \n\u00a0\u00a0\u00a0}  \n\u00a0\u00a0}  \n \u00a0return super.checkAuth(context);  \n\u00a0}  \n  \n /\\*\\*  \n \u00a0\\* We cannot authenticate locally since we need to trust the app server for  \n \u00a0\\* authentication  \n \u00a0\\*  \n \u00a0\\* @param username  \n \u00a0\\* @param password  \n \u00a0\\* @param context  \n \u00a0\\* @return  \n \u00a0\\* @throws XWikiException  \n \u00a0\\*/  \n\u00a0public XWikiUser checkAuth(String username, String password,  \n\u00a0\u00a0\u00a0String rememberme, XWikiContext context) throws XWikiException {  \n\u00a0\u00a0String user = getRemoteUser(context);  \n \u00a0if ((user == null) || user.equals(&quot;&quot;)) {  \n",
      "similarity_score": 0.5774108171463013,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "xwiki:Documentation.AdminGuide.Authentication.WebHome",
      "url": "https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/",
      "content": " \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// This is needed for virtual mode to work  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Principal principal = null;  \n  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Try authentication against ldap  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0principal = ldapAuthenticate(login, &quot;&quot;, context);  \n  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (LOG.isDebugEnabled()) {  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (principal != null) {  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LOG.debug(&quot;LDAP authentication succeed with principal [&quot; + principal.getName() + &quot;]&quot;);  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LOG.debug(&quot;LDAP authentication failed for user [&quot; + login + &quot;]&quot;);  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return principal;  \n\u00a0\u00a0\u00a0\u00a0}  \n}# Mail Templates\n\nWhen [logging in](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/Authentication#HLoggingin), you have the option of resetting your user&#x27;s password if you forgot it, or to find your username based on your email address. When choosing these options, you&#x27;ll be sent an email. It&#x27;s possible to control the templates used for these emails and to customize them by editing the following pages in object mode:\n\n* XWiki.ResetPasswordMailContent\n* XWiki.ForgotUsernameMailContent\n\n\n",
      "similarity_score": 0.5763311982154846,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.OpenID Connect.OpenID Connect Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/",
      "content": "#-# The default is (user profiles are viewable by all users by default and it&#x27;s possible to edit one own&#x27;s profile):  \n# oidc.user.oidc.user.ownProfileRights=edit  \n  \n#-# The custom claims to request to the provider for id token.  \n#-#  \n#-# The default is:  \n# oidc.idtokenclaims=xwiki\\_instance\\_id  \n  \n#-# The name of the claim used to get the list of groups the user belong to.  \n#-# This claim also need to be listed in oidc.userinfoclaims which control if group membership synchronization is enabled or not.  \n#-#\u00a0  \n#-# It&#x27;s also possible to use a custom property from the userinfo JSON.  \n#-# For example if the provider send the following JSON for the user info:  \n#-# {  \n#-# \u00a0\u00a0&quot;sub&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: &quot;248289761001&quot;,  \n#-# \u00a0\u00a0&quot;name&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: &quot;Jane Doe&quot;,  \n#-# \u00a0\u00a0&quot;given\\_name&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: &quot;Jane&quot;,  \n#-# \u00a0\u00a0&quot;family\\_name&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: &quot;Doe&quot;,  \n#-# \u00a0\u00a0&quot;preferred\\_username&quot; : &quot;j.doe&quot;,  \n#-# \u00a0\u00a0&quot;email&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: &quot;[[email\u00a0protected]](https://extensions.xwiki.org/cdn-cgi/l/email-protection)&quot;,  \n#-# \u00a0\u00a0&quot;picture&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: &quot;http://example.com/janedoe/me.jpg&quot;  \n#-# \u00a0\u00a0&quot;customobject&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0:  \n#-# \u00a0\u00a0{  \n#-# \u00a0\u00a0\u00a0\u00a0&quot;customgroups&quot; \u00a0\u00a0: \u00a0[&quot;group1&quot;, &quot;group2&quot;]  \n#-# \u00a0\u00a0}  \n#-# }  \n#-# you can use:  \n# oidc.groups.claim=customobject.customgroups  \n#-#\u00a0  \n#-# The default is:  \n# oidc.groups.claim=xwiki\\_groups  \n  \n#-# Receiving a groups list is enough to enable group synchronization but you might need to configure XWiki groups names different from the remote groups names.  \n#-# It&#x27;s also required to indicate what&#x27;s the field containing the list of groups (that&#x27;s not an OpenID Connect standard) using oidc.groups.claim property.  \n#-#\u00a0  \n# oidc.groups.mapping=MyXWikiGroup=my-oidc-group  \n# oidc.groups.mapping=MyXWikiGroup2=my-oidc-group2  \n",
      "similarity_score": 0.5724775195121765,
      "vector": null
    }
  ],
  "usage": {
    "prompt_tokens": 2363,
    "completion_tokens": 309,
    "total_tokens": 2672
  },
  "average_power_draw": null,
  "energy_consumption": null,
  "energy_per_input_token": null,
  "energy_per_output_token": null,
  "energy_per_total_token": null
}