{
  "id": "qa_031",
  "prompt": "Can I authenticate users with access tokens?",
  "expected_answer": "Yes, you can authenticate users with access tokens using the Token-based authentication for the LLM Application extension.\n\nThis extension allows external applications to authenticate users with signed JSON Web Tokens (JWT). The token needs to contain specific claims, such as expiration time, issuer, subject, and audience, and must be signed with an Ed25519 key.\n\nTo use this authenticator, you need to:\n\n1. Enable the token authenticator by setting the `xwiki.authentication.authclass` property in `xwiki.properties` file to `org.xwiki.contrib.llm.authentication.JWTTokenAuth`.\n2. Configure the authorized applications by adding a new entry to the \"Authorized Applications\" list, specifying the application's title, URL, public key, and group format.\n3. Generate a JWT token that meets the required claims and signing key requirements.\n4. Include the token in the \"Authorization\" header of the request in the form \"Bearer TOKEN\".\n\nNote that this authenticator only supports creating or updating users based on the information provided in the token and does not support using a token as authentication for an existing user that hasn't been created through this authenticator.",
  "ai_answer": "https://extensions.xwiki.org/xwiki/bin/view/Extension/LLM%20Application/Authenticator/ \nhttps://extensions.xwiki.org/xwiki/bin/view/Extension/LLM%20Application/Index%20for%20the%20LLM%20Application/ \nhttps://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/ \n\n\nYes, you can authenticate users with access tokens using the LLM Application Authenticator extension for XWiki. Here's how you can generate and use a JWT token for authentication:\n\n1. **Generate a signing key pair:**\n\n   You can use OpenSSL to generate an Ed25519 key pair:\n\n   ```\n   openssl genpkey -algorithm ed25519 -outform PEM -out private.pem\n   openssl pkey -in private.pem -pubout -outform PEM -out public.pem\n   ```\n\n   This will create two files: `private.pem` (the private key) and `public.pem` (the public key).\n\n2. **Create a JWT token:**\n\n   You'll need to include the following claims in your token:\n\n   - `exp`: The expiration time, must be in the future but not more than 24 hours from now.\n   - `iss`: The issuer, corresponding to the URL property configured in the authorized applications.\n   - `sub`: The subject, used for deriving the username.\n   - `aud`: The audience, must contain the URL of the XWiki installation (e.g., `https://www.example.com/`).\n\n   Optional claims include:\n\n   - `given_name`\n   - `family_name`\n   - `email`\n   - `groups` (a list of strings)\n   - `iat` (issued at)\n   - `nbf` (not before)\n\n   You can use a library like [JWT](https://github.com/jwtk/jjwt) in Java to create the token:\n\n   ```java\n   String issuer = \"https://www.example.com/\";\n   String subject = \"john.doe\";\n   Instant now = Instant.now();\n   Instant expiresAt = now.plus(24, ChronoUnit.HOURS);\n\n   JWTSpecBuilder specBuilder = new JWTSpecBuilder()\n       .setIssuer(issuer)\n       .setSubject(subject)\n       .setAudience(issuer)\n       .setIssuedAt(now)\n       .setExpiration(expiresAt)\n       .setNotBefore(now.minus(1, ChronoUnit.MINUTE));\n\n   JWTSpec spec = specBuilder.build();\n\n   String privateKey = Files.readAllLines(Paths.get(\"private.pem\")).stream().reduce(\"\", (a, b) -> a + b);\n   String token = JWT.create(spec).signWith(SignatureAlgorithm.EdDSA, privateKey);\n   ```\n\n3. **Include the token in the Authorization header:**\n\n   Send the token in the `Authorization` header with the format `Bearer TOKEN`, where `TOKEN` is the signed JWT token:\n\n   ```\n   Authorization: Bearer <token>\n   ```",
  "sources": [
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.LLM Application.Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/LLM%20Application/Authenticator/",
      "content": "## Token Generation\n\nThis authenticator expects a JWT token that is signed with an Ed25519 key. A suitable signing key can, e.g., be generated using the [OpenSSL](https://www.openssl.org/) command line utility and the following two commands:\n\nopenssl genpkey -algorithm ed25519 -outform PEM -out private.pem  \nopenssl pkey -in private.pem -pubout -outform PEM -out public.pemThe files &quot;private.pem&quot; and &quot;public.pem&quot; then contain the private and public key in PEM format, respectively.\n\nThe JWT token needs to contain the following claims:\n\n* &quot;exp&quot;: the expiration time, must be in the future but not more than 24 hours in the future\n* &quot;iss&quot;: the issuer, corresponding to the URL property configured in the authorized applications\n* &quot;sub&quot;: the subject, used for deriving the username\n* &quot;aud&quot;: the audience, must contain the URL of the XWiki installation in the form https://www.example.com/ without path. Both a single string and an array of strings are supported. If the expected URL isn&#x27;t passed, an error is logged with the expected URL.\n\nOptional:\n\n* &quot;given\\_name&quot;: used to set the first name field of the user profile\n* &quot;family\\_name&quot;: used to set the last name field of the user profile\n* &quot;email&quot;: used to set the email field of the user profile\n* &quot;groups&quot;: a list of groups (as list of strings). Used to set the groups of the user.\n* &quot;iat&quot;: issued at, the time when the token was issued. Tokens older than 24 hours and tokens issued in the future aren&#x27;t accepted.\n* &quot;nbf&quot;: not before, the token is rejected if this time is in the future.\n\nThe token needs to be present in the &quot;Authorization&quot; header in the form &quot;Bearer TOKEN&quot; where TOKEN is the signed JWT token as described above.\n\n\n",
      "similarity_score": 0.8695666790008545,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.LLM Application.Index for the LLM Application.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/LLM%20Application/Index%20for%20the%20LLM%20Application/",
      "content": "#### GET /wikis/{wikiName}/aiLLM/collections/{collectionName}/documents\n\nReturns a list of document IDs that are contained in the collection of the given name. This resource supports the following query parameters:\n\n* start: the index of the first document to retrieve (default: 0)\n* number: the number of documents to retrieve (default: -1)\n\n### Document Resource\n\nA document object has the following properties, all properties are strings unless otherwise mentioned:\n\n* id: id of the document\n* title: pretty name of the document\n* language: the language of the document (currently not used)\n* url: the URL of the document, used to display a link to the original resource when the document is used as context in a chat\n* collection: the name of the collection the document is part of\n* mimetype: the mime type of the document, currently not used, could be used in the future to use a chunking method that is specific to the mime type\n* content: the content of the document that is indexed\n\n#### GET /wikis/{wikiName}/aiLLM/collections/{collectionName}/documents/{documentID}\n\nReturns the document of the given name in the collection of the given name.\n\n#### PUT /wikis/{wikiName}/aiLLM/collections/{collectionName}/documents/{documentID}\n\nCreates or updates the document of the given name in the collection of the given name. The body of the request is a document, if not all properties are specified, only the specified properties are updated.\n\n#### DELETE /wikis/{wikiName}/aiLLM/collections/{collectionName}/documents/{documentID}\n\nDeletes the document of the given name in the collection of the given name.\n\n",
      "similarity_score": 0.8343086242675781,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "xwiki:Documentation.AdminGuide.Authentication.WebHome",
      "url": "https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/",
      "content": "| protection | Yes | all, validation, encryption, none | all | Protection level for the &quot;remember me&quot; cookie functionality |\n| useip | Yes | true / false | true | Specify to use the IP address when encrypting the cookie data; if IP address changes will need to re-login. |\n\n1. Only required if protection = encryption or all (default)\n2. Only required if protection = validation or all (default)\n\n## Security\n\nStarting with XWiki 11.6RC1 we provide some authentication strategies that are triggered if a user fails several time in a row to login.  \nYou can configure those strategies and when they should be triggered in the Administration &gt; Authentication page.\n\n![authentication-security-administration.png](https://www.xwiki.org/xwiki/bin/download/Documentation/AdminGuide/Authentication/WebHome/authentication-security-administration.png?rev=1.1)\n\nFor more information see the [Authencation Security Module documentation](https://extensions.xwiki.org/xwiki/bin/view/Extension/Authentication%20Security%20Module/).\n\n# Kerberos SSO Authentication\n\nThis implementation of SSO is currently under review see: &lt;https://jira.xwiki.org/browse/XWIKI-2496&gt; . The class which is described in this segment of documentation, AppServerTrustedKerberosAuthServiceImpl, is not part of the default XWiki distribution!\n\nThe following is an example of **mod\\_auth\\_kerb** for Apache being used to easily implement XWiki authentication of users via HTTP Negotiate on a linux server. This example assumes you already have a working Apache2 HTTPD and Apache Tomcat setup with mod\\_jk.\n\nFirst of all you need to create a principal and keytab for the webserver:\n\n",
      "similarity_score": 0.8264274597167969,
      "vector": null
    }
  ],
  "usage": {
    "prompt_tokens": 1401,
    "completion_tokens": 576,
    "total_tokens": 1977
  },
  "average_power_draw": 240.20131083711874,
  "energy_consumption": 1761.8494216369854,
  "energy_per_input_token": 0.6201511515793683,
  "energy_per_output_token": 1.5503778789484206,
  "energy_per_total_token": 0.8911732026489557
}