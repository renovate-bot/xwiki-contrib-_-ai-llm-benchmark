{
  "id": "qa_006",
  "prompt": "Can I customize the user profile fields that are populated from the OpenID Connect provider in XWiki?\nI want to map additional user profile fields from my OpenID Connect provider to XWiki user properties. How can I achieve this?",
  "expected_answer": "Yes, you can customize the user profile fields that are populated from the OpenID Connect provider by mapping them in the `xwiki.properties` file.\n\nTo map additional user profile fields, use the `oidc.user.mapping` property. Here's an example of how to map custom properties:\n\n```\n# oidc.user.mapping=myxproperty1=${oidc.user.subject}\n# oidc.user.mapping=myxproperty2=myprefix-${oidc.user.subject}\n```\n\nReplace `myxproperty1` and `myxproperty2` with the actual XWiki user property names, and `${oidc.user.subject}` with the appropriate variable based on the data provided by your OpenID Connect provider.\n\nAfter configuring the mappings, save the `xwiki.properties` file and restart XWiki to apply the changes.",
  "ai_answer": "Sources: https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/ \n\n\nYes, you can customize the user profile fields that are populated from the OpenID Connect provider in XWiki. To map additional user profile fields from your OpenID Connect provider to XWiki user properties, you can use the `oidc.user.mapping` property. This property allows you to associate non-standard properties coming from the OpenID Connect provider with XWiki user properties.\n\nHere is how you can achieve this:\n\n1. **Identify the Fields**: Determine the additional user profile fields you want to map from your OpenID Connect provider.\n\n2. **Configure the Mapping**: Use the `oidc.user.mapping` property in your XWiki configuration to map these fields to XWiki user properties. The syntax for this property is similar to the one used for `oidc.user.nameFormater`.\n\nFor example, if you want to map the `customobject.customproperty` field from your OpenID Connect provider to a custom XWiki user property called `myxproperty`, you can add the following configuration:\n\n```plaintext\noidc.user.mapping=myxproperty=${oidc.user.customobject.customproperty}\n```\n\n3. **Additional Mappings**: You can add multiple mappings by specifying additional properties. For example:\n\n```plaintext\noidc.user.mapping=myxproperty1=${oidc.user.subject}\noidc.user.mapping=myxproperty2=myprefix-${oidc.user.subject}\n```\n\n4. **Save the Configuration**: Make sure to save these configurations in the appropriate XWiki configuration file (e.g., `xwiki.properties`).\n\nBy following these steps, you can customize and map additional user profile fields from your OpenID Connect provider to XWiki user properties. This allows you to leverage more user information provided by your OpenID Connect provider in your XWiki environment.",
  "sources": [
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.OpenID Connect.OpenID Connect Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/",
      "content": "#-# The following suffixes can be added:  \n#-# \\* &quot;.\\_lowerCase&quot;: the lower case version of the string  \n#-# \\* &quot;.\\_upperCase&quot;: the upper case version of the string\u00a0  \n#-# \\* &quot;.\\_clean&quot;: a version of the string stripped from &quot;.&quot;, &quot;:&quot;, &quot;,&quot;, &quot;@&quot;, &quot;^&quot; characters and &quot;\\s&quot; (all forms of white spaces).  \n#-# \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0It can itself be suffixed with &quot;.\\_lowerCase&quot; and &quot;.\\_upperCase&quot;.  \n#-#  \n#-# The variable syntax also have other features (fallback value, etc.) detailed on https://commons.apache.org/proper/commons-text/apidocs/org/apache/commons/text/StringSubstitutor.html.  \n#-#\u00a0  \n#-# The default is:\u00a0  \n# oidc.user.nameFormater=${oidc.issuer.host.\\_clean}-${oidc.user.preferredUsername.\\_clean}  \n  \n#-# The pattern to use to generate the unique identifier of the user in the OpenId Connect provider.  \n#-# It is used to avoid collisions with user have similar name.  \n#-#\u00a0  \n#-# The syntax is the same than the one described for oidc.user.nameFormater property.  \n#-#\u00a0  \n#-# The default is:\u00a0  \n# oidc.user.subjectFormater=${oidc.user.subject}  \n  \n#-# It&#x27;s possible to associate non standard properties coming from the OpenID Connect provider with the XWiki user.  \n#-# It&#x27;s a map with the name of the XWiki user property and a format similar to the one defined in oidc.user.nameFormater for the OpenID Connect side.  \n#-#\u00a0  \n# oidc.user.mapping=myxproperty1=${oidc.user.subject}  \n# oidc.user.mapping=myxproperty2=myprefix-${oidc.user.subject}  \n  \n#-# The righs each new user should have on its own profile as a comma (only comma, no white space allowed) separated list. Setting a right also implies that all the others users don&#x27;t have it.  \n#-# For example if you want that only users have view right on their profile but thay can modify their own profile you could use:  \n# oidc.user.oidc.user.ownProfileRights=view,edit  \n#-#\u00a0  \n",
      "similarity_score": 31.94184112548828,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.OpenID Connect.OpenID Connect Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/",
      "content": "#-# \\* profile: Requests that access to the end-user&#x27;s default profile claims at the UserInfo endpoint be granted by the issued access token.  \n#-# \\* email: Requests that access to the email and email\\_verified claims at the UserInfo endpoint be granted by the issued access token.  \n#-# \\* address: Requests that access to address claim at the UserInfo endpoint be granted by the issued access token.  \n#-# \\* phone: Requests that access to the {phone\\_number and phone\\_number\\_verified claims at the UserInfo endpoint be granted by the issued access token.  \n#-# \\* offline\\_access: Requests that an OAuth 2.0 refresh token be issued that can be used to obtain an access token that grants access the end-user&#x27;s UserInfo endpoint even when the user is not present (not logged in).  \n#-#\u00a0  \n#-# But depending on the provider more can be listed.  \n#-#\u00a0  \n#-# The default is:  \n# oidc.scope=openid,profile,email,address,phone  \n  \n#-# The response type to control the flow used by the OpenId Connect protocol.  \n#-# This is often used to control if the information about the user should  \n#-# be gathered from the userinfo endpoint with a request from XWiki to the provider (&quot;code&quot;, the default)  \n#-# or the id token directly provided when the provider redirects to XWiki (&quot;id\\_token&quot;)  \n#-# but it&#x27;s also possible to combine.  \n#-# See https://openid.net/specs/openid-connect-core-1\\_0.html#rfc.section.3 for mode details.  \n#-# For an hybrid flow, use list syntax (so comma or several set) instead of the white space  \n#-# documented in the specification to separate words.  \n#-#  \n#-# The default is:  \n# oidc.responseType=code  \n  \n#-# The method used to access the userinfo endpoint.  \n#-#\u00a0  \n#-# Supported values are:  \n#-# \\* GET: use GET HTTP method  \n#-# \\* POST: use POST HTTP method  \n#-#\u00a0  \n#-# The default is:  \n# oidc.endpoint.userinfo.method=GET  \n  \n#-# The pattern to use to generate the XWiki user name.  \n#-#\u00a0  \n",
      "similarity_score": 28.447538375854492,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.OpenID Connect.OpenID Connect Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/",
      "content": "#-# The default is (user profiles are viewable by all users by default and it&#x27;s possible to edit one own&#x27;s profile):  \n# oidc.user.oidc.user.ownProfileRights=edit  \n  \n#-# The custom claims to request to the provider for id token.  \n#-#  \n#-# The default is:  \n# oidc.idtokenclaims=xwiki\\_instance\\_id  \n  \n#-# The name of the claim used to get the list of groups the user belong to.  \n#-# This claim also need to be listed in oidc.userinfoclaims which control if group membership synchronization is enabled or not.  \n#-#\u00a0  \n#-# It&#x27;s also possible to use a custom property from the userinfo JSON.  \n#-# For example if the provider send the following JSON for the user info:  \n#-# {  \n#-# \u00a0\u00a0&quot;sub&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: &quot;248289761001&quot;,  \n#-# \u00a0\u00a0&quot;name&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: &quot;Jane Doe&quot;,  \n#-# \u00a0\u00a0&quot;given\\_name&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: &quot;Jane&quot;,  \n#-# \u00a0\u00a0&quot;family\\_name&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: &quot;Doe&quot;,  \n#-# \u00a0\u00a0&quot;preferred\\_username&quot; : &quot;j.doe&quot;,  \n#-# \u00a0\u00a0&quot;email&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: &quot;[[email\u00a0protected]](https://extensions.xwiki.org/cdn-cgi/l/email-protection)&quot;,  \n#-# \u00a0\u00a0&quot;picture&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: &quot;http://example.com/janedoe/me.jpg&quot;  \n#-# \u00a0\u00a0&quot;customobject&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0:  \n#-# \u00a0\u00a0{  \n#-# \u00a0\u00a0\u00a0\u00a0&quot;customgroups&quot; \u00a0\u00a0: \u00a0[&quot;group1&quot;, &quot;group2&quot;]  \n#-# \u00a0\u00a0}  \n#-# }  \n#-# you can use:  \n# oidc.groups.claim=customobject.customgroups  \n#-#\u00a0  \n#-# The default is:  \n# oidc.groups.claim=xwiki\\_groups  \n  \n#-# Receiving a groups list is enough to enable group synchronization but you might need to configure XWiki groups names different from the remote groups names.  \n#-# It&#x27;s also required to indicate what&#x27;s the field containing the list of groups (that&#x27;s not an OpenID Connect standard) using oidc.groups.claim property.  \n#-#\u00a0  \n# oidc.groups.mapping=MyXWikiGroup=my-oidc-group  \n# oidc.groups.mapping=MyXWikiGroup2=my-oidc-group2  \n",
      "similarity_score": 23.678926467895508,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.OpenID Connect.OpenID Connect Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/",
      "content": "#-# The authentication management class.  \nxwiki.authentication.authclass=org.xwiki.contrib.oidc.auth.OIDCAuthServiceImpl### xwiki.properties\n\n#-# The base URL of the OpenId Connect Provider to use as starting point to discover the provider configuration.  \n#-# See following endpoints properties if the provider is does not support OpenID Connect discovery.  \n#-# If not indicated and not custom endpoint is provided, it will be asked to the user.  \n# oidc.provider=https://xwikiorg-node1.xwikisas.com/xwiki/oidc  \n  \n#-# The generic OpenId Connect endpoints to use to communicate with the provider.  \n#-# It&#x27;s generally not needed when providing the provider discovery endpoint (which is supposed to provide those enpoints).  \n# oidc.endpoint.authorization=https://xwikiorg-node1.xwikisas.com/xwiki/oidc/authorization  \n# oidc.endpoint.token=https://xwikiorg-node1.xwikisas.com/xwiki/oidc/token  \n# oidc.endpoint.userinfo=https://xwikiorg-node1.xwikisas.com/xwiki/oidc/userinfo  \n# oidc.endpoint.logout=https://xwikiorg-node1.xwikisas.com/xwiki/oidc/logout  \n  \n#-# It&#x27;s possible to add custom HTTP headers to the endpoint (generally only needed for bad or non-oidc providers)  \n#-# by adding the suffix &quot;.headers&quot; to the endpoint property key and listing the custom headers using key:value format.  \n#-# Note that it&#x27;s not taken into account for the oidc.endpoint.authorization endpoint because it&#x27;s used as a redirect.  \n#-# Here is an example to send &quot;Accept: application/json&quot; and &quot;SomeOtherHeader: header&quot; HTTP headers with the userinfo request.  \n# oidc.endpoint.userinfo.headers=Accept:application/json  \n# oidc.endpoint.userinfo.headers=SomeOtherHeader:header value  \n  \n#-# The scopes to use when redirecting to the provider  \n#-# The standard OpenID Connection scopes are:  \n#-# \\* openid: Informs the authorisation server that the client is making an OpenID Connect request (REQUIRED).  \n",
      "similarity_score": 0.8014670610427856,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.OpenID Connect.OpenID Connect Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/",
      "content": "# Group synchronization\n\nThe default group synchronization is enabled by adding the claim xwiki\\_groups to the property oidc.userinfoclaims in the xwiki.properties file.\n\nBy default this synchronization expect to receive the list of group names (without the `wiki:XWiki.` prefix) in which the user should be placed (groups are automatically created when they don&#x27;t exist). You can also define a mapping between the XWiki groups and the provider groups using oidc.groups.mapping property.\n\nIt&#x27;s also possible to implement your own custom group synchronization in a listener. See [Listeners section](https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/#HListeners).\n\n# Customization\n\n## Templates\n\nThe authenticator uses a template to ask the user for the target provider when it&#x27;s not provided in the configuration. This template can be overwritten through the standard [template system](https://extensions.xwiki.org/xwiki/bin/view/Extension/Template%20Module).\n\nThe name of the template is oidc/client/provider.vm.\n\n## Listeners\n\nIt&#x27;s possible to implement an event [listener](https://extensions.xwiki.org/xwiki/bin/view/Extension/Observation%20Module%20Local) and be notified during user profile update to add more to this process or do other things after it:\n\n* org.xwiki.contrib.oidc.event.OIDCUserUpdating to modify the user profile before it being saved\n* org.xwiki.contrib.oidc.event.OIDCUserUpdated to do something after the user profile has been saved\n\n# Troubleshooting\n\n## Enable DEBUG log\n\nSee [Logging Admin Guide](https://xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Logging).\n\nThe specific packages to track for OpenID Connect module is org.xwiki.contrib.oidc. There is several ways to enable debug log.\n\n",
      "similarity_score": 0.8001906871795654,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.OpenID Connect.OpenID Connect Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/",
      "content": "# oidc.skipped=false## In-wiki configuration\n\nXWiki 1.30+ The OIDC authenticator can be configured in XWiki, and to rely on multiple configurations which get selected through a user cookie.\n\nIn order to use the in-wiki configuration of the OIDC authenticator, you will still need to define the configuration key xwiki.authentication.authclass in xwiki.cfg. Once the OIDC Authenticator installed, you will be able to define new OIDC Client configurations through objects of class XWiki.OIDC.ClientConfigurationClass.\n\nThe property &quot;Configuration name&quot; of the object will define the name of the OIDC configuration being declared. Use default for the default OIDC configuration. The other properties are similar to the properties defined in xwiki.properties. Use the key oidc.defaultClientConfiguration in xwiki.properties to change the name of the OIDC configuration that should be used by default.\n\nWhen creating multiple in-wiki configurations, each configuration will be selectable by the user through the cookie oidcProvider. You can change the name of this cookie with the key oidc.clientConfigurationCookie in xwiki.properties.\n\n",
      "similarity_score": 0.7995548248291016,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.OpenID Connect.OpenID Connect Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/",
      "content": "* [Prerequisites &amp; Installation Instructions](https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/#HPrerequisites26InstallationInstructions)\n* [Dependencies](https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/#HDependencies)\n# Description\n\nAllow an XWiki instance to authenticate on an OpenId Connect provider. It also performs automatic synchronization.\n\nSee also [OpenID Connect Provider](https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Provider/).\n\n![oidc_client_provider.png](https://extensions.xwiki.org/xwiki/bin/download/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/WebHome/oidc_client_provider.png?rev=1.1)\n\nRelease notes can be found on [OpenID Connect project page](https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/#HReleaseNotes).\n\n# Main limitations\n\n* [Automatically authenticate user when coming back](https://jira.xwiki.org/browse/OIDC-16)\n\n# Configuration\n\n## Configuration Guides for specific systems\n\n### Lemon LDAP / Open PAAS\n\nA [configuration guide](https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/ConfigurationLemonLDAP/) is available to connect XWiki to LemonLDAP / OpenPAAS using the OpenIDC XWiki client.\n\n### OpenID Authentication with Keycloak\n\nA [configuration example for Keycloak](https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/OpenID%20Authentication%20with%20Keycloak/) is available.\n\n### Univention Corporate Server\n\nA [configuration example for Univention Corporate Server (UCS)](https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/OpenID%20Authentication%20with%20UCS/) is available.\n\n## Configuration files\n\n### xwiki.cfg\n\n",
      "similarity_score": 0.7971739768981934,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.OpenID Connect.OpenID Connect Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/",
      "content": "#-# The following variables are available:  \n#-# oidc.user.subject: the unique id of the user in the provider  \n#-# oidc.user.mail: the mail of the user  \n#-# oidc.user.familyName : the last name of the user  \n#-# oidc.user.givenName: the first name of the user  \n#-# oidc.user.preferredUsername: the recommended string to use as id for the user  \n#-# oidc.provider: the URL of the XWiki provider (only when a XWiki provider is used)  \n#-# oidc.provider.host: the host of the provider URL  \n#-# oidc.provider.path: the path of the provider URL  \n#-# oidc.provider.protocol: the protocol (usually https) of the provider URL  \n#-# oidc.provider.port: the port of the provider URL  \n#-# oidc.issuer: the issuer URI  \n#-# oidc.issuer.host: the host of the issuer URI  \n#-# oidc.issuer.path: the path of the issuer URI  \n#-# oidc.issuer.scheme: the scheme (usually https) of the issuer URI  \n#-# oidc.issuer.port: the port of the issuer URI  \n#-#\u00a0  \n#-# Both the entire userinfo and id token JSON received from the provider are also available using respectively:  \n#-# \\* &quot;oidc.user.&quot; for the userinfo  \n#-# \\* &quot;oidc.idtoken.&quot; for the id token  \n#-# For example if the provider send the following JSON for the user info:  \n#-# {  \n#-# \u00a0\u00a0&quot;sub&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: &quot;248289761001&quot;,  \n#-# \u00a0\u00a0&quot;name&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: &quot;Jane Doe&quot;,  \n#-# \u00a0\u00a0&quot;given\\_name&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: &quot;Jane&quot;,  \n#-# \u00a0\u00a0&quot;family\\_name&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: &quot;Doe&quot;,  \n#-# \u00a0\u00a0&quot;preferred\\_username&quot; : &quot;j.doe&quot;,  \n#-# \u00a0\u00a0&quot;email&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: &quot;[[email\u00a0protected]](https://extensions.xwiki.org/cdn-cgi/l/email-protection)&quot;,  \n#-# \u00a0\u00a0&quot;picture&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: &quot;http://example.com/janedoe/me.jpg&quot;  \n#-# \u00a0\u00a0&quot;customobject&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0:  \n#-# \u00a0\u00a0{  \n#-# \u00a0\u00a0\u00a0\u00a0&quot;customproperty&quot; \u00a0\u00a0: \u00a0&quot;customvalue&quot;  \n#-# \u00a0\u00a0}  \n#-# }  \n#-# you can use the variable ${oidc.user.customobject.customproperty}.  \n#-#  \n",
      "similarity_score": 0.7945734858512878,
      "vector": null
    }
  ],
  "usage": {
    "prompt_tokens": 5619,
    "completion_tokens": 426,
    "total_tokens": 6045
  },
  "average_power_draw": null,
  "energy_consumption": null,
  "energy_per_input_token": null,
  "energy_per_output_token": null,
  "energy_per_total_token": null
}