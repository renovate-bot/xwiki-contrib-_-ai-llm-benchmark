{
  "id": "qa_031",
  "prompt": "Can I authenticate users with access tokens?",
  "expected_answer": "Yes, you can authenticate users with access tokens using the Token-based authentication for the LLM Application extension.\n\nThis extension allows external applications to authenticate users with signed JSON Web Tokens (JWT). The token needs to contain specific claims, such as expiration time, issuer, subject, and audience, and must be signed with an Ed25519 key.\n\nTo use this authenticator, you need to:\n\n1. Enable the token authenticator by setting the `xwiki.authentication.authclass` property in `xwiki.properties` file to `org.xwiki.contrib.llm.authentication.JWTTokenAuth`.\n2. Configure the authorized applications by adding a new entry to the \"Authorized Applications\" list, specifying the application's title, URL, public key, and group format.\n3. Generate a JWT token that meets the required claims and signing key requirements.\n4. Include the token in the \"Authorization\" header of the request in the form \"Bearer TOKEN\".\n\nNote that this authenticator only supports creating or updating users based on the information provided in the token and does not support using a token as authentication for an existing user that hasn't been created through this authenticator.",
  "ai_answer": "https://extensions.xwiki.org/xwiki/bin/view/Extension/LLM%20Application/Authenticator/ \nhttps://extensions.xwiki.org/xwiki/bin/view/Extension/LLM%20Application/Index%20for%20the%20LLM%20Application/ \nhttps://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/ \nhttps://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/ \nhttps://extensions.xwiki.org/xwiki/bin/view/Extension/LDAP/Authenticator/ \n\n\nYes, you can authenticate users with access tokens in XWiki. Specifically, you can use JWT (JSON Web Tokens) for this purpose. Here\u2019s a brief overview of how you can set it up:\n\n1. **Token Generation**:\n    - Generate a JWT token signed with an Ed25519 key. You can use the OpenSSL command line utility to generate the signing key:\n      ```bash\n      openssl genpkey -algorithm ed25519 -outform PEM -out private.pem\n      openssl pkey -in private.pem -pubout -outform PEM -out public.pem\n      ```\n      The `private.pem` and `public.pem` files will contain the private and public keys in PEM format, respectively.\n\n2. **JWT Token Claims**:\n    - The JWT token must include the following claims:\n      - `exp`: Expiration time, must be in the future but not more than 24 hours in the future.\n      - `iss`: Issuer, corresponding to the URL property configured in the authorized applications.\n      - `sub`: Subject, used for deriving the username.\n      - `aud`: Audience, must contain the URL of the XWiki installation (e.g., `https://www.example.com/`).\n\n    - Optional claims include:\n      - `given_name`: Used to set the first name field of the user profile.\n      - `family_name`: Used to set the last name field of the user profile.\n      - `email`: Used to set the email field of the user profile.\n      - `groups`: A list of groups (as a list of strings) to set the groups of the user.\n      - `iat`: Issued at, the time when the token was issued. Tokens older than 24 hours and tokens issued in the future aren't accepted.\n      - `nbf`: Not before, the token is rejected if this time is in the future.\n\n3. **Authorization Header**:\n    - The token needs to be present in the `Authorization` header in the form `Bearer TOKEN`, where `TOKEN` is the signed JWT token.\n\nHere is an example of how the JWT token might look in the header:\n```http\nAuthorization: Bearer eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMSIsIm5hbWUiOiJKb2huIERvZSIsImlhdCI6MTUxNjIzOTAyMn0.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n```\n\nBy following these steps, you can authenticate users in XWiki using access tokens. If you need more detailed information, you can refer to the [LLM Application Authenticator documentation](https://extensions.xwiki.org/xwiki/bin/view/Extension/LLM%20Application/Authenticator/).",
  "sources": [
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.LLM Application.Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/LLM%20Application/Authenticator/",
      "content": "## Token Generation\n\nThis authenticator expects a JWT token that is signed with an Ed25519 key. A suitable signing key can, e.g., be generated using the [OpenSSL](https://www.openssl.org/) command line utility and the following two commands:\n\nopenssl genpkey -algorithm ed25519 -outform PEM -out private.pem  \nopenssl pkey -in private.pem -pubout -outform PEM -out public.pemThe files &quot;private.pem&quot; and &quot;public.pem&quot; then contain the private and public key in PEM format, respectively.\n\nThe JWT token needs to contain the following claims:\n\n* &quot;exp&quot;: the expiration time, must be in the future but not more than 24 hours in the future\n* &quot;iss&quot;: the issuer, corresponding to the URL property configured in the authorized applications\n* &quot;sub&quot;: the subject, used for deriving the username\n* &quot;aud&quot;: the audience, must contain the URL of the XWiki installation in the form https://www.example.com/ without path. Both a single string and an array of strings are supported. If the expected URL isn&#x27;t passed, an error is logged with the expected URL.\n\nOptional:\n\n* &quot;given\\_name&quot;: used to set the first name field of the user profile\n* &quot;family\\_name&quot;: used to set the last name field of the user profile\n* &quot;email&quot;: used to set the email field of the user profile\n* &quot;groups&quot;: a list of groups (as list of strings). Used to set the groups of the user.\n* &quot;iat&quot;: issued at, the time when the token was issued. Tokens older than 24 hours and tokens issued in the future aren&#x27;t accepted.\n* &quot;nbf&quot;: not before, the token is rejected if this time is in the future.\n\nThe token needs to be present in the &quot;Authorization&quot; header in the form &quot;Bearer TOKEN&quot; where TOKEN is the signed JWT token as described above.\n\n\n",
      "similarity_score": 0.8695666790008545,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.LLM Application.Index for the LLM Application.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/LLM%20Application/Index%20for%20the%20LLM%20Application/",
      "content": "#### GET /wikis/{wikiName}/aiLLM/collections/{collectionName}/documents\n\nReturns a list of document IDs that are contained in the collection of the given name. This resource supports the following query parameters:\n\n* start: the index of the first document to retrieve (default: 0)\n* number: the number of documents to retrieve (default: -1)\n\n### Document Resource\n\nA document object has the following properties, all properties are strings unless otherwise mentioned:\n\n* id: id of the document\n* title: pretty name of the document\n* language: the language of the document (currently not used)\n* url: the URL of the document, used to display a link to the original resource when the document is used as context in a chat\n* collection: the name of the collection the document is part of\n* mimetype: the mime type of the document, currently not used, could be used in the future to use a chunking method that is specific to the mime type\n* content: the content of the document that is indexed\n\n#### GET /wikis/{wikiName}/aiLLM/collections/{collectionName}/documents/{documentID}\n\nReturns the document of the given name in the collection of the given name.\n\n#### PUT /wikis/{wikiName}/aiLLM/collections/{collectionName}/documents/{documentID}\n\nCreates or updates the document of the given name in the collection of the given name. The body of the request is a document, if not all properties are specified, only the specified properties are updated.\n\n#### DELETE /wikis/{wikiName}/aiLLM/collections/{collectionName}/documents/{documentID}\n\nDeletes the document of the given name in the collection of the given name.\n\n",
      "similarity_score": 0.8343086242675781,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "xwiki:Documentation.AdminGuide.Authentication.WebHome",
      "url": "https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/",
      "content": "| protection | Yes | all, validation, encryption, none | all | Protection level for the &quot;remember me&quot; cookie functionality |\n| useip | Yes | true / false | true | Specify to use the IP address when encrypting the cookie data; if IP address changes will need to re-login. |\n\n1. Only required if protection = encryption or all (default)\n2. Only required if protection = validation or all (default)\n\n## Security\n\nStarting with XWiki 11.6RC1 we provide some authentication strategies that are triggered if a user fails several time in a row to login.  \nYou can configure those strategies and when they should be triggered in the Administration &gt; Authentication page.\n\n![authentication-security-administration.png](https://www.xwiki.org/xwiki/bin/download/Documentation/AdminGuide/Authentication/WebHome/authentication-security-administration.png?rev=1.1)\n\nFor more information see the [Authencation Security Module documentation](https://extensions.xwiki.org/xwiki/bin/view/Extension/Authentication%20Security%20Module/).\n\n# Kerberos SSO Authentication\n\nThis implementation of SSO is currently under review see: &lt;https://jira.xwiki.org/browse/XWIKI-2496&gt; . The class which is described in this segment of documentation, AppServerTrustedKerberosAuthServiceImpl, is not part of the default XWiki distribution!\n\nThe following is an example of **mod\\_auth\\_kerb** for Apache being used to easily implement XWiki authentication of users via HTTP Negotiate on a linux server. This example assumes you already have a working Apache2 HTTPD and Apache Tomcat setup with mod\\_jk.\n\nFirst of all you need to create a principal and keytab for the webserver:\n\n",
      "similarity_score": 0.8264274597167969,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.OpenID Connect.OpenID Connect Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/",
      "content": "## Authentication with a domain-based instance\n\nWhen XWiki is configured as a domain-based instance, users will not be automatically authenticated on every wiki by default, as the OIDC authenticator does not rely on the property xwiki.authentication.cookiedomains in xwiki.cfg.\n\nTo still allow users to be automatically authenticated when accessing one of the wikis of the farm, you will have to update the configuration of the session cookie of your servlet container so that this cookie gets set on a top-level domain, encompassing every wiki of farm. If your XWiki instance has very different domains for its wikis, this fix will not work.\n\nWhen using Tomcat as a servlet container, it&#x27;s possible to change the domain of the cookie JSESSIONID by adding the attribute sessionCookieDomain to context.xml as such :\n\n&lt;Context sessionCookieDomain=&quot;mytld.org&quot;&gt;  \n...  \n&lt;/Context&gt;# Endpoints\n\n## Callback\n\npath: **authenticator/callback**\n\n## [Back-Channel Logout](https://openid.net/specs/openid-connect-backchannel-1_0.html)\n\npath: **authenticator/backchannel\\_logout**\n\n# Bypass OpenID Connect\n\nAs indicated in the previous section you can disable OpenID Connect using the property oidc.skipped in the xwiki.properties file.\n\nIt&#x27;s also possible to skip OpenId Connect temporarily using a URL parameter: for example https://mydomain/xwiki/bin/view/Main/?oidc.skipped=true.\n\n",
      "similarity_score": 0.8251241445541382,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.LDAP.Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/LDAP/Authenticator/",
      "content": "#-# Without this setting you will be unable to log into XWiki with local accounts.  \n#-# - 0: disable  \n#-# - 1: enable  \n#-# The default is 0  \nxwiki.authentication.ldap.trylocal=1You can setup the LDAP configuration in the **xwiki.cfg** file by filling the following properties:\n\n#-# Turn LDAP authentication on - otherwise only XWiki authentication  \n#-# - 0: disable  \n#-# - 1: enable  \n#-# The default is 0  \nxwiki.authentication.ldap=1  \n  \n#-# LDAP Server (Active Directory, eDirectory, OpenLDAP, etc.)  \n#-# The default host is localhost  \nxwiki.authentication.ldap.server=localhost  \n#-# The default port is 389 (636 if xwiki.authentication.ldap.ssl is enabled)  \n# xwiki.authentication.ldap.port=389  \n  \n#-# LDAP credentials, empty = anonymous access, otherwise specify full dn  \n#-# {0} is replaced with the user name, {1} with the password  \nxwiki.authentication.ldap.bind\\_DN=cn={0},department=USER,department=INFORMATIK,department=1230,o=MP  \nxwiki.authentication.ldap.bind\\_pass={1}  \n  \n#-# The Base DN used in LDAP searches  \nxwiki.authentication.ldap.base\\_DN=  \n  \n#-# LDAP query to search the user in the LDAP database (in case a static admin user is provided in  \n#-# xwiki.authentication.ldap.bind\\_DN)  \n#-# {0} is replaced with the user uid field name and {1} with the user name  \n#-# The default is:  \n# xwiki.authentication.ldap.user\\_search\\_fmt=({0}={1})  \n  \n#-# Only members of the following group can authenticate.  \n#-# The following kind of groups are supported:  \n#-# \\* LDAP static groups (users/subgroups are listed statically in the group object)  \n#-# \\* [Since 3.3M1] LDAP organization units (users/subgroups are sub object of the provided organization unit)  \n#-# \\* [Since 3.3M1] LDAP filter (users/groups are object found in a search with the provided filter)  \n# xwiki.authentication.ldap.user\\_group=cn=developers,ou=groups,o=MegaNova,c=US  \n  \n#-# Only users not member of the following group can authenticate.  \n",
      "similarity_score": 0.809119701385498,
      "vector": null
    }
  ],
  "usage": {
    "prompt_tokens": 2243,
    "completion_tokens": 604,
    "total_tokens": 2847
  },
  "average_power_draw": null,
  "energy_consumption": null,
  "energy_per_input_token": null,
  "energy_per_output_token": null,
  "energy_per_total_token": null
}