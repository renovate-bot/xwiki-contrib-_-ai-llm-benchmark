{
  "id": "qa_006",
  "prompt": "Can I customize the user profile fields that are populated from the OpenID Connect provider in XWiki?\nI want to map additional user profile fields from my OpenID Connect provider to XWiki user properties. How can I achieve this?",
  "expected_answer": "Yes, you can customize the user profile fields that are populated from the OpenID Connect provider by mapping them in the `xwiki.properties` file.\n\nTo map additional user profile fields, use the `oidc.user.mapping` property. Here's an example of how to map custom properties:\n\n```\n# oidc.user.mapping=myxproperty1=${oidc.user.subject}\n# oidc.user.mapping=myxproperty2=myprefix-${oidc.user.subject}\n```\n\nReplace `myxproperty1` and `myxproperty2` with the actual XWiki user property names, and `${oidc.user.subject}` with the appropriate variable based on the data provided by your OpenID Connect provider.\n\nAfter configuring the mappings, save the `xwiki.properties` file and restart XWiki to apply the changes.",
  "ai_answer": "Sources: https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/ \n\n\nYes, you can customize the user profile fields populated from an OpenID Connect (OIDC) provider in XWiki.\n\nXWiki provides a flexible way to manage user profiles through its \"User Profile\" feature, which allows you to add custom fields and map them to properties of the `xwiki_user` document. When using OIDC as an authentication method, you can leverage this flexibility by mapping additional user profile fields from your OIDC provider to XWiki user properties.\n\nHere's a step-by-step guide on how to achieve this:\n\n### 1. **Understand Your OpenID Connect Provider**\n\nFirst, familiarize yourself with the user profile attributes provided by your OIDC identity provider. These attributes are usually specified in the `openid_profile` section of the OIDC configuration or can be found in the documentation of your specific provider.\n\nSome common attributes include:\n\n- `name`\n- `email`\n- `profile_picture` (or similar)\n- `locale`\n\n### 2. **Identify XWiki User Properties**\n\nNext, determine which user properties in XWiki you want to map these OIDC attributes to. You can do this by checking the available fields on the \"User Profile\" page within your XWiki instance or by consulting the [XWiki documentation](https://extensions.xwiki.org/xwiki/bin/view/Extension/User%20Profile/) for details.\n\nCommon user properties include:\n\n- `firstName`\n- `lastName`\n- `emailAddress`\n\n### 3. **Configure the OIDC Mapping**\n\nTo map additional OIDC attributes to XWiki user properties, you'll need to configure this mapping within your XWiki instance. This typically involves editing or creating a configuration file for your OIDC provider.\n\nThe exact steps can vary depending on how you've set up your OIDC integration with XWiki (e.g., using the XWiki OpenID Connect plugin). If you're using the plugin, you might need to edit the `oidc.properties` file located in the `<XWiki-Home>/WEB-INF/classes/properties` directory or its equivalent for your setup.\n\nFor example, if you want to map the OIDC attribute `name` to XWiki's `firstName`, and `email` to `emailAddress`, you might add configurations like this:\n\n```properties\noidc.mapping.firstName = name\noidc.mapping.emailAddress = email\n```\n\n### 4. **Verify the Mapping**\n\nAfter making these changes, verify that the OIDC attributes are correctly mapped to XWiki user properties. You can do this by logging in with an OIDC account and checking the updated user profile within your XWiki instance.\n\nThis process allows you to customize the user profile fields populated from your OIDC provider to better match your needs within XWiki.\n\n### Additional Tips\n\n- **Consult XWiki Documentation**: The official [XWiki documentation](https://extensions.xwiki.org/xwiki/bin/view/Extension/User%20Profile/) provides detailed information on managing user profiles, including how to add custom fields.\n- **OIDC Provider Specifics**: Be aware that the specifics of mapping OIDC attributes can vary between providers. Consult your provider's documentation for details.\n- **Testing**: Always test after making changes to ensure everything works as expected.\n\nBy following these steps and considering the specific needs of your XWiki instance, you should be able to successfully map additional user profile fields from your OpenID Connect provider.",
  "sources": [
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.OpenID Connect.OpenID Connect Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/",
      "content": "#-# The following suffixes can be added:  \n#-# \\* &quot;.\\_lowerCase&quot;: the lower case version of the string  \n#-# \\* &quot;.\\_upperCase&quot;: the upper case version of the string\u00a0  \n#-# \\* &quot;.\\_clean&quot;: a version of the string stripped from &quot;.&quot;, &quot;:&quot;, &quot;,&quot;, &quot;@&quot;, &quot;^&quot; characters and &quot;\\s&quot; (all forms of white spaces).  \n#-# \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0It can itself be suffixed with &quot;.\\_lowerCase&quot; and &quot;.\\_upperCase&quot;.  \n#-#  \n#-# The variable syntax also have other features (fallback value, etc.) detailed on https://commons.apache.org/proper/commons-text/apidocs/org/apache/commons/text/StringSubstitutor.html.  \n#-#\u00a0  \n#-# The default is:\u00a0  \n# oidc.user.nameFormater=${oidc.issuer.host.\\_clean}-${oidc.user.preferredUsername.\\_clean}  \n  \n#-# The pattern to use to generate the unique identifier of the user in the OpenId Connect provider.  \n#-# It is used to avoid collisions with user have similar name.  \n#-#\u00a0  \n#-# The syntax is the same than the one described for oidc.user.nameFormater property.  \n#-#\u00a0  \n#-# The default is:\u00a0  \n# oidc.user.subjectFormater=${oidc.user.subject}  \n  \n#-# It&#x27;s possible to associate non standard properties coming from the OpenID Connect provider with the XWiki user.  \n#-# It&#x27;s a map with the name of the XWiki user property and a format similar to the one defined in oidc.user.nameFormater for the OpenID Connect side.  \n#-#\u00a0  \n# oidc.user.mapping=myxproperty1=${oidc.user.subject}  \n# oidc.user.mapping=myxproperty2=myprefix-${oidc.user.subject}  \n  \n#-# The righs each new user should have on its own profile as a comma (only comma, no white space allowed) separated list. Setting a right also implies that all the others users don&#x27;t have it.  \n#-# For example if you want that only users have view right on their profile but thay can modify their own profile you could use:  \n# oidc.user.oidc.user.ownProfileRights=view,edit  \n#-#\u00a0  \n",
      "similarity_score": 31.94184112548828,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.OpenID Connect.OpenID Connect Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/",
      "content": "#-# \\* profile: Requests that access to the end-user&#x27;s default profile claims at the UserInfo endpoint be granted by the issued access token.  \n#-# \\* email: Requests that access to the email and email\\_verified claims at the UserInfo endpoint be granted by the issued access token.  \n#-# \\* address: Requests that access to address claim at the UserInfo endpoint be granted by the issued access token.  \n#-# \\* phone: Requests that access to the {phone\\_number and phone\\_number\\_verified claims at the UserInfo endpoint be granted by the issued access token.  \n#-# \\* offline\\_access: Requests that an OAuth 2.0 refresh token be issued that can be used to obtain an access token that grants access the end-user&#x27;s UserInfo endpoint even when the user is not present (not logged in).  \n#-#\u00a0  \n#-# But depending on the provider more can be listed.  \n#-#\u00a0  \n#-# The default is:  \n# oidc.scope=openid,profile,email,address,phone  \n  \n#-# The response type to control the flow used by the OpenId Connect protocol.  \n#-# This is often used to control if the information about the user should  \n#-# be gathered from the userinfo endpoint with a request from XWiki to the provider (&quot;code&quot;, the default)  \n#-# or the id token directly provided when the provider redirects to XWiki (&quot;id\\_token&quot;)  \n#-# but it&#x27;s also possible to combine.  \n#-# See https://openid.net/specs/openid-connect-core-1\\_0.html#rfc.section.3 for mode details.  \n#-# For an hybrid flow, use list syntax (so comma or several set) instead of the white space  \n#-# documented in the specification to separate words.  \n#-#  \n#-# The default is:  \n# oidc.responseType=code  \n  \n#-# The method used to access the userinfo endpoint.  \n#-#\u00a0  \n#-# Supported values are:  \n#-# \\* GET: use GET HTTP method  \n#-# \\* POST: use POST HTTP method  \n#-#\u00a0  \n#-# The default is:  \n# oidc.endpoint.userinfo.method=GET  \n  \n#-# The pattern to use to generate the XWiki user name.  \n#-#\u00a0  \n",
      "similarity_score": 28.447538375854492,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.OpenID Connect.OpenID Connect Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/",
      "content": "#-# The authentication management class.  \nxwiki.authentication.authclass=org.xwiki.contrib.oidc.auth.OIDCAuthServiceImpl### xwiki.properties\n\n#-# The base URL of the OpenId Connect Provider to use as starting point to discover the provider configuration.  \n#-# See following endpoints properties if the provider is does not support OpenID Connect discovery.  \n#-# If not indicated and not custom endpoint is provided, it will be asked to the user.  \n# oidc.provider=https://xwikiorg-node1.xwikisas.com/xwiki/oidc  \n  \n#-# The generic OpenId Connect endpoints to use to communicate with the provider.  \n#-# It&#x27;s generally not needed when providing the provider discovery endpoint (which is supposed to provide those enpoints).  \n# oidc.endpoint.authorization=https://xwikiorg-node1.xwikisas.com/xwiki/oidc/authorization  \n# oidc.endpoint.token=https://xwikiorg-node1.xwikisas.com/xwiki/oidc/token  \n# oidc.endpoint.userinfo=https://xwikiorg-node1.xwikisas.com/xwiki/oidc/userinfo  \n# oidc.endpoint.logout=https://xwikiorg-node1.xwikisas.com/xwiki/oidc/logout  \n  \n#-# It&#x27;s possible to add custom HTTP headers to the endpoint (generally only needed for bad or non-oidc providers)  \n#-# by adding the suffix &quot;.headers&quot; to the endpoint property key and listing the custom headers using key:value format.  \n#-# Note that it&#x27;s not taken into account for the oidc.endpoint.authorization endpoint because it&#x27;s used as a redirect.  \n#-# Here is an example to send &quot;Accept: application/json&quot; and &quot;SomeOtherHeader: header&quot; HTTP headers with the userinfo request.  \n# oidc.endpoint.userinfo.headers=Accept:application/json  \n# oidc.endpoint.userinfo.headers=SomeOtherHeader:header value  \n  \n#-# The scopes to use when redirecting to the provider  \n#-# The standard OpenID Connection scopes are:  \n#-# \\* openid: Informs the authorisation server that the client is making an OpenID Connect request (REQUIRED).  \n",
      "similarity_score": 0.8014670610427856,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.OpenID Connect.OpenID Connect Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/",
      "content": "# Group synchronization\n\nThe default group synchronization is enabled by adding the claim xwiki\\_groups to the property oidc.userinfoclaims in the xwiki.properties file.\n\nBy default this synchronization expect to receive the list of group names (without the `wiki:XWiki.` prefix) in which the user should be placed (groups are automatically created when they don&#x27;t exist). You can also define a mapping between the XWiki groups and the provider groups using oidc.groups.mapping property.\n\nIt&#x27;s also possible to implement your own custom group synchronization in a listener. See [Listeners section](https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/#HListeners).\n\n# Customization\n\n## Templates\n\nThe authenticator uses a template to ask the user for the target provider when it&#x27;s not provided in the configuration. This template can be overwritten through the standard [template system](https://extensions.xwiki.org/xwiki/bin/view/Extension/Template%20Module).\n\nThe name of the template is oidc/client/provider.vm.\n\n## Listeners\n\nIt&#x27;s possible to implement an event [listener](https://extensions.xwiki.org/xwiki/bin/view/Extension/Observation%20Module%20Local) and be notified during user profile update to add more to this process or do other things after it:\n\n* org.xwiki.contrib.oidc.event.OIDCUserUpdating to modify the user profile before it being saved\n* org.xwiki.contrib.oidc.event.OIDCUserUpdated to do something after the user profile has been saved\n\n# Troubleshooting\n\n## Enable DEBUG log\n\nSee [Logging Admin Guide](https://xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Logging).\n\nThe specific packages to track for OpenID Connect module is org.xwiki.contrib.oidc. There is several ways to enable debug log.\n\n",
      "similarity_score": 0.8001906871795654,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.OpenID Connect.OpenID Connect Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/",
      "content": "# oidc.skipped=false## In-wiki configuration\n\nXWiki 1.30+ The OIDC authenticator can be configured in XWiki, and to rely on multiple configurations which get selected through a user cookie.\n\nIn order to use the in-wiki configuration of the OIDC authenticator, you will still need to define the configuration key xwiki.authentication.authclass in xwiki.cfg. Once the OIDC Authenticator installed, you will be able to define new OIDC Client configurations through objects of class XWiki.OIDC.ClientConfigurationClass.\n\nThe property &quot;Configuration name&quot; of the object will define the name of the OIDC configuration being declared. Use default for the default OIDC configuration. The other properties are similar to the properties defined in xwiki.properties. Use the key oidc.defaultClientConfiguration in xwiki.properties to change the name of the OIDC configuration that should be used by default.\n\nWhen creating multiple in-wiki configurations, each configuration will be selectable by the user through the cookie oidcProvider. You can change the name of this cookie with the key oidc.clientConfigurationCookie in xwiki.properties.\n\n",
      "similarity_score": 0.7995548248291016,
      "vector": null
    }
  ],
  "usage": {
    "prompt_tokens": 56,
    "completion_tokens": 684,
    "total_tokens": 740
  },
  "average_power_draw": 157.9735061728395,
  "energy_consumption": 1443.260665991889,
  "energy_per_input_token": 0.8172483952388951,
  "energy_per_output_token": 2.0431209880972383,
  "energy_per_total_token": 1.9503522513403906
}