{
  "id": "qa_031",
  "prompt": "Can I authenticate users with access tokens?",
  "expected_answer": "Yes, you can authenticate users with access tokens using the Token-based authentication for the LLM Application extension.\n\nThis extension allows external applications to authenticate users with signed JSON Web Tokens (JWT). The token needs to contain specific claims, such as expiration time, issuer, subject, and audience, and must be signed with an Ed25519 key.\n\nTo use this authenticator, you need to:\n\n1. Enable the token authenticator by setting the `xwiki.authentication.authclass` property in `xwiki.properties` file to `org.xwiki.contrib.llm.authentication.JWTTokenAuth`.\n2. Configure the authorized applications by adding a new entry to the \"Authorized Applications\" list, specifying the application's title, URL, public key, and group format.\n3. Generate a JWT token that meets the required claims and signing key requirements.\n4. Include the token in the \"Authorization\" header of the request in the form \"Bearer TOKEN\".\n\nNote that this authenticator only supports creating or updating users based on the information provided in the token and does not support using a token as authentication for an existing user that hasn't been created through this authenticator.",
  "ai_answer": "Sources: https://extensions.xwiki.org/xwiki/bin/view/Extension/LDAP/Authenticator/ \nhttps://extensions.xwiki.org/xwiki/bin/view/Extension/LLM%20Application/Authenticator/ \nhttps://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/ \nhttps://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/ \n\n\nYes, based on the search results, XWiki supports authentication using JSON Web Tokens (JWT) through the \"LLM Application Authenticator\" extension. Here are the key points:\n\n1. The authenticator allows external applications to authenticate users using signed JSON Web Tokens (JWT)\n2. Configuration steps:\n   * Enable the token authenticator by setting `xwiki.authentication.authclass=org.xwiki.contrib.llm.authentication.JWTTokenAuth` in the xwiki.properties file\n   * Alternatively, select \"JWT Token Authenticator for the LLM AI Application\" in the authentication configuration\n   * Configure authorized applications in the \"Authorized Applications\" section, where you can specify:\n     * Application title\n     * URL\n     * Public key (Ed25519 in PEM format)\n     * Group format\n\nKey features:\n* Users are automatically created or updated based on the token information\n* Multiple applications can be configured with distinct user accounts\n* The authenticator can fall back to another configured authenticator when no token is present\n* Note: Currently, there's no support for using tokens to authenticate existing users that weren't created through this authenticator\n\nIt's worth noting that according to the documentation, XWiki currently only allows one authentication method to be enabled at a time, though this limitation may be improved in future versions.",
  "sources": [
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.LDAP.Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/LDAP/Authenticator/",
      "content": "#-# Without this setting you will be unable to log into XWiki with local accounts.  \n#-# - 0: disable  \n#-# - 1: enable  \n#-# The default is 0  \nxwiki.authentication.ldap.trylocal=1You can setup the LDAP configuration in the **xwiki.cfg** file by filling the following properties:\n\n#-# Turn LDAP authentication on - otherwise only XWiki authentication  \n#-# - 0: disable  \n#-# - 1: enable  \n#-# The default is 0  \nxwiki.authentication.ldap=1  \n  \n#-# LDAP Server (Active Directory, eDirectory, OpenLDAP, etc.)  \n#-# The default host is localhost  \nxwiki.authentication.ldap.server=localhost  \n#-# The default port is 389 (636 if xwiki.authentication.ldap.ssl is enabled)  \n# xwiki.authentication.ldap.port=389  \n  \n#-# LDAP credentials, empty = anonymous access, otherwise specify full dn  \n#-# {0} is replaced with the user name, {1} with the password  \nxwiki.authentication.ldap.bind\\_DN=cn={0},department=USER,department=INFORMATIK,department=1230,o=MP  \nxwiki.authentication.ldap.bind\\_pass={1}  \n  \n#-# The Base DN used in LDAP searches  \nxwiki.authentication.ldap.base\\_DN=  \n  \n#-# LDAP query to search the user in the LDAP database (in case a static admin user is provided in  \n#-# xwiki.authentication.ldap.bind\\_DN)  \n#-# {0} is replaced with the user uid field name and {1} with the user name  \n#-# The default is:  \n# xwiki.authentication.ldap.user\\_search\\_fmt=({0}={1})  \n  \n#-# Only members of the following group can authenticate.  \n#-# The following kind of groups are supported:  \n#-# \\* LDAP static groups (users/subgroups are listed statically in the group object)  \n#-# \\* [Since 3.3M1] LDAP organization units (users/subgroups are sub object of the provided organization unit)  \n#-# \\* [Since 3.3M1] LDAP filter (users/groups are object found in a search with the provided filter)  \n# xwiki.authentication.ldap.user\\_group=cn=developers,ou=groups,o=MegaNova,c=US  \n  \n#-# Only users not member of the following group can authenticate.  \n",
      "similarity_score": 6.313381671905518,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.LLM Application.Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/LLM%20Application/Authenticator/",
      "content": "### Authorized Applications Configuration\n\nThe extension adds a new &quot;Authorized Applications&quot; entry to the &quot;Applications&quot; list (see top left of the following screenshot). It allows managing which applications are allowed to generate tokens for the use with this authenticator.\n\n![Screenshot of the main screen of the Authorized Applications application, showing the entries list with one entry](https://extensions.xwiki.org/xwiki/bin/download/Extension/LLM%20Application/Authenticator/WebHome/AuthorizedApplications.png?width=960&amp;height=375&amp;rev=1.1)\n\nBy clicking on &quot;Add new entry&quot;, you can add a new authorized application. You can configure the following properties:\n\n* Title - the title of the application, this is just for display purposes\n* URL - the URL of the application. This is the identifier of the application and must match the &quot;issuer&quot; field in the generated tokens (see below)\n* The public key - this must be an Ed25519 public key in PEM format that corresponds to the private key that is used for signing the tokens (see below)\n* Group format - the format for the groups. To avoid that external applications create users with groups like XWikiAdminGroup that would grant admin right on the wiki, it is highly recommended to configure a unique prefix and possibly also suffix, e.g., by using &quot;Example${group}Group&quot; where ${group} will be replaced by the group name that is provided in the token.\n\n![Screenshot of an authorized application entry](https://extensions.xwiki.org/xwiki/bin/download/Extension/LLM%20Application/Authenticator/WebHome/ExampleApplication.png?width=650&amp;height=435&amp;rev=1.1)\n\n",
      "similarity_score": 5.750383377075195,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.OpenID Connect.OpenID Connect Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/",
      "content": "#-# \\* profile: Requests that access to the end-user&#x27;s default profile claims at the UserInfo endpoint be granted by the issued access token.  \n#-# \\* email: Requests that access to the email and email\\_verified claims at the UserInfo endpoint be granted by the issued access token.  \n#-# \\* address: Requests that access to address claim at the UserInfo endpoint be granted by the issued access token.  \n#-# \\* phone: Requests that access to the {phone\\_number and phone\\_number\\_verified claims at the UserInfo endpoint be granted by the issued access token.  \n#-# \\* offline\\_access: Requests that an OAuth 2.0 refresh token be issued that can be used to obtain an access token that grants access the end-user&#x27;s UserInfo endpoint even when the user is not present (not logged in).  \n#-#\u00a0  \n#-# But depending on the provider more can be listed.  \n#-#\u00a0  \n#-# The default is:  \n# oidc.scope=openid,profile,email,address,phone  \n  \n#-# The response type to control the flow used by the OpenId Connect protocol.  \n#-# This is often used to control if the information about the user should  \n#-# be gathered from the userinfo endpoint with a request from XWiki to the provider (&quot;code&quot;, the default)  \n#-# or the id token directly provided when the provider redirects to XWiki (&quot;id\\_token&quot;)  \n#-# but it&#x27;s also possible to combine.  \n#-# See https://openid.net/specs/openid-connect-core-1\\_0.html#rfc.section.3 for mode details.  \n#-# For an hybrid flow, use list syntax (so comma or several set) instead of the white space  \n#-# documented in the specification to separate words.  \n#-#  \n#-# The default is:  \n# oidc.responseType=code  \n  \n#-# The method used to access the userinfo endpoint.  \n#-#\u00a0  \n#-# Supported values are:  \n#-# \\* GET: use GET HTTP method  \n#-# \\* POST: use POST HTTP method  \n#-#\u00a0  \n#-# The default is:  \n# oidc.endpoint.userinfo.method=GET  \n  \n#-# The pattern to use to generate the XWiki user name.  \n#-#\u00a0  \n",
      "similarity_score": 0.7361047267913818,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.LLM Application.Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/LLM%20Application/Authenticator/",
      "content": "# Description\n\nThis extension provides a way for external applications that, e.g., embed the chat provided by the [LLM Application (BETA)](https://extensions.xwiki.org/xwiki/bin/view/Extension/LLM%20Application/) to authenticate users with signed [JSON Web Tokens](https://en.wikipedia.org/wiki/JSON_Web_Token) (JWT). Users are directly created or updated based on the information provided in the token. There is currently no support for using a token as authentication for an existing user that hasn&#x27;t been created through this authenticator. The authenticator supports authenticating users from several applications that are mapped to distinct user accounts. When no token is present in the request, the authenticator falls back on a configurable authenticator and it should thus be able to combine this token authenticator with any other authenticator.\n\n## Configuration\n\nYou can enable this token authenticator by setting the xwiki.authentication.authclass\u00a0property in\u00a0xwiki.properties file to org.xwiki.contrib.llm.authentication.JWTTokenAuth. Alternatively, you can select the &quot;JWT Token Authenticator for the LLM AI Application&quot; in the [authentication configuration](https://xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/#HChoosetheauthenticator).\n\nWhen there is no token in the request (see below), the authenticator falls back to the default authenticator. You can set the llm.authentication.jwt.authenticator property in xwiki.properties file to the authenticator that shall be used as fallback instead of the default authenticator.\n\n",
      "similarity_score": 0.7270974516868591,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "xwiki:Documentation.AdminGuide.Authentication.WebHome",
      "url": "https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/",
      "content": "XWiki supports several different authentication mechanisms for authenticating users.\n\nXWiki currently allows only one method of authentication to be enabled at a time. This will probably be improved in the future.\n\nAlso note that XWiki requires cookies to be enabled in order to track your session and to keep you logged in between pages.\n\n# Choose the authenticator\n\nHistorically, the authenticator to use in XWiki is controlled by the property xwiki.authentication.authclass in the xwiki.properties file.\n\nXWiki 15.3+\u00a0For authenticators which supports it, it&#x27;s possible to choose the authenticator to use in the wiki administration.\n\n![authserviceadmin.png](https://www.xwiki.org/xwiki/bin/download/Documentation/AdminGuide/Authentication/WebHome/authserviceadmin.png?rev=1.1)\n\n\n\n# Authentication Types\n\n## Form Authentication\n\nForm authentication is the default way to get authenticated within a Wiki. It requires a user and a password.\n\n## Basic Authentication\n\nXWiki supports [basic access authentication](https://en.wikipedia.org/wiki/Basic_access_authentication), a method designed to allow a web browser or other client programs to provide credentials - in the form of a user name and password - when making a request. You can get authenticated against an XWiki server with the basic authentication protocol using the following URL scheme:\n\nhttps://username:password@mywiki.xwiki.com/xwiki/bin/view/Main/WebHome?basicauth=1  \nBe careful that if you use the HTTP protocol your password will be sent in clear over the network and is thus very unsafe. When using basic authentication you should make sure your wiki is configured to use HTTPS.\n\n",
      "similarity_score": 0.7030072808265686,
      "vector": null
    }
  ],
  "usage": {
    "prompt_tokens": 2799,
    "completion_tokens": 302,
    "total_tokens": 3101
  },
  "average_power_draw": null,
  "energy_consumption": null,
  "energy_per_input_token": null,
  "energy_per_output_token": null,
  "energy_per_total_token": null
}