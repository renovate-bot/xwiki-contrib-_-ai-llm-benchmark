{
  "id": "qa_026",
  "prompt": "Puis-je personnaliser les champs de profil utilisateur qui sont remplis \u00e0 partir du fournisseur OpenID Connect dans XWiki?\nJe souhaite mapper des champs de profil utilisateur suppl\u00e9mentaires de mon fournisseur OpenID Connect aux propri\u00e9t\u00e9s de l'utilisateur XWiki. Comment puis-je y parvenir?",
  "expected_answer": "Oui, vous pouvez personnaliser les champs de profil utilisateur qui sont remplis \u00e0 partir du fournisseur OpenID Connect en les mappant dans le fichier `xwiki.properties`.\n\nPour mapper des champs de profil utilisateur suppl\u00e9mentaires, utilisez la propri\u00e9t\u00e9 `oidc.user.mapping`. Voici un exemple de la fa\u00e7on de mapper des propri\u00e9t\u00e9s personnalis\u00e9es:\n\n```\n# oidc.user.mapping=myxproperty1=${oidc.user.subject}\n# oidc.user.mapping=myxproperty2=myprefix-${oidc.user.subject}\n```\n\nRemplacez `myxproperty1` et `myxproperty2` par les noms de propri\u00e9t\u00e9 d'utilisateur XWiki r\u00e9els, et `${oidc.user.subject}` par la variable appropri\u00e9e en fonction des donn\u00e9es fournies par votre fournisseur OpenID Connect.\n\nApr\u00e8s avoir configur\u00e9 les mappages, enregistrez le fichier `xwiki.properties` et red\u00e9marrez XWiki pour appliquer les modifications.",
  "ai_answer": "https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/DatabaseSupport \nhttps://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/ScalabilityPerformance \nhttps://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/OfficeImporter \n\n\nBased on the information provided, XWiki supports customization and extension in many areas, but it does not explicitly mention the ability to map additional OpenID Connect user profile fields to XWiki user properties.\n\nHowever, XWiki is built on a Java/Java EE stack and allows programming features, which means you might be able to develop a custom solution for this problem. Here's a general approach you could consider:\n\n1. **Create a custom XWiki extension**: XWiki extensions are the recommended way to customize and add features to XWiki. You can create a custom extension to handle the mapping of additional OpenID Connect user profile fields to XWiki user properties.\n\n2. **Intercept the authentication process**: You would need to intercept the authentication process to extract the additional user profile fields from the OpenID Connect provider. This could potentially be done by implementing a custom authentication listener or extending the existing OpenID Connect authentication module.\n\n3. **Map the user profile fields**: Once you have access to the additional user profile fields, you can map them to XWiki user properties. This would likely involve creating or modifying XWiki user objects and setting their properties accordingly.\n\n4. **Handle any discrepancies**: If the user profile fields from the OpenID Connect provider do not directly match XWiki user properties, you may need to perform data transformations or create custom XWiki user properties to store the additional information.\n\nKeep in mind that this is a general approach and might require a good understanding of XWiki's internals and programming features. If you are not comfortable with Java or XWiki development, you might want to consider hiring a developer or reaching out to the XWiki community for further assistance.",
  "sources": [
    {
      "collection_id": "Eval",
      "document_id": "xwiki:Documentation.UserGuide.Features.DatabaseSupport",
      "url": "https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/DatabaseSupport",
      "content": "\nAll XWiki pages are saved in a relational database for better efficiency. This allows XWiki to be fast and scalable. It also allows you to use the [Programming](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/Programming) features to perform queries in your pages on any data contained in other pages.\n\nTheoretically XWiki supports the [same databases Hibernate supports](https://community.jboss.org/wiki/SupportedDatabases2). This means that if you provide the correct Hibernate mapping file all those databases should work fine with XWiki.\n\nMore specifically the [XWiki Development Team officially supports a subset of all those databases](https://dev.xwiki.org/xwiki/bin/view/Community/DatabaseSupportStrategy).\n\n\n",
      "similarity_score": 0.8137578964233398,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "xwiki:Documentation.UserGuide.Features.ScalabilityPerformance",
      "url": "https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/ScalabilityPerformance",
      "content": "\nXWiki is written in Java/Java EE. As such it scales as well as Java scales.\n\n# Multi Tenancy\n\nXWiki supports the ability to run hundreds and even thousands of wikis on the same JVM (i.e. same webapp).\n\nSome examples:\n\n* [MyXWiki](http://myxwiki.org/xwiki/bin/view/Main/WebHome) currently hosts over 170 wikis on a single JVM\n* [XWiki SAS Cloud](http://network.xwiki.com) currently hosts 1000+ wikis (but on several JVMs)\n\nSee the tutorial on [how to configure multi-tenancy](https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Virtualization) to learn more.\n\n# Clustering\n\nXWiki provides an easy way to setup clustered instances of XWiki based on network events distribution. Clustering allows for 2 use cases:\n\n* Load distribution on several JVMs\n* Failover since if a machine is down the other ones are still available\n\nSee [Clustering](https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Clustering) for more details.\n\n\n",
      "similarity_score": 0.8129541873931885,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.Office Importer Application",
      "url": "https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/OfficeImporter",
      "content": "#-# Port number used for connecting to the openoffice server instance.   \n# openoffice.serverPort=8100  \n  \n#-# If the openoffice server should be started / connected upon XE start.  \n# openoffice.autoStart=falseFor the profilePath configuration option, you need to have an OpenOffice profile directory created somewhere on the system. This can be a problem in server environments where launching OpenOffice is not an option. In such situations you can create an OpenOffice profile on a local computer and upload it to the server running XE.\n\nOnce XWiki is configured in this manner, an OpenOffice server must be manually started as a separate process. You can issue the following command to accomplish this:\n\nsoffice -headless -accept=&quot;socket,host=127.0.0.1,port=8100;urp;&quot; -nofirststartwizardDon&#x27;t forget to replace &lt;soffice&gt; with the path to your OpenOffice executable. More information regarding OpenOffice server deployment is provided [here](http://www.artofsolving.com/node/10). Also note that the Office Importer admin UI will change reflecting the new configuration as shown below:\n\n![admin2.png](https://www.xwiki.org/xwiki/bin/download/Extension/Office%20Importer%20Application/admin2.png?rev=1.1)\n\nLinux users may refer to additional installation notes [here](https://www.xwiki.org/xwiki/bin/view/Extension/Office%20Importer%20Application%20Linux).\n\n## Auto start / Auto connect (feature)\n\nThis feature was introduced beginning with the XWiki 1.8.4 version. With this option enabled, you don&#x27;t need to worry about starting / connecting the OpenOffice server from the Office Importer admin UI every time you restart XE. This option can be configured from **xwiki.properties** file as shown below:\n\n",
      "similarity_score": 0.8115432858467102,
      "vector": null
    }
  ],
  "usage": {
    "prompt_tokens": 1260,
    "completion_tokens": 370,
    "total_tokens": 1630
  },
  "average_power_draw": null,
  "energy_consumption": null,
  "energy_per_input_token": null,
  "energy_per_output_token": null,
  "energy_per_total_token": null
}