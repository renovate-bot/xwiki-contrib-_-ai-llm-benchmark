{
  "id": "qa_032",
  "prompt": "Kann ich Benutzer mit Zugriffstoken authentifizieren?",
  "expected_answer": "Ja, Sie k\u00f6nnen Benutzer mit Zugriffstoken mithilfe der Token-basierten Authentifizierung f\u00fcr die LLM-Anwendung (BETA)-Erweiterung authentifizieren.\n\nDiese Erweiterung erm\u00f6glicht es externen Anwendungen, Benutzer mit signierten JSON Web Tokens (JWT) zu authentifizieren. Der Token muss bestimmte Anspr\u00fcche enthalten, wie Ablaufzeit, Aussteller, Betreff und Zielgruppe, und muss mit einem Ed25519-Schl\u00fcssel signiert sein.\n\nUm diesen Authentifizierer zu verwenden, m\u00fcssen Sie:\n\n1. Den Token-Authentifizierer aktivieren, indem Sie die Eigenschaft `xwiki.authentication.authclass` in der Datei `xwiki.properties` auf `org.xwiki.contrib.llm.authentication.JWTTokenAuth` setzen.\n2. Die autorisierten Anwendungen konfigurieren, indem Sie einen neuen Eintrag zur Liste der \u201eAutorisierten Anwendungen\u201c hinzuf\u00fcgen, wobei Sie den Titel, die URL, den \u00f6ffentlichen Schl\u00fcssel und das Gruppenformat der Anwendung angeben.\n3. Ein JWT-Token generieren, das die erforderlichen Anspr\u00fcche und Signierschl\u00fcssel erf\u00fcllt.\n4. Das Token im \u201eAuthorization\u201c-Header der Anfrage in der Form \u201eBearer TOKEN\u201c einf\u00fcgen.\n\nHinweis: Dieser Authentifizierer unterst\u00fctzt nur die Erstellung oder Aktualisierung von Benutzern auf der Grundlage der im Token bereitgestellten Informationen und unterst\u00fctzt nicht die Verwendung eines Tokens als Authentifizierung f\u00fcr einen bestehenden Benutzer, der nicht \u00fcber diesen Authentifizierer erstellt wurde.",
  "ai_answer": "https://extensions.xwiki.org/xwiki/bin/view/Extension/LLM%20Application/Authenticator/ \nhttps://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module \nhttps://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Attachments \n\n\nYes, you can authenticate users with access tokens. The token-based authenticator you're referring to expects a JWT (JSON Web Token) token signed with an Ed25519 key. The token needs to contain several claims, such as expiration time (exp), issuer (iss), subject (sub), and audience (aud). Optionally, it can contain claims for given name, family name, email, groups, issued at (iat), and not before (nbf).\n\nTo generate a suitable signing key, you can use the OpenSSL command line utility with the following commands:\n\n```bash\nopenssl genpkey -algorithm ed25519 -outform PEM -out private.pem\nopenssl pkey -in private.pem -pubout -outform PEM -out public.pem\n```\n\nThe files \"private.pem\" and \"public.pem\" will then contain the private and public key in PEM format, respectively. The token should be present in the \"Authorization\" header in the form \"Bearer TOKEN\", where TOKEN is the signed JWT token.\n\nFor more information on configuring the AuthorizationSettler and right definitions, you can refer to the XWiki documentation.",
  "sources": [
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.LLM Application.Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/LLM%20Application/Authenticator/",
      "content": "## Token Generation\n\nThis authenticator expects a JWT token that is signed with an Ed25519 key. A suitable signing key can, e.g., be generated using the [OpenSSL](https://www.openssl.org/) command line utility and the following two commands:\n\nopenssl genpkey -algorithm ed25519 -outform PEM -out private.pem  \nopenssl pkey -in private.pem -pubout -outform PEM -out public.pemThe files &quot;private.pem&quot; and &quot;public.pem&quot; then contain the private and public key in PEM format, respectively.\n\nThe JWT token needs to contain the following claims:\n\n* &quot;exp&quot;: the expiration time, must be in the future but not more than 24 hours in the future\n* &quot;iss&quot;: the issuer, corresponding to the URL property configured in the authorized applications\n* &quot;sub&quot;: the subject, used for deriving the username\n* &quot;aud&quot;: the audience, must contain the URL of the XWiki installation in the form https://www.example.com/ without path. Both a single string and an array of strings are supported. If the expected URL isn&#x27;t passed, an error is logged with the expected URL.\n\nOptional:\n\n* &quot;given\\_name&quot;: used to set the first name field of the user profile\n* &quot;family\\_name&quot;: used to set the last name field of the user profile\n* &quot;email&quot;: used to set the email field of the user profile\n* &quot;groups&quot;: a list of groups (as list of strings). Used to set the groups of the user.\n* &quot;iat&quot;: issued at, the time when the token was issued. Tokens older than 24 hours and tokens issued in the future aren&#x27;t accepted.\n* &quot;nbf&quot;: not before, the token is rejected if this time is in the future.\n\nThe token needs to be present in the &quot;Authorization&quot; header in the form &quot;Bearer TOKEN&quot; where TOKEN is the signed JWT token as described above.\n\n\n",
      "similarity_score": 0.7659958004951477,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.Security Module",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module",
      "content": "Therefore, the real task of settling access decisions is entirely delegated to customizable components that may be introduce by third parties and configured without rebuilding the platform. The component hint of the AuthorizationSettler may be configured from the ConfigurationSource (xwiki.properties) using the key security.authorization.settler. The default hint &quot;default&quot; is implemented by the DefaultAuthorizationSettler. Another experimental PriorityAuthorizationSettler (currently unmaintained, use at your own risk) is also bundled. Both are based on a AbstractAuthorizationSettler which provide a common foundation for merging access provide at each hierarchy level based on a customizable dynamic policy.\n\n### Right definitions\n\nSince the settling process is delegated to the AuthorizationSettler, the interpretation of right definitions is up to it, and right definition is only a tool for helping the creation of an expandable authorization settler, allowing new rights to be easily externally defined. New Right maybe registered with the AuthorizationManager using a RightDescription. The meaning of the right definition explained here is mostly pertinent for the default implementation of the AuthorizationSettler, and should normally be followed by any other settler implementation, but this could not be guaranteed.\n\n",
      "similarity_score": 0.7644376158714294,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "xwiki:Documentation.AdminGuide.Attachments",
      "url": "https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Attachments",
      "content": "#### Directory cleanup\n\nSince [XWiki 6.0M2](https://www.xwiki.org/xwiki/bin/view/ReleaseNotes/ReleaseNotesXWiki61M2), it is possible to save time on startup by preventing XWiki from cleaning up empty directories in the Filesystem Attachment Store. To do this, edit xwiki.properties and set **store.fsattach.cleanOnStartup** to false. If you do this, you will be responsible for cleanup of empty directories yourself.\n\n## Database Attachment Store\n\nThe default before 10.5.\n\nThis attachment storage mechanism stores your attachments in database entries in the [xwikiattachment\\_content](https://www.xwiki.org/xwiki/bin/view/Documentation/DevGuide/DsXWikiAttachmentContent), [xwikiattachment\\_archive](https://www.xwiki.org/xwiki/bin/view/Documentation/DevGuide/XWikiAttachmentArchive) and [xwikiattrecyclebin](https://www.xwiki.org/xwiki/bin/view/Documentation/DevGuide/DsXwikiRecycleBin) tables. This system allows for easy backup of your attachments by dumping the database and keeping all of your data together, but attachment size is memory constrained since the attachment content and archive must all be held in memory. As a general rule, attachments larger than 30MB are not possible.\n\n### Switch to database attachment store\n\nThese settings should read as follows:\n\nxwiki.store.attachment.hint = hibernate  \nxwiki.store.attachment.versioning.hint = hibernate  \nxwiki.store.attachment.recyclebin.content.hint=hibernate  \n  \n# If you need to use database store for the attachment it&#x27;s probably true for deleted attachments  \nxwiki.store.recyclebin.content.hint = hibernateAlso make sure they are not commented out.\n\nWhen using this attachment store with a MySQL database, you must set the max\\_allowed\\_packet to about 3 times the size of your largest attachment since the attachment and its version history must be saved. See the [MySQL Installation guide](https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/InstallationMySQL) for more information.\n\n",
      "similarity_score": 0.7571444511413574,
      "vector": null
    }
  ],
  "usage": {
    "prompt_tokens": 1549,
    "completion_tokens": 279,
    "total_tokens": 1828
  },
  "average_power_draw": null,
  "energy_consumption": null,
  "energy_per_input_token": null,
  "energy_per_output_token": null,
  "energy_per_total_token": null
}