{
  "id": "qa_032",
  "prompt": "Kann ich Benutzer mit Zugriffstoken authentifizieren?",
  "expected_answer": "Ja, Sie k\u00f6nnen Benutzer mit Zugriffstoken mithilfe der Token-basierten Authentifizierung f\u00fcr die LLM-Anwendung (BETA)-Erweiterung authentifizieren.\n\nDiese Erweiterung erm\u00f6glicht es externen Anwendungen, Benutzer mit signierten JSON Web Tokens (JWT) zu authentifizieren. Der Token muss bestimmte Anspr\u00fcche enthalten, wie Ablaufzeit, Aussteller, Betreff und Zielgruppe, und muss mit einem Ed25519-Schl\u00fcssel signiert sein.\n\nUm diesen Authentifizierer zu verwenden, m\u00fcssen Sie:\n\n1. Den Token-Authentifizierer aktivieren, indem Sie die Eigenschaft `xwiki.authentication.authclass` in der Datei `xwiki.properties` auf `org.xwiki.contrib.llm.authentication.JWTTokenAuth` setzen.\n2. Die autorisierten Anwendungen konfigurieren, indem Sie einen neuen Eintrag zur Liste der \u201eAutorisierten Anwendungen\u201c hinzuf\u00fcgen, wobei Sie den Titel, die URL, den \u00f6ffentlichen Schl\u00fcssel und das Gruppenformat der Anwendung angeben.\n3. Ein JWT-Token generieren, das die erforderlichen Anspr\u00fcche und Signierschl\u00fcssel erf\u00fcllt.\n4. Das Token im \u201eAuthorization\u201c-Header der Anfrage in der Form \u201eBearer TOKEN\u201c einf\u00fcgen.\n\nHinweis: Dieser Authentifizierer unterst\u00fctzt nur die Erstellung oder Aktualisierung von Benutzern auf der Grundlage der im Token bereitgestellten Informationen und unterst\u00fctzt nicht die Verwendung eines Tokens als Authentifizierung f\u00fcr einen bestehenden Benutzer, der nicht \u00fcber diesen Authentifizierer erstellt wurde.",
  "ai_answer": "https://extensions.xwiki.org/xwiki/bin/view/Extension/LLM%20Application/Authenticator/ \nhttps://extensions.xwiki.org/xwiki/bin/view/Extension/Attachment/Validation/UI/ \nhttps://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/ \nhttps://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Access%20Rights/Permission%20types/ \n\n\nJa, es ist m\u00f6glich, Benutzer mit Zugriffstoken (auch bekannt als Access Token oder JWT Token) zu authentifizieren.\n\nLaut der XWiki-Dokumentation kann ein JWT-Token verwendet werden, um Benutzer zu authentifizieren. Das Token muss bestimmte Anspr\u00fcche enthalten, wie zum Beispiel:\n\n* `exp`: Ablaufzeit, muss in der Zukunft liegen, aber nicht mehr als 24 Stunden in der Zukunft\n* `iss`: Herausgeber, entspricht der URL-Eigenschaft, die in den autorisierten Anwendungen konfiguriert ist\n* `sub`: Thema, wird verwendet, um den Benutzernamen abzuleiten\n* `aud`: Zielgruppe, muss die URL der XWiki-Installation enthalten\n\nDas Token muss auch in einem bestimmten Format vorliegen und in der `Authorization`-Kopfzeile als `Bearer`-Token \u00fcbergeben werden.\n\nEs ist jedoch wichtig zu beachten, dass die genauen Anforderungen an das Token und die Authentifizierung je nach XWiki-Konfiguration und -Version variieren k\u00f6nnen. Es ist daher ratsam, die XWiki-Dokumentation und die spezifischen Anforderungen f\u00fcr Ihre Installation zu konsultieren.",
  "sources": [
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.LLM Application.Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/LLM%20Application/Authenticator/",
      "content": "## Token Generation\n\nThis authenticator expects a JWT token that is signed with an Ed25519 key. A suitable signing key can, e.g., be generated using the [OpenSSL](https://www.openssl.org/) command line utility and the following two commands:\n\nopenssl genpkey -algorithm ed25519 -outform PEM -out private.pem  \nopenssl pkey -in private.pem -pubout -outform PEM -out public.pemThe files &quot;private.pem&quot; and &quot;public.pem&quot; then contain the private and public key in PEM format, respectively.\n\nThe JWT token needs to contain the following claims:\n\n* &quot;exp&quot;: the expiration time, must be in the future but not more than 24 hours in the future\n* &quot;iss&quot;: the issuer, corresponding to the URL property configured in the authorized applications\n* &quot;sub&quot;: the subject, used for deriving the username\n* &quot;aud&quot;: the audience, must contain the URL of the XWiki installation in the form https://www.example.com/ without path. Both a single string and an array of strings are supported. If the expected URL isn&#x27;t passed, an error is logged with the expected URL.\n\nOptional:\n\n* &quot;given\\_name&quot;: used to set the first name field of the user profile\n* &quot;family\\_name&quot;: used to set the last name field of the user profile\n* &quot;email&quot;: used to set the email field of the user profile\n* &quot;groups&quot;: a list of groups (as list of strings). Used to set the groups of the user.\n* &quot;iat&quot;: issued at, the time when the token was issued. Tokens older than 24 hours and tokens issued in the future aren&#x27;t accepted.\n* &quot;nbf&quot;: not before, the token is rejected if this time is in the future.\n\nThe token needs to be present in the &quot;Authorization&quot; header in the form &quot;Bearer TOKEN&quot; where TOKEN is the signed JWT token as described above.\n\n\n",
      "similarity_score": 0.7652343511581421,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.Attachment.Validation.UI.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/Attachment/Validation/UI/",
      "content": "#-# Define the list of blocked attachment mimetypes. By default, this list is empty, but you can specify a\u00a0  \n#-# comma-separated list of blocked mimetypes. Note that a joker (\\*) can be used to accept any media type. Once this\u00a0  \n#-# list is not empty, any attachment matching one of the listed mimetype will be rejected.  \n#-# For instance, if you want to reject plain text and any kind of images, you can set the list to:  \n#-# text/plain,image/\\*  \n#-#  \n# attachment.upload.blockList=## Administration UI\n\n[![attachment_restriction_admin.png](https://extensions.xwiki.org/xwiki/bin/download/Extension/Attachment/Validation/UI/WebHome/attachment_restriction_admin.png?width=960&amp;rev=1.1)](https://extensions.xwiki.org/xwiki/bin/download/Extension/Attachment/Validation/UI/WebHome/attachment_restriction_admin.png?rev=1.1)\n\nThe mimetype restrictions can also be configured at wiki or space level through the administration UI, by visiting the Attachments Restriction section of the administration.\n\n",
      "similarity_score": 0.7552005052566528,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "xwiki:Documentation.AdminGuide.Authentication.WebHome",
      "url": "https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/",
      "content": "## Custom Authentication\n\nYou can create your custom authentication by following [Create a Custom Authenticator](https://www.xwiki.org/xwiki/bin/view/Documentation/DevGuide/Tutorials/Create%20a%20Custom%20Authenticator/)\u00a0tutorial.\n\nNote that it&#x27;s also possible to customize the right management system, see [Security Module](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module) for more details.\n\n### Custom Authentication using a Groovy script in a wiki page\n\nStart by specifying you want to use the Groovy Authenticator:\n\nxwiki.authentication.authclass = com.xpn.xwiki.user.impl.xwiki.GroovyAuthServiceImplThen add another configuration parameter to specify in which wiki page the authenticator is:\n\nxwiki.authentication.groovy.pagename = MySpace.MyPageThen put some Groovy code in a wiki page that returns a XWikiAuthService object.\n\n# Configuration\n\n## Authentication parameters\n\nYou can set each of these parameters by setting:\n\nxwiki.authentication.&lt;param\\_name&gt;=&lt;param\\_value&gt;\n\n",
      "similarity_score": 0.754491925239563,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "xwiki:Documentation.AdminGuide.Authentication.WebHome",
      "url": "https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/",
      "content": "| protection | Yes | all, validation, encryption, none | all | Protection level for the &quot;remember me&quot; cookie functionality |\n| useip | Yes | true / false | true | Specify to use the IP address when encrypting the cookie data; if IP address changes will need to re-login. |\n\n1. Only required if protection = encryption or all (default)\n2. Only required if protection = validation or all (default)\n\n## Security\n\nStarting with XWiki 11.6RC1 we provide some authentication strategies that are triggered if a user fails several time in a row to login.  \nYou can configure those strategies and when they should be triggered in the Administration &gt; Authentication page.\n\n![authentication-security-administration.png](https://www.xwiki.org/xwiki/bin/download/Documentation/AdminGuide/Authentication/WebHome/authentication-security-administration.png?rev=1.1)\n\nFor more information see the [Authencation Security Module documentation](https://extensions.xwiki.org/xwiki/bin/view/Extension/Authentication%20Security%20Module/).\n\n# Kerberos SSO Authentication\n\nThis implementation of SSO is currently under review see: &lt;https://jira.xwiki.org/browse/XWIKI-2496&gt; . The class which is described in this segment of documentation, AppServerTrustedKerberosAuthServiceImpl, is not part of the default XWiki distribution!\n\nThe following is an example of **mod\\_auth\\_kerb** for Apache being used to easily implement XWiki authentication of users via HTTP Negotiate on a linux server. This example assumes you already have a working Apache2 HTTPD and Apache Tomcat setup with mod\\_jk.\n\nFirst of all you need to create a principal and keytab for the webserver:\n\n",
      "similarity_score": 0.7532868981361389,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "xwiki:Documentation.AdminGuide.Access Rights.Permission types.WebHome",
      "url": "https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Access%20Rights/Permission%20types/",
      "content": "| **Programming** | A programmer is allowed to execute arbitrary Java code in the wiki, so any page which was last saved by an user with programmer rights can run dangerous scripts. Because it affects the entire wiki (or wiki farm), programming rights can only be granted from the wiki preferences page in a single wiki environment or from the main wiki in a multi-wiki environment. | Deny | allow &gt;deny &gt;no setting | wiki | Main wiki level (automatically implies \u00a0LOGIN, VIEW, EDIT, DELETE, REGISTER, COMMENT, SCRIPT, ADMIN, see the documentation for the [security module](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module)) |\n| **Register** | The register right is usually granted or revoked for the non-registered pseudo-user &quot;XWiki.XWikiGuest&quot;. This permission can only be set from the wiki preferences page. | Allow | allow &gt;deny &gt;no setting | wiki | Wiki level only |\n| **Create Wikis** | The &quot;createwiki&quot; right can only be granted via the main wiki, just like programming rights | Deny | allow &gt;deny &gt;no setting | wiki | Main wiki level only |\n| **Script** | The &quot;Script&quot; right was introduced in version 7.2 in order to control who has the right to write scripts. Anyone with edit rights can write a script in a wiki page. However, when the page is rendered, the script will only execute if the last author of the page has the &quot;Script&quot; right. | Allow (Main Wiki)Deny (Sub Wiki) | deny &gt;allow &gt;no setting | wiki | For backward-compatibility reasons, the standard XWiki distribution comes with the &quot;Script&quot; right being allowed for all users at the main wiki level. So, unless an administrator explicitly revokes the right for some users or groups, they will be able to execute the scripts they wrote. |\n\n1) TBD\n\n2) \u00a0For \u201cdeny &gt; allow\u201d, any encounter of a explicit deny will deny the permission  \n\u00a0\u00a0\u00a0\u00a0For \u201callow &gt; deny\u201d, allow right will overrule any implicit or explicit deny\n\n",
      "similarity_score": 0.7528777122497559,
      "vector": null
    }
  ],
  "usage": {
    "prompt_tokens": 1932,
    "completion_tokens": 276,
    "total_tokens": 2208
  },
  "average_power_draw": null,
  "energy_consumption": null,
  "energy_per_input_token": null,
  "energy_per_output_token": null,
  "energy_per_total_token": null
}