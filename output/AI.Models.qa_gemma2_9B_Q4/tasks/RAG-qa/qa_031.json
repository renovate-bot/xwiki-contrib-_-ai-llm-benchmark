{
  "id": "qa_031",
  "prompt": "Can I authenticate users with access tokens?",
  "expected_answer": "Yes, you can authenticate users with access tokens using the Token-based authentication for the LLM Application extension.\n\nThis extension allows external applications to authenticate users with signed JSON Web Tokens (JWT). The token needs to contain specific claims, such as expiration time, issuer, subject, and audience, and must be signed with an Ed25519 key.\n\nTo use this authenticator, you need to:\n\n1. Enable the token authenticator by setting the `xwiki.authentication.authclass` property in `xwiki.properties` file to `org.xwiki.contrib.llm.authentication.JWTTokenAuth`.\n2. Configure the authorized applications by adding a new entry to the \"Authorized Applications\" list, specifying the application's title, URL, public key, and group format.\n3. Generate a JWT token that meets the required claims and signing key requirements.\n4. Include the token in the \"Authorization\" header of the request in the form \"Bearer TOKEN\".\n\nNote that this authenticator only supports creating or updating users based on the information provided in the token and does not support using a token as authentication for an existing user that hasn't been created through this authenticator.",
  "ai_answer": "https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/ \nhttps://extensions.xwiki.org/xwiki/bin/view/Extension/LLM%20Application/Authenticator/ \nhttps://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module \nhttps://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/ \n\n\nYes, you can authenticate users with access tokens using the OpenID Connect (OIDC) authenticator in XWiki. \n\nHere's how it works:\n\n* **User Authentication:**  A user authenticates with an OIDC provider (like Google, Facebook, etc.).\n\n* **Access Token Issuance:** The OIDC provider issues an access token to the user.\n\n* **XWiki Access:** The user presents the access token to XWiki.\n* **Token Validation:** XWiki validates the access token with the OIDC provider. \n* **User Login:** If the token is valid, XWiki logs in the user. \n\n\n\nLet me know if you'd like more details about configuring OIDC authentication in XWiki.",
  "sources": [
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.OpenID Connect.OpenID Connect Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/",
      "content": "#-# \\* profile: Requests that access to the end-user&#x27;s default profile claims at the UserInfo endpoint be granted by the issued access token.  \n#-# \\* email: Requests that access to the email and email\\_verified claims at the UserInfo endpoint be granted by the issued access token.  \n#-# \\* address: Requests that access to address claim at the UserInfo endpoint be granted by the issued access token.  \n#-# \\* phone: Requests that access to the {phone\\_number and phone\\_number\\_verified claims at the UserInfo endpoint be granted by the issued access token.  \n#-# \\* offline\\_access: Requests that an OAuth 2.0 refresh token be issued that can be used to obtain an access token that grants access the end-user&#x27;s UserInfo endpoint even when the user is not present (not logged in).  \n#-#\u00a0  \n#-# But depending on the provider more can be listed.  \n#-#\u00a0  \n#-# The default is:  \n# oidc.scope=openid,profile,email,address,phone  \n  \n#-# The response type to control the flow used by the OpenId Connect protocol.  \n#-# This is often used to control if the information about the user should  \n#-# be gathered from the userinfo endpoint with a request from XWiki to the provider (&quot;code&quot;, the default)  \n#-# or the id token directly provided when the provider redirects to XWiki (&quot;id\\_token&quot;)  \n#-# but it&#x27;s also possible to combine.  \n#-# See https://openid.net/specs/openid-connect-core-1\\_0.html#rfc.section.3 for mode details.  \n#-# For an hybrid flow, use list syntax (so comma or several set) instead of the white space  \n#-# documented in the specification to separate words.  \n#-#  \n#-# The default is:  \n# oidc.responseType=code  \n  \n#-# The method used to access the userinfo endpoint.  \n#-#\u00a0  \n#-# Supported values are:  \n#-# \\* GET: use GET HTTP method  \n#-# \\* POST: use POST HTTP method  \n#-#\u00a0  \n#-# The default is:  \n# oidc.endpoint.userinfo.method=GET  \n  \n#-# The pattern to use to generate the XWiki user name.  \n#-#\u00a0  \n",
      "similarity_score": 0.770585298538208,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.LLM Application.Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/LLM%20Application/Authenticator/",
      "content": "### Authorized Applications Configuration\n\nThe extension adds a new &quot;Authorized Applications&quot; entry to the &quot;Applications&quot; list (see top left of the following screenshot). It allows managing which applications are allowed to generate tokens for the use with this authenticator.\n\n![Screenshot of the main screen of the Authorized Applications application, showing the entries list with one entry](https://extensions.xwiki.org/xwiki/bin/download/Extension/LLM%20Application/Authenticator/WebHome/AuthorizedApplications.png?width=960&amp;height=375&amp;rev=1.1)\n\nBy clicking on &quot;Add new entry&quot;, you can add a new authorized application. You can configure the following properties:\n\n* Title - the title of the application, this is just for display purposes\n* URL - the URL of the application. This is the identifier of the application and must match the &quot;issuer&quot; field in the generated tokens (see below)\n* The public key - this must be an Ed25519 public key in PEM format that corresponds to the private key that is used for signing the tokens (see below)\n* Group format - the format for the groups. To avoid that external applications create users with groups like XWikiAdminGroup that would grant admin right on the wiki, it is highly recommended to configure a unique prefix and possibly also suffix, e.g., by using &quot;Example${group}Group&quot; where ${group} will be replaced by the group name that is provided in the token.\n\n![Screenshot of an authorized application entry](https://extensions.xwiki.org/xwiki/bin/download/Extension/LLM%20Application/Authenticator/WebHome/ExampleApplication.png?width=650&amp;height=435&amp;rev=1.1)\n\n",
      "similarity_score": 0.7564798593521118,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.Security Module",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module",
      "content": "\n\n\n|  |  |\n| --- | --- |\n| cog | **Controls permissions to all the wiki elements** |\n\n\n\n|  |  |\n| --- | --- |\n| Type | JAR |\n| Category |  |\n| Developed by | [XWiki Development Team](https://xwiki.org/xwiki/bin/view/XWiki/XWikiTeam) |\n| Rating | \n\n\n\n\n* \n* [1](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module &quot;Poor&quot;)\n* [2](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module &quot;Satisfactory&quot;)\n* [3](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module &quot;Good&quot;)\n* [4](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module &quot;Very good&quot;)\n* [5](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module &quot;Excellent&quot;)\n\n\n\n0\u00a0Votes\n\n\n |\n| License | GNU Lesser General Public License 2.1 |\n\n\n\n|  |  |\n| --- | --- |\n| Bundled With | XWiki Standard |\n\n**Installable with the Extension Manager**\n\n[Download v16.3.1](https://extensions.xwiki.org/xwiki/rest/repository/extensions/org.xwiki.platform%3Axwiki-platform-security-authorization-api/versions/16.3.1/file?rid=maven-xwiki)[Sources](https://github.com/xwiki/xwiki-platform/tree/master/xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authorization/xwiki-platform-security-authorization-api/)[Issues](https://jira.xwiki.org/browse/XWIKI)\n\nTable of contents\n\n",
      "similarity_score": 0.7283849716186523,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "xwiki:Documentation.AdminGuide.Authentication.WebHome",
      "url": "https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/",
      "content": "| protection | Yes | all, validation, encryption, none | all | Protection level for the &quot;remember me&quot; cookie functionality |\n| useip | Yes | true / false | true | Specify to use the IP address when encrypting the cookie data; if IP address changes will need to re-login. |\n\n1. Only required if protection = encryption or all (default)\n2. Only required if protection = validation or all (default)\n\n## Security\n\nStarting with XWiki 11.6RC1 we provide some authentication strategies that are triggered if a user fails several time in a row to login.  \nYou can configure those strategies and when they should be triggered in the Administration &gt; Authentication page.\n\n![authentication-security-administration.png](https://www.xwiki.org/xwiki/bin/download/Documentation/AdminGuide/Authentication/WebHome/authentication-security-administration.png?rev=1.1)\n\nFor more information see the [Authencation Security Module documentation](https://extensions.xwiki.org/xwiki/bin/view/Extension/Authentication%20Security%20Module/).\n\n# Kerberos SSO Authentication\n\nThis implementation of SSO is currently under review see: &lt;https://jira.xwiki.org/browse/XWIKI-2496&gt; . The class which is described in this segment of documentation, AppServerTrustedKerberosAuthServiceImpl, is not part of the default XWiki distribution!\n\nThe following is an example of **mod\\_auth\\_kerb** for Apache being used to easily implement XWiki authentication of users via HTTP Negotiate on a linux server. This example assumes you already have a working Apache2 HTTPD and Apache Tomcat setup with mod\\_jk.\n\nFirst of all you need to create a principal and keytab for the webserver:\n\n",
      "similarity_score": 0.7279491424560547,
      "vector": null
    },
    {
      "collection_id": "Eval",
      "document_id": "extensions:Extension.OpenID Connect.OpenID Connect Authenticator.WebHome",
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/",
      "content": "#-# The default is (user profiles are viewable by all users by default and it&#x27;s possible to edit one own&#x27;s profile):  \n# oidc.user.oidc.user.ownProfileRights=edit  \n  \n#-# The custom claims to request to the provider for id token.  \n#-#  \n#-# The default is:  \n# oidc.idtokenclaims=xwiki\\_instance\\_id  \n  \n#-# The name of the claim used to get the list of groups the user belong to.  \n#-# This claim also need to be listed in oidc.userinfoclaims which control if group membership synchronization is enabled or not.  \n#-#\u00a0  \n#-# It&#x27;s also possible to use a custom property from the userinfo JSON.  \n#-# For example if the provider send the following JSON for the user info:  \n#-# {  \n#-# \u00a0\u00a0&quot;sub&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: &quot;248289761001&quot;,  \n#-# \u00a0\u00a0&quot;name&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: &quot;Jane Doe&quot;,  \n#-# \u00a0\u00a0&quot;given\\_name&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: &quot;Jane&quot;,  \n#-# \u00a0\u00a0&quot;family\\_name&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: &quot;Doe&quot;,  \n#-# \u00a0\u00a0&quot;preferred\\_username&quot; : &quot;j.doe&quot;,  \n#-# \u00a0\u00a0&quot;email&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: &quot;[[email\u00a0protected]](https://extensions.xwiki.org/cdn-cgi/l/email-protection)&quot;,  \n#-# \u00a0\u00a0&quot;picture&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: &quot;http://example.com/janedoe/me.jpg&quot;  \n#-# \u00a0\u00a0&quot;customobject&quot; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0:  \n#-# \u00a0\u00a0{  \n#-# \u00a0\u00a0\u00a0\u00a0&quot;customgroups&quot; \u00a0\u00a0: \u00a0[&quot;group1&quot;, &quot;group2&quot;]  \n#-# \u00a0\u00a0}  \n#-# }  \n#-# you can use:  \n# oidc.groups.claim=customobject.customgroups  \n#-#\u00a0  \n#-# The default is:  \n# oidc.groups.claim=xwiki\\_groups  \n  \n#-# Receiving a groups list is enough to enable group synchronization but you might need to configure XWiki groups names different from the remote groups names.  \n#-# It&#x27;s also required to indicate what&#x27;s the field containing the list of groups (that&#x27;s not an OpenID Connect standard) using oidc.groups.claim property.  \n#-#\u00a0  \n# oidc.groups.mapping=MyXWikiGroup=my-oidc-group  \n# oidc.groups.mapping=MyXWikiGroup2=my-oidc-group2  \n",
      "similarity_score": 0.707425057888031,
      "vector": null
    }
  ],
  "usage": {
    "prompt_tokens": 2738,
    "completion_tokens": 154,
    "total_tokens": 2892
  },
  "average_power_draw": 225.63774782608698,
  "energy_consumption": 622.3743014815497,
  "energy_per_input_token": 0.19928732035912572,
  "energy_per_output_token": 0.4982183008978143,
  "energy_per_total_token": 0.21520549843760362
}