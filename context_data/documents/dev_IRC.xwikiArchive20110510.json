{"id": "dev:IRC.xwikiArchive20110510", "url": "https://dev.xwiki.org/xwiki/bin/view/IRC/xwikiArchive20110510", "title": "IRC Archive for channel #xwiki - XWiki", "collection": "Eval-Large", "mimetype": "text/markdown", "language": "en", "content": "\n00:06\u00a0<jvdrean>\u00a0has joined #xwiki  \n00:11\u00a0<nuvolari\\_>\u00a0has joined #xwiki  \n00:11\u00a0<nuvolari\\_\\_>\u00a0has quit  \n00:32\u00a0<sdumitriu>\u00a0has quit  \n00:42\u00a0<+abusenius>\u00a0http://tech.slashdot.org/story/11/05/09/2126258/New-Chrome-Exploit-Bypasses-Sandbox-ASLR-and-DEP  \n00:54\u00a0<jvdrean>\u00a0has quit  \n00:57\u00a0<arkub>\u00a0has quit  \n01:08\u00a0<florinciu>\u00a0has quit  \n01:34\u00a0<abusenius>\u00a0has quit  \n02:03\u00a0<SvenDowideit>\u00a0has quit  \n02:06\u00a0<SvenDowideit>\u00a0has joined #xwiki  \n02:06\u00a0<SvenDowideit>\u00a0has quit  \n02:06\u00a0<SvenDowideit>\u00a0has joined #xwiki  \n04:33\u00a0<SvenDowideit>\u00a0has quit  \n04:36\u00a0<SvenDowideit>\u00a0has joined #xwiki  \n05:21\u00a0<DrLou>\u00a0has quit  \n07:21\u00a0<vmassol>\u00a0has joined #xwiki  \n07:23\u00a0<mflorea>\u00a0has joined #xwiki  \n08:33\u00a0<arkub>\u00a0has joined #xwiki  \n08:52\u00a0<arkub>\u00a0has quit  \n09:04\u00a0<jvdrean>\u00a0has joined #xwiki  \n09:20\u00a0<tmortagne>\u00a0has joined #xwiki  \n09:39\u00a0<jvdrean>\u00a0has quit  \n09:42\u00a0<sdumitriu>\u00a0has joined #xwiki  \n09:45\u00a0<Denis2>\u00a0has joined #xwiki  \n09:46\u00a0<Denis2>\u00a0is now known as <Denis>  \n09:59\u00a0<florinciu>\u00a0has joined #xwiki  \n10:15\u00a0<jvdrean1>\u00a0has joined #xwiki  \n10:16\u00a0<sburjan>\u00a0has joined #xwiki  \n10:18\u00a0<venkatesh>\u00a0has joined #xwiki  \n10:19\u00a0<evalica>\u00a0has joined #xwiki  \n10:22\u00a0<rrodriguez>\u00a0has joined #xwiki  \n10:37\u00a0<florinciu>\u00a0has quit  \n10:49\u00a0<DrLou>\u00a0has joined #xwiki  \n10:58\u00a0<Enygma`>\u00a0has joined #xwiki  \n11:18\u00a0<SvenDowideit>\u00a0has quit  \n11:18\u00a0<SvenDowideit>\u00a0has joined #xwiki  \n11:29\u00a0<abusenius>\u00a0has joined #xwiki  \n11:56\u00a0<rrodriguez>\u00a0has quit  \n12:04\u00a0<SvenDowideit\\_>\u00a0has joined #xwiki  \n12:04\u00a0<SvenDowideit>\u00a0has quit  \n12:04\u00a0<SvenDowideit\\_>\u00a0is now known as <SvenDowideit>  \n12:52\u00a0<abusenius>\u00a0has quit  \n12:54\u00a0<pulasthi>\u00a0has joined #xwiki  \n12:54\u00a0<pulasthi>\u00a0cjdelisle hi  \n12:55\u00a0<@cjdelisle>\u00a0howdy  \n12:55\u00a0<pulasthi>\u00a0cjdelisle: i went through code a bit got stuck :/  \n12:56\u00a0<@cjdelisle>\u00a0ahh, tell me what you're stuck on there there can be two of us who are stuck  \n12:59\u00a0<pulasthi>\u00a0has left #xwiki  \n13:03\u00a0<pulasthi>\u00a0has joined #xwiki  \n13:04\u00a0<pulasthi>\u00a0cjdelisle: \u00a0\u00a0XWikiStoreInterface basestore = Utils.getComponent(XWikiStoreInterface.class, Param(\"xwiki.store.main.hint\"));  \n13:04\u00a0<pulasthi>\u00a0what does base store get assigned with here  \n13:05\u00a0<pulasthi>\u00a0i couldn't \u00a0find where componentManager gets initialized  \n13:05\u00a0<pulasthi>\u00a0:/  \n13:06\u00a0<@cjdelisle>\u00a0hahah I had exactly the same problem when I started reading the code  \n13:06\u00a0<@sdumitriu>\u00a0pulasthi: The component manager is not important here  \n13:06\u00a0<@sdumitriu>\u00a0It is created, and it does its job  \n13:06\u00a0<+tmortagne>\u00a0pulasthi: you don't need to look at componentManager itself, all you need to know is that it lookups an implementationff of XWikiStoreInterface insterface with hint taken from \"xwiki.store.main.hint\" property  \n13:07\u00a0<@cjdelisle>\u00a0I disagree with the thinking \"Don't look behind the curtin, it works and you need not know how\"  \n13:07\u00a0<+tmortagne>\u00a0as your IDE you give you implementations of XWikiStoreInterface interface  \n13:07\u00a0<pulasthi>\u00a0ya how do i find out which implementation it refers to  \n13:07\u00a0<+tmortagne>\u00a0s/as/ask/  \n13:08\u00a0<@sdumitriu>\u00a0cjdelisle: I'm not saying \"don't try to understand what it does\"  \n13:08\u00a0<@cjdelisle>\u00a0True it is not important to the storage implementation but I don't like the thought of ignoring something and assuming it will \"just work\"  \n13:08\u00a0<@sdumitriu>\u00a0I'm saying that what it does is not relevant for the question  \n13:08\u00a0<+tmortagne>\u00a0cjdelisle: it's not realy important for waht pulasthi is searching  \n13:08\u00a0<@sdumitriu>\u00a0The question is: \"what comes out of that call?\"  \n13:09\u00a0<@sdumitriu>\u00a0And looking inside the implementation won't help answering the question  \n13:09\u00a0<@sdumitriu>\u00a0Sure, it's fun to understand the component manager  \n13:09\u00a0<+tmortagne>\u00a0pulasthi: another way to get the implementation is to put a breakingpoint here and run XWiki in debug mode in your IDE  \n13:10\u00a0<+tmortagne>\u00a0that way you are sure what come from getComponent  \n13:10\u00a0<+tmortagne>\u00a0s/breakingpoint/breakpoint/  \n13:10\u00a0<pulasthi>\u00a0tmortagne: ahh thanks ill try that  \n13:10\u00a0<@sdumitriu>\u00a0But the quick answer to the problem is:  \n13:10\u00a0<@sdumitriu>\u00a0The component manager will look for a class implementing that interface, which is marked with a @Component annotation, and which has a hint equal to the value retured by Param(\"xwiki.store.main.hint\")  \n13:11\u00a0<pulasthi>\u00a0sdumitrui: thanks :)  \n13:11\u00a0<@cjdelisle>\u00a0hmm for some reason I'm getting stupid fast startup times. Good job whoever gutted most of the start code.  \n13:12\u00a0<jvelociter>\u00a0has joined #xwiki  \n13:21\u00a0<mflorea>\u00a0has quit  \n13:33\u00a0<pulasthi>\u00a0has left #xwiki  \n13:36\u00a0<pulasthi>\u00a0has joined #xwiki  \n13:41\u00a0<pulasthi>\u00a0cjdelisle : how do u do find \"which has a hint equal to the value retured by Param(\"xwiki.store.main.hint\")\" :-/  \n13:42\u00a0<pulasthi>\u00a0i cant find what Param(\"xwiki.store.main.hint\") returns  \n13:46\u00a0<@cjdelisle>\u00a0it returns the value of that entry in xwiki.cfg  \n13:47\u00a0<@cjdelisle>\u00a0which if there is no entry then it looks up the default entry which is the database attachment store.  \n13:47\u00a0<@cjdelisle>\u00a0XWikiAttachmentStore  \n13:47\u00a0<pulasthi>\u00a0ahh k thanks  \n13:48\u00a0<@cjdelisle>\u00a0and if it is set to \"file\" in the xwiki.cfg file then it returns the AttachmentStore which has @Component(\"file\")  \n13:48\u00a0<venkatesh>\u00a0has quit  \n13:48\u00a0<@cjdelisle>\u00a0and that is FilesystemAttachmentStore  \n13:49\u00a0<pulasthi>\u00a0hmm  \n13:51\u00a0<@cjdelisle>\u00a0I have a question; I just discovered that we disallow use of finalizers in our checkstyle rules. I have written a solution to XWIKI-6595 which I think it eligent. It is a safety measure against threads acquiring locks and throwing uncaught exceptions, vanishing etc. but it requires a finalizer.  \n13:52\u00a0<@sdumitriu>\u00a0cjdelisle: Finalizers are not something you can count on  \n13:52\u00a0<@sdumitriu>\u00a0This is why it's discouraged to use them  \n13:53\u00a0<@cjdelisle>\u00a0Meaning that the gc might not run or meaning that the gc might not call finalize()?  \n13:53\u00a0<@sdumitriu>\u00a0It's a false solution, same as double-check locking  \n13:54\u00a0<@cjdelisle>\u00a0How would you deal with the possibility of a thread somehow dieing and leaving a lock behins?  \n13:55\u00a0<@sdumitriu>\u00a0http://www.informit.com/articles/article.aspx?p=1216151&seqNum=7  \n13:56\u00a0<abusenius>\u00a0has joined #xwiki  \n13:57\u00a0<pulasthi>\u00a0has left #xwiki  \n13:57\u00a0<@sdumitriu>\u00a0\"As a consequence, you should never depend on a finalizer to update critical persistent state. For example, depending on a finalizer to release a persistent lock on a shared resource such as a database is a good way \u00a0\u00a0\u00a0to bring your entire distributed system to a grinding halt. \"  \n13:58\u00a0<@sdumitriu>\u00a0\"As a consequence, you should never depend on a finalizer to update critical persistent state. For example, depending on a finalizer to release a persistent lock on a shared resource such as a database is a good way \u00a0\u00a0\u00a0to bring your entire distributed system to a grinding halt.\"  \n13:59\u00a0<@cjdelisle>\u00a0I designed it as a safety measure.  \n13:59\u00a0<@sdumitriu>\u00a0Why does the thread die?  \n13:59\u00a0<@cjdelisle>\u00a0If a thread dies somehow without releasing it's locks, either A the finalizer eventually catches it and releases them or B the machine ceases up.  \n14:00\u00a0<@cjdelisle>\u00a0If you prefer we can go to each use case and make sure the lock release is in a finally clause but we only have to miss one and people will be reporting crash bugs.  \n14:01\u00a0<@cjdelisle>\u00a0I intended on doing that as well but I really don't like crash bugs  \n14:04\u00a0<@cjdelisle>\u00a0DownloadAction does not close the stream in a finally clause so I am almost absolutely sure that is the cause.  \n14:04\u00a0<@cjdelisle>\u00a0I guess I got my answer on finalizers but I know that something else is going to be a problem and we are going to have more crash bugs.  \n14:08\u00a0<venkatesh>\u00a0has joined #xwiki  \n14:21\u00a0<venkatesh>\u00a0has quit  \n14:23\u00a0<jamesxu>\u00a0has quit  \n14:26\u00a0<abusenius>\u00a0has quit  \n14:27\u00a0<mflorea>\u00a0has joined #xwiki  \n14:29\u00a0<@cjdelisle>\u00a0Thanks for arguing, a LockingInputStream which times out if not read for X amount of time is a better solution.  \n14:38\u00a0<SvenDowideit>\u00a0has quit  \n14:38\u00a0<SvenDowideit>\u00a0has joined #xwiki  \n14:44\u00a0<abusenius>\u00a0has joined #xwiki  \n15:03\u00a0<arkub>\u00a0has joined #xwiki  \n15:07\u00a0<jamesxu>\u00a0has joined #xwiki  \n15:09\u00a0<arkub>\u00a0has quit  \n15:11\u00a0<cjdelisle>\u00a0has quit  \n15:13\u00a0<jbrBridge>\u00a0has quit  \n15:15\u00a0<mflorea>\u00a0has quit  \n15:15\u00a0<mflorea>\u00a0has joined #xwiki  \n15:18\u00a0<cjdelisle>\u00a0has joined #xwiki  \n15:19\u00a0<jbrBridge>\u00a0has joined #xwiki  \n15:19\u00a0<sburjan>\u00a0has quit  \n15:21\u00a0<Enygma`>\u00a0has quit  \n15:22\u00a0<arkub>\u00a0has joined #xwiki  \n15:34\u00a0<sburjan>\u00a0has joined #xwiki  \n16:13\u00a0<abusenius>\u00a0has quit  \n16:33\u00a0<Chami>\u00a0has joined #xwiki  \n16:50\u00a0<abusenius>\u00a0has joined #xwiki  \n17:53\u00a0<sburjan>\u00a0has quit  \n17:54\u00a0<@sdumitriu>\u00a0Upgrading myxwiki to 3.1M1  \n18:16\u00a0<arkub>\u00a0has quit  \n18:28\u00a0<tmortagne>\u00a0has quit  \n18:34\u00a0<pulasthi>\u00a0has joined #xwiki  \n18:39\u00a0<jvdrean1>\u00a0has quit  \n18:43\u00a0<Chami>\u00a0has left #xwiki  \n18:56\u00a0<pulasthi>\u00a0has quit  \n18:57\u00a0<pulasthi>\u00a0has joined #xwiki  \n18:57\u00a0<@sdumitriu>\u00a0Upgrade failed  \n18:58\u00a0<@sdumitriu>\u00a0Looks like 3.1M1 doesn't work  \n18:58\u00a0<@sdumitriu>\u00a0On Tomcat  \n18:58\u00a0<@cjdelisle>\u00a0what happens?  \n18:58\u00a0<@sdumitriu>\u00a0It enters in an IO loop  \n18:59\u00a0<@sdumitriu>\u00a01% processor usage, but constant 900k/s read  \n19:00\u00a0<@sdumitriu>\u00a0Stacktrace snapshot: http://pastebin.com/vdvBg7Q2  \n19:02\u00a0<@cjdelisle>\u00a0symlink?  \n19:02\u00a0<@sdumitriu>\u00a0Yes  \n19:02\u00a0<@sdumitriu>\u00a0But it's not recursive  \n19:04\u00a0<@cjdelisle>\u00a0wild guess is there's a symlink loop somewhere in there, scan() shouldn't be malfunctioning for no reason  \n19:05\u00a0<@sdumitriu>\u00a0The stacktrace changes  \n19:05\u00a0<@sdumitriu>\u00a0Either it's not blocking, but it just takes lots of time to startup  \n19:05\u00a0<@sdumitriu>\u00a0Or it does loop at some point  \n19:05\u00a0<@sdumitriu>\u00a0I'll try without a symlink  \n19:06\u00a0<@cjdelisle>\u00a0find ./ -type l  \n19:08\u00a0<abusenius>\u00a0has quit  \n19:09\u00a0<@sdumitriu>\u00a0Same  \n19:11\u00a0<pulasthi1>\u00a0has joined #xwiki  \n19:13\u00a0<pulasthi>\u00a0has quit  \n19:15\u00a0<evalica>\u00a0has quit  \n19:15\u00a0<@sdumitriu>\u00a0Looks like the extension manager looks in all the jars each time it tries to instantiate a component  \n19:15\u00a0<@sdumitriu>\u00a0Instead of caching the scan results  \n19:15\u00a0<@sdumitriu>\u00a0vmassol: Something you know?  \n19:15\u00a0<cjdelisl1>\u00a0has joined #xwiki  \n19:15\u00a0<cjdelisle>\u00a0has quit  \n19:15\u00a0<jbrBridge>\u00a0has quit  \n19:16\u00a0<jbrBridge>\u00a0has joined #xwiki  \n19:19\u00a0<pulasthi1>\u00a0cjdelisle: hey i couldn't find a java called XWikiAttachmentStore :/  \n19:20\u00a0<@cjdelisl1>\u00a0my mistake XWikiHibernateAttachmentStore.java  \n19:26\u00a0<pulasthi1>\u00a0cjdelisl1: are you guys using a design pattern  \n19:26\u00a0<@sdumitriu>\u00a0:D  \n19:28\u00a0<pulasthi1>\u00a0:-/  \n19:28\u00a0<@cjdelisl1>\u00a0I guess you could say we are using some of them all. Name one and I could probably find a place where it's used.  \n19:29\u00a0<pulasthi>\u00a0has joined #xwiki  \n19:30\u00a0<pulasthi>\u00a0ahh :-/  \n19:31\u00a0<@cjdelisl1>\u00a013:30 <@cjdelisl1> I guess you could say we are using some of them all. Name one and I could probably find a place \u00a0where it's used.  \n19:32\u00a0<pulasthi>\u00a0got it  \n19:32\u00a0<pulasthi>\u00a0:)  \n19:32\u00a0<pulasthi1>\u00a0has quit  \n19:38\u00a0<vmassol>\u00a0sdumitriu: back, nope I don't know much about the extension manager  \n19:45\u00a0<mflorea>\u00a0has quit  \n19:47\u00a0<pulasthi1>\u00a0has joined #xwiki  \n19:50\u00a0<pulasthi>\u00a0has quit  \n20:10\u00a0<pulasthi>\u00a0has joined #xwiki  \n20:10\u00a0<pulasthi>\u00a0has left #xwiki  \n20:13\u00a0<pulasthi1>\u00a0has quit  \n21:50\u00a0<vmassol>\u00a0has quit  \n22:55\u00a0<rrodriguez>\u00a0has joined #xwiki  \n23:43\u00a0<jvelociter>\u00a0has quit  \n23:48\u00a0<abusenius>\u00a0has joined #xwiki  \n\n"}