{"id": "dev:IRC.xwikiArchive20110916", "url": "https://dev.xwiki.org/xwiki/bin/view/IRC/xwikiArchive20110916", "title": "IRC Archive for channel #xwiki - XWiki", "collection": "Eval-Large", "mimetype": "text/markdown", "language": "en", "content": "\n00:03\u00a0<jvdrean>\u00a0has joined #xwiki  \n00:18\u00a0<finbrein>\u00a0has quit  \n00:24\u00a0<lpereira>\u00a0has quit  \n01:13\u00a0<jvdrean>\u00a0has quit  \n01:18\u00a0<jvdrean>\u00a0has joined #xwiki  \n01:30\u00a0<jvdrean>\u00a0has quit  \n03:29\u00a0<pturcotte>\u00a0has joined #xwiki  \n03:51\u00a0<finbrein>\u00a0has joined #xwiki  \n04:03\u00a0<DrLou>\u00a0has quit  \n05:52\u00a0<finbrein>\u00a0has quit  \n06:03\u00a0<sdumitriu>\u00a0has quit  \n06:20\u00a0<finbrein>\u00a0has joined #xwiki  \n08:02\u00a0<mflorea>\u00a0has joined #xwiki  \n08:03\u00a0<vmassol>\u00a0has joined #xwiki  \n08:29\u00a0<vmassol>\u00a0has quit  \n08:31\u00a0<tmortagne>\u00a0has joined #xwiki  \n08:35\u00a0<finbrein>\u00a0has quit  \n08:46\u00a0<jvelociter\\_>\u00a0has joined #xwiki  \n08:50\u00a0<jvelociter>\u00a0has quit  \n08:50\u00a0<jvelociter\\_>\u00a0is now known as <jvelociter>  \n09:14\u00a0<Denis>\u00a0has joined #xwiki  \n09:27\u00a0<sburjan`>\u00a0has joined #xwiki  \n09:51\u00a0<vmassol>\u00a0has joined #xwiki  \n09:59\u00a0<jvdrean>\u00a0has joined #xwiki  \n10:13\u00a0<sburjan>\u00a0has joined #xwiki  \n10:21\u00a0<+Denis>\u00a0Hi all, this is not my lucky day today, I felt on hash collisions for XWikiDocuments in one of our production site and I do not see any workaround. Does anyone has already think about fixing (or at least improving) that issue ? Any comments ?  \n10:43\u00a0<vmassol>\u00a0sorry cannot help you Denis but yes it's been discussed in the past (but I don't recall any action/idea resulting from it)  \n10:43\u00a0<vmassol>\u00a0if you have ideas you should propose them :)  \n10:44\u00a0<+Denis>\u00a0at least improving the hash algo for small strings would help  \n10:45\u00a0<@cjdelisle>\u00a0the id is a long but only the low 4 bytes are used so it would not be too hard to change the implementation to say a truncated sha256 with 8 bytes instead of 4  \n10:46\u00a0<@cjdelisle>\u00a0it would just require a migrator  \n10:52\u00a0<+Denis>\u00a0right, but I am not sure sha is appropriate since we have to consider performance as well  \n10:56\u00a0<@cjdelisle>\u00a0I'm not quite sure what a sha256 run costs but 1 memory lookup can cost around 500 cpu cycles  \n10:57\u00a0<@cjdelisle>\u00a0synchronization is even more expensive than that  \n10:59\u00a0<jvdrean>\u00a0has quit  \n10:59\u00a0<@cjdelisle>\u00a0An app like XWiki is far weighted toward memory lookups, actually java itself is almost constantly dereferencing pointers.  \n10:59\u00a0<Enygma`>\u00a0has joined #xwiki  \n11:01\u00a0<@cjdelisle>\u00a0The reason why I suggest sha256 is because it is conjectured to be collision resistant and at the moment the partial collision found by the bitcoin swarm (which does a combined 10 or so trillion hash guesses per second) is less than 8 bytes of collision.  \n11:02\u00a0<+mflorea>\u00a0vmassol: when injecting the logger, which Logger to import? The one from org.xwiki.component.logging?  \n11:02\u00a0<+jvelociter>\u00a0mflorea: org.slf4j.Logger  \n11:02\u00a0<@cjdelisle>\u00a0The hash provided by java is not conjectured to be collision resistant since it's not a requirement for hashmaps.  \n11:02\u00a0<+mflorea>\u00a0jvelociter: I'm talking about @Inject private Logger logger;  \n11:03\u00a0<+jvelociter>\u00a0yes me too  \n11:03\u00a0<+jvelociter>\u00a0:)  \n11:03\u00a0<vmassol>\u00a0mflorea: no  \n11:03\u00a0<+mflorea>\u00a0cool, thanks  \n11:03\u00a0<vmassol>\u00a0the slf4j one  \n11:03\u00a0<+mflorea>\u00a0good, thanks  \n11:03\u00a0<vmassol>\u00a0the other should be deprecated now AFAIR  \n11:03\u00a0<vmassol>\u00a0yes it is (just checked)  \n11:03\u00a0<+mflorea>\u00a0it is, missed that  \n11:06\u00a0<+Denis>\u00a0cjdelisle: your conclusion do not fully apply to truncated sha. For sure, Java hashcode for string is really poor hashing for small diffs, in part due to the use of 31 prime which is far too small  \n11:07\u00a0<@cjdelisle>\u00a0my conclusion is that bitcoin does about 10 trillion guesses per second and about every 10 minutes they find a 54 bit sha256 collision  \n11:08\u00a0<@cjdelisle>\u00a0we need to not collide with 64 bits  \n11:10\u00a0<@cjdelisle>\u00a0so it takes about 6 quadrillian hashes to collide 54 bits and to collide 64 bits it would take 1024 times that many to collide 64 bits.  \n11:12\u00a0<@cjdelisle>\u00a0that 6 quadrillian number would be divided by the number of documents in the wiki but it is still ridiculously small and can be statisticly proven so  \n11:13\u00a0<+jvelociter>\u00a0mflorea: strange I've rebuilt my wiki today and in my app I have a lot of places where title displayed are the title of the included sheet, not the title of the document  \n11:14\u00a0<+mflorea>\u00a0yes, the sheet can overwrite the displayed title  \n11:15\u00a0<+jvelociter>\u00a0how do I prevent that ?  \n11:15\u00a0<+mflorea>\u00a0leave the title of the sheet empty  \n11:15\u00a0<+jvelociter>\u00a0and shouldn't the original behavior be preserved ?  \n11:16\u00a0<+mflorea>\u00a0ideally yes..  \n11:16\u00a0<+jvelociter>\u00a0ok  \n11:16\u00a0<+jvelociter>\u00a0also, I think there are situations where you introduced an infinite loop  \n11:16\u00a0<+mflorea>\u00a0but the sheet is meant to control the display, so the current behavior is better IMO  \n11:16\u00a0<+jvelociter>\u00a0probably when computing the title I would say  \n11:17\u00a0<+jvelociter>\u00a0I just had an java heap space when displaying a sheet  \n11:17\u00a0<+mflorea>\u00a0hmm  \n11:17\u00a0<+mflorea>\u00a0I would need the steps to reproduce  \n11:18\u00a0<+jvelociter>\u00a0though I have a custom skin  \n11:18\u00a0<+jvelociter>\u00a0maybe that's related  \n11:18\u00a0<+jvelociter>\u00a0I do things like $cdoc.getRenderedContent(\"{{include document='${sheet}' /}}\", \"xwiki/2.0\") in content view.vm  \n11:19\u00a0<+jvelociter>\u00a0(where sheet is computed according to objects present in the page)  \n11:19\u00a0<+jvelociter>\u00a0(sort of my cheap sheet management :P)  \n11:19\u00a0<+mflorea>\u00a0well, the new sheet system is designed especially for this case  \n11:20\u00a0<+jvelociter>\u00a0yep  \n11:20\u00a0<+jvelociter>\u00a0I will migrate to it in time  \n11:20\u00a0<+mflorea>\u00a0ok  \n11:20\u00a0<vmassol>\u00a0mflorea: I think we need to ensure that all backward compat are preserved  \n11:20\u00a0<+mflorea>\u00a0still, there shouldn't be any problems calling getRenderedContent  \n11:21\u00a0<+Denis>\u00a0cjdelisle: so SHA256 is overkill, why not taking something more simple, maybe SHA1  \n11:22\u00a0<+mflorea>\u00a0vmassol, jvelociter: I could use doc.getDefaultEditMode() and let the sheet overwrite the title when returned value is \"inline\".  \n11:22\u00a0<+mflorea>\u00a0would that work for you jvelociter?  \n11:23\u00a0<+mflorea>\u00a0s/let/prevent  \n11:23\u00a0<+jvelociter>\u00a0my issues right now are in view mode  \n11:23\u00a0<+jvelociter>\u00a0I removing titles in my sheets  \n11:23\u00a0<+jvelociter>\u00a0that's acceptable : they are mostly useless  \n11:23\u00a0<@cjdelisle>\u00a0Because I can prove things about sha256 based on what we know from the history of bitcoin. Sha1 is also deprecated so people shouldn't use it. thirdly, processors are really really fast, it's the rest of the computer that's slow. Math is so cheap that it's practicly free.  \n11:24\u00a0<+mflorea>\u00a0getDefaultEditMode returns \"inline\" if the sheet is applied using include macro (old way)  \n11:26\u00a0<+mflorea>\u00a0so I can prevent the sheet from overwriting the title is the sheet is applied using the include macro (old way, getDefaultEditMode return inline) and keep the new behavior if the sheets are applied using the new system (getDefaultEditMode should return 'edit')  \n11:30\u00a0<+Denis>\u00a0cjdelisle: anyway, the properties of SHA1 or MD5, or even MD2 could do it IMHO, why bother calculating 256bits if you need only 64 ?  \n11:31\u00a0<@cjdelisle>\u00a0md5 is about the same speed as sha256  \n11:31\u00a0<@cjdelisle>\u00a0sha1 is faster  \n11:32\u00a0<jvdrean>\u00a0has joined #xwiki  \n11:34\u00a0<+Denis>\u00a0yes that was my initial feeling, but I though MD5 was very similar  \n11:35\u00a0<+jvelociter>\u00a0mflorea: it means we are not supposed to use getURL('inline') any longer ?  \n11:35\u00a0<+jvelociter>\u00a0but getURL('edit') all the time ?  \n11:36\u00a0<+jvelociter>\u00a0and manage the edit mode with the sheet class ?  \n11:37\u00a0<+mflorea>\u00a0there are two cases: (1) if you know for sure that all your targeted documents use the new sheet system then use getURL('edit'). otherwise (2) use getURL(getDefaultEditMode())  \n11:38\u00a0<+jvelociter>\u00a0how do I know I am in (1) ?  \n11:38\u00a0<+mflorea>\u00a0(2) is how the edit button is implemented right now in contentmenu.vm  \n11:38\u00a0<+mflorea>\u00a0(1) means you don't have documents that include the sheet using the include macro  \n11:39\u00a0<+jvelociter>\u00a0ok  \n11:39\u00a0<@cjdelisle>\u00a0IMO it's not the place to scrimp and save, getId() is called once per database lookup and once per database store, if there's a cache hit it is not called. Collisions are a giant PITA so why not fix it really good and be able to prove statisticly how likely a collision is?  \n11:39\u00a0<+mflorea>\u00a0let's take the Blog example  \n11:39\u00a0<+mflorea>\u00a0if you have older blog posts that use the include macro then you have to use getDefaultEditMode  \n11:40\u00a0<+mflorea>\u00a0otherwise, if you start a blog now, then you can safely use getURL('edit')  \n11:40\u00a0<+mflorea>\u00a0hmm  \n11:50\u00a0<DrLou>\u00a0has joined #xwiki  \n11:51\u00a0<vmassol>\u00a0guys we need to fix the build (functional tests)  \n11:51\u00a0<vmassol>\u00a0so that we can release today  \n11:52\u00a0<+tmortagne>\u00a0platform is failing too, fixing it  \n12:09\u00a0<vmassol>\u00a0tmortagne: i think you broke commons build  \n12:10\u00a0<+tmortagne>\u00a0vmassol: checking  \n12:19\u00a0<+Denis>\u00a0cjdelisle: in your conclusion about SHA256, seems you forgot the probabilities of a collision based on the size of your hash and the number of hashed items. Even the perfect hash algo is constrained to the birthday paradox. So for a 64bits hash, the probability of a collision is more or less about 6 docs in 6 millions docs wiki anyway  \n12:21\u00a0<@cjdelisle>\u00a0hence the division by the total number of documents in the wiki. when the number of documents reaches 2^64 that number should reach 1  \n12:24\u00a0<+Denis>\u00a0not true, read http://en.wikipedia.org/wiki/Birthday\\_problem  \n12:37\u00a0<+Denis>\u00a0cjdelisle: from where did you get that MD5 digest is slower then SHA1 ?  \n12:43\u00a0<@cjdelisle>\u00a0time md5sum aReallyBugFile  \n12:44\u00a0<@cjdelisle>\u00a0actually sha512 would be faster than md5 in this application  \n12:45\u00a0<@cjdelisle>\u00a0it takes longer to load the class and do the jit compiling and the interpretation cost before it decides to jit compile than it does to do the actual hashing  \n12:45\u00a0<@cjdelisle>\u00a0and sha512 is already used for apsswords  \n12:45\u00a0<@cjdelisle>\u00a0\\*password  \n12:49\u00a0<@cjdelisle>\u00a0vmassol: do you know if velocity macros from inside of {{velocity}} wikimacros are ever flushed from the rendering engine cache?  \n12:51\u00a0<+tmortagne>\u00a0cjdelisle: if I remember well the cache of macros is cleaned at the ends of the document rendering  \n12:51\u00a0<+tmortagne>\u00a0s/macros/velocity macros/  \n12:52\u00a0<@cjdelisle>\u00a0thanks, I'll keep on looking, perhaps the rendering engine is wiped out which would explain it  \n12:53\u00a0<+tmortagne>\u00a0I'm trying to find where we do the call  \n12:55\u00a0<@cjdelisle>\u00a0I think somewhere in XWikiDocument there's a huge comment about it so I'm looking there..  \n12:55\u00a0<+tmortagne>\u00a0it supposed to call VelocityEngine#stoppedUsingMacroNamespace  \n12:55\u00a0<+tmortagne>\u00a0hmm I think it's actually callled by the template  \n12:56\u00a0<@cjdelisle>\u00a0XWikiDocument#getRenderedContent() calls it  \n12:57\u00a0<+tmortagne>\u00a0weird I can't find the call  \n12:59\u00a0<+tmortagne>\u00a0cjdelisle: in which getRenderedContent() do you find it ?  \n13:00\u00a0<+tmortagne>\u00a0maybe it moved in displayer  \n13:01\u00a0<@cjdelisle>\u00a0I see it at the bottom of both  \n13:01\u00a0<+tmortagne>\u00a0recent pull ?  \n13:01\u00a0<@cjdelisle>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Utils.getComponent(VelocityManager.class).getVelocityEngine()  \n13:01\u00a0<@cjdelisle>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.stoppedUsingMacroNamespace(documentName);  \n13:01\u00a0<@cjdelisle>\u00a0not too recent  \n13:01\u00a0<+tmortagne>\u00a0can't find it anywhere in the file using ctrl+f  \n13:02\u00a0<+tmortagne>\u00a0mflorea: di you moved it ?  \n13:02\u00a0<+tmortagne>\u00a0trying to find it in displayers  \n13:03\u00a0<+tmortagne>\u00a0found it  \n13:03\u00a0<+tmortagne>\u00a0DocumentContentDisplayer#maybeCloseNameSpace  \n13:03\u00a0<+tmortagne>\u00a0nice method name :)  \n13:05\u00a0<@cjdelisle>\u00a0hehe  \n13:17\u00a0<+mflorea>\u00a0yes, I moved that code in the displayer  \n13:59\u00a0<evalica>\u00a0has joined #xwiki  \n14:05\u00a0<vmassol>\u00a0cjdelisle: back from lunch. Re your question I don't know but it's easy to check  \n14:05\u00a0<vmassol>\u00a0http://platform.xwiki.org/xwiki/bin/view/AdminGuide/Monitoring#HVelocityCacheMonitoring  \n14:06\u00a0<@cjdelisle>\u00a0I see in stoppedUsingMacroNamespace that it drops that namespace, I'm just checking now to make sure it only uses the current namespace and the root namespace (which is how I think it works but I'm verifying)  \n14:09\u00a0<pturcotte>\u00a0has quit  \n14:11\u00a0<vmassol>\u00a0mflorea: are you planning to add a DisplayerException and throw it in the sig of \u00a0Displayer.display()?  \n14:11\u00a0<+mflorea>\u00a0yes  \n14:11\u00a0<vmassol>\u00a0ok  \n14:11\u00a0<+mflorea>\u00a0vmassol: do you know why the logger is not injected when running unit tests? It happens for a tests in old core  \n14:11\u00a0<vmassol>\u00a0no I have no clue  \n14:11\u00a0<+mflorea>\u00a0XWikiDocumentTest  \n14:11\u00a0<vmassol>\u00a0I can check though  \n14:12\u00a0<+mflorea>\u00a0it should be available by default right?  \n14:12\u00a0<vmassol>\u00a0yes  \n14:12\u00a0<+mflorea>\u00a0ok, I'll digg  \n14:13\u00a0<vmassol>\u00a0mflorea: it's done like this in ECM:  \n14:13\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Note: We handle Logger in a special manner and inject the logger corresponding to the class.  \n14:13\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ((dependency.getMappingType() != null) && Logger.class.isAssignableFrom(dependency.getMappingType())) {  \n14:13\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fieldValue = LoggerFactory.getLogger(instance.getClass());  \n14:14\u00a0<vmassol>\u00a0so if the test is using the ECM it should be injected  \n14:15\u00a0<+Denis>\u00a0cjdelisle: http://www.javamex.com/tutorials/cryptography/hash\\_functions\\_algorithms.shtml  \n14:19\u00a0<+mflorea>\u00a0vmassol: I found the problem. I discussed about this with tmortagne a few days ago. The problem is that the \"logger\" field is redefined in a derived class and the field in the base class is not set. As a result the methods from the base class fail  \n14:20\u00a0<vmassol>\u00a0you could make it protected  \n14:20\u00a0<+mflorea>\u00a0I could share the logger between the base class and the derived  \n14:20\u00a0<+mflorea>\u00a0yes  \n14:20\u00a0<+mflorea>\u00a0I'll do so  \n14:22\u00a0<vmassol>\u00a0anyone has any idea why this fails: http://ci.xwiki.org/job/xwiki-enterprise-test-webstandards/org.xwiki.enterprise$xwiki-enterprise-test-webstandards/290/testReport/org.xwiki.test.webstandards/RSSValidationTest/Validating\\_RSS\\_validity\\_for\\_\\_\\_\\_xwiki\\_\\_bin\\_\\_view\\_\\_Main\\_\\_LuceneSearch\\_xpage\\_plain\\_outputSyntax\\_plain\\_text\\_wiki\\_executed\\_as\\_guest/  \n14:22\u00a0<vmassol>\u00a0I tried to call http://localhost:8080/xwiki/bin/view/Main/LuceneSearch?xpage=plain&outputSyntax=plain&text=wiki locally and it works fine  \n14:23\u00a0<vmassol>\u00a0premature EOF is strange, it would mean that we're trying to read more than there is AFAIK  \n14:25\u00a0<+tmortagne>\u00a0that's the kind of error you get when there is a missing closing XML element genrally  \n14:25\u00a0<+tmortagne>\u00a0which makes it fail to parse it properly  \n14:25\u00a0<+tmortagne>\u00a0di you tried to validate the result ?  \n14:26\u00a0<vmassol>\u00a0the browser may have fixed the result though. I'm trying to run the tests locally now  \n14:26\u00a0<vmassol>\u00a0see if I can reproduce  \n14:27\u00a0<+tmortagne>\u00a0you should be able to get the unmodified source from the browser  \n14:49\u00a0<+tmortagne>\u00a0vmassol: I get an empty content for http://localhost:8080/xwiki/bin/view/Main/LuceneSearch?xpage=plain&outputSyntax=plain&text=wiki  \n14:49\u00a0<+tmortagne>\u00a0so no it does not seems to work fine  \n14:49\u00a0<vmassol>\u00a0ahah  \n14:49\u00a0<vmassol>\u00a0maybe my version is too old  \n14:49\u00a0<pturcotte>\u00a0has joined #xwiki  \n14:49\u00a0<+tmortagne>\u00a0so something broke the search RSS  \n14:50\u00a0<+tmortagne>\u00a0ha  \n14:50\u00a0<+tmortagne>\u00a0http://pastebin.com/03qTbGAE  \n14:51\u00a0<+tmortagne>\u00a0mflorea:  \n14:51\u00a0<+tmortagne>\u00a0java.lang.NullPointerException: null  \n14:51\u00a0<+tmortagne> at com.xpn.xwiki.internal.sheet.DefaultSheetManager.getSheets(DefaultSheetManager.java:121) ~[xwiki-platform-legacy-oldcore-3.2-20110916.114902-197.jar:na]  \n14:51\u00a0<+tmortagne>\u00a0not sure it's linked  \n14:51\u00a0<+tmortagne>\u00a0but I get this in the \u00a0log  \n14:51\u00a0<+mflorea>\u00a0yep, that's what I'm fixing now  \n14:51\u00a0<+tmortagne>\u00a0ok  \n14:51\u00a0<+mflorea>\u00a0committing in a sec  \n14:52\u00a0<+mflorea>\u00a0the default sheet manager was looking for a request param, but it can be called by lucene indexer, out of a servlet context  \n14:52\u00a0<+tmortagne>\u00a0I don't think it's linked actually  \n14:53\u00a0<+tmortagne>\u00a0(linked to the issue with RSS I mean)  \n14:53\u00a0<+mflorea>\u00a0I don't know about RSS, but lucene search is affected  \n14:53\u00a0<vmassol>\u00a0mflorea: which is exactly why we've introduced Execution Context  \n14:53\u00a0<+tmortagne>\u00a0ha  \n14:54\u00a0<vmassol>\u00a0so that components only use EC and not Container  \n14:54\u00a0<vmassol>\u00a0that's the theory  \n14:54\u00a0<+tmortagne>\u00a0so maybe it's linked then  \n14:54\u00a0<+sburjan>\u00a0Hello all. I see some commits from yesterday made by Sergiu about retiring some apps, plugins. this means that those plugins won't be included anymore in default XE ?  \n14:54\u00a0<+mflorea>\u00a0vmassol: I know, but I need a way to get the param from the EC  \n14:54\u00a0<vmassol>\u00a0mflorea: the idea is that you have a request initializer  \n14:54\u00a0<+tmortagne>\u00a0sburjan: yep  \n14:54\u00a0<vmassol>\u00a0and that req initializer puts the value in the context  \n14:54\u00a0<+tmortagne>\u00a0actually they were not included already  \n14:54\u00a0<vmassol>\u00a0request initi or EC init I don't remember  \n14:54\u00a0<+tmortagne>\u00a0but just moved them away  \n14:55\u00a0<+sburjan>\u00a0tmortagne: and how come they weren't moved to contrib-retired or some retired repo ?  \n14:55\u00a0<+sburjan>\u00a0because I only see them as deleted, not moved  \n14:55\u00a0<+mflorea>\u00a0vmassol: is there any code doing this already?  \n14:55\u00a0<+tmortagne>\u00a0they have been moved  \n14:55\u00a0<+tmortagne>\u00a0https://github.com/xwiki-contrib/  \n14:55\u00a0<vmassol>\u00a0mflorea: not sure  \n14:55\u00a0<vmassol>\u00a0but it's easy to do  \n14:56\u00a0<vmassol>\u00a0(I think)  \n14:56\u00a0<+tmortagne>\u00a0sburjan: https://github.com/xwiki-contrib/application-s5 for example  \n14:56\u00a0<+mflorea>\u00a0:)  \n14:56\u00a0<+tmortagne>\u00a0with a readme saying \"It has been retired since it hasn't been maintained for years.\"  \n14:56\u00a0<vmassol>\u00a0mflorea: I even think I created an EC before the req init runs  \n14:56\u00a0<vmassol>\u00a0so that your req initializer can be injected the context  \n14:56\u00a0<vmassol>\u00a0checking  \n14:58\u00a0<+sburjan>\u00a0tmortagne: yeah, I see them now. and before retiring them, they were excluded because of lines like these ? <exclude>com/xpn/xwiki/plugin/adwords/AdWordsPluginApi</exclude>  \n14:58\u00a0<vmassol>\u00a0mflorea: checked, yep that's correct  \n14:58\u00a0<+sburjan>\u00a0in the pom.xml from platform-core  \n14:59\u00a0<vmassol>\u00a0mflorea: indeed we don't have any component implementing RequestInitializer ATM  \n14:59\u00a0<+mflorea>\u00a0I'll be the first :)  \n14:59\u00a0<+mflorea>\u00a0to implement it  \n14:59\u00a0<vmassol>\u00a0yep  \n14:59\u00a0<+tmortagne>\u00a0sburjan: XE does not package automatically everything that is in platform it explicitly list what it will use  \n14:59\u00a0<vmassol>\u00a0the only issue you'll face  \n15:00\u00a0<+mflorea>\u00a0hmm, I get a org.xwiki.container.Request  \n15:00\u00a0<vmassol>\u00a0is that you'll need to get the original servlet req in the servlet because we don't have a way currently to get the query string  \n15:00\u00a0<vmassol>\u00a0yes  \n15:00\u00a0<vmassol>\u00a0actually  \n15:00\u00a0<+mflorea>\u00a0so I need to get the XWikiContext from the EC, get the request, get the param and put the value on the EC  \n15:00\u00a0<+sburjan>\u00a0yes, I see we have a list of modules and a list of excluded modules.  \n15:01\u00a0<vmassol>\u00a0wait  \n15:01\u00a0<pturcotte>\u00a0has quit  \n15:01\u00a0<vmassol>\u00a0i think you need to implement an ECI instead  \n15:01\u00a0<vmassol>\u00a0checking lucene thread code  \n15:02\u00a0<vmassol>\u00a0yep  \n15:02\u00a0<vmassol>\u00a0so let me recap  \n15:02\u00a0<vmassol>\u00a01) you create an ExecutionContextInitializer component  \n15:02\u00a0<+mflorea>\u00a0it doesn't matter if the RequestInitializer is not called for the lucene thread. It's the same as if the param is not on the request  \n15:03\u00a0<vmassol>\u00a0ah ok  \n15:03\u00a0<vmassol>\u00a0I was going to say that you need both  \n15:03\u00a0<+Denis>\u00a0hem, database migrator names are SvnRev + JiraIssue + 'Migrator', what should we do now ?  \n15:03\u00a0<vmassol>\u00a0one RI to extract it from the request and put in the EC  \n15:03\u00a0<vmassol>\u00a0and an ECI that checks if the param is there in the EC and do something if not  \n15:03\u00a0<+mflorea>\u00a0no, the mistake I did was to assume that there is always a request  \n15:03\u00a0<vmassol>\u00a0ok  \n15:04\u00a0<vmassol>\u00a0then a RI is good  \n15:04\u00a0<vmassol>\u00a0then all your code needs to do is check in the EC  \n15:04\u00a0<+mflorea>\u00a0yep  \n15:05\u00a0<vmassol>\u00a0hey I'm glad we've found a use case for RI ;)  \n15:05\u00a0<+mflorea>\u00a0:)  \n15:06\u00a0<vmassol>\u00a0that said (just to muddy the water a bit more) we've discussed a bit with thomas and said that maybe in the future we'll want to use observation events instead of a RI component role but that's not implementzation issue (it doesn't change the logic)  \n15:06\u00a0<vmassol>\u00a0that's if we really want to go with a strong event-bus to do about anything  \n15:06\u00a0<vmassol>\u00a0anyway that's food for thoughts for later  \n15:07\u00a0<vmassol>\u00a0(observation events == send a REQUEST\\_INIT event or a CONTEXT\\_INIT events)  \n15:07\u00a0<vmassol>\u00a0it's purely a choice of programming model  \n15:14\u00a0<+Denis>\u00a0vmassol: any idea about DB versioning and migrator, now that we have left svn behind ?  \n15:15\u00a0<vmassol>\u00a0Denis: for me they don't have to be related to a SCM value. It can just be a number that we increment  \n15:16\u00a0<+Denis>\u00a0it was before, I am just wondering what we do now ?  \n15:16\u00a0<vmassol>\u00a0each new migrator would simply increment the value by 1  \n15:16\u00a0<vmassol>\u00a0no it was differet before  \n15:16\u00a0<vmassol>\u00a0we were not incrementing by 1  \n15:16\u00a0<vmassol>\u00a0we were using the svn version  \n15:16\u00a0<vmassol>\u00a0sorry misread what you meant I think  \n15:17\u00a0<+sburjan>\u00a0tmortagne: https://github.com/xwiki/xwiki-platform/blob/master/xwiki-platform-core/pom.xml#L338 .All of there will be removed when 3.2 is out ?  \n15:17\u00a0<vmassol>\u00a0we need a quick proposal/vote on the lsit  \n15:17\u00a0<vmassol>\u00a0and then someone jsut modified the javadocs  \n15:17\u00a0<vmassol>\u00a0and it's done  \n15:17\u00a0<+Denis>\u00a0ok  \n15:17\u00a0<vmassol>\u00a0we don't need to restart a 0, we can carry on with the value of the latest migrator as our base value that we start incrementing  \n15:18\u00a0<vmassol>\u00a0otherwise we need a migrator for the migrator system ;)  \n15:18\u00a0<+tmortagne>\u00a0sburjan: that's what the comment say  \n15:18\u00a0<+Denis>\u00a0I propose to start \u00e0 30000 for XWiki 3.x. WDYT ?  \n15:18\u00a0<vmassol>\u00a0s/modified the javadoc/modifies the javadoc/  \n15:18\u00a0<+sburjan>\u00a0it's ambiguous. You could interpret it as deleting only the first line after the comment :)  \n15:19\u00a0<+sburjan>\u00a0this is why I asked  \n15:19\u00a0<vmassol>\u00a0Denis: put as part of your proposal. Personally I'm not sure we need that  \n15:19\u00a0<vmassol>\u00a0(it's too much maintenance)  \n15:19\u00a0<vmassol>\u00a0(each cycle will need to remember to upgrade it)  \n15:19\u00a0<vmassol>\u00a0(IMO there's little value in doing that)  \n15:20\u00a0<+Denis>\u00a0current version is 15428, starting there seems to mean not really clean  \n15:20\u00a0<+Denis>\u00a0s/mean/me  \n15:21\u00a0<vmassol>\u00a0it's just a number  \n15:21\u00a0<vmassol>\u00a0it's clean to me  \n15:21\u00a0<vmassol>\u00a0it means starting where were are now  \n15:21\u00a0<vmassol>\u00a0s/were are/we are/  \n15:21\u00a0<vmassol>\u00a0it's much cleaner than doing an arbitrary jump IMO  \n15:21\u00a0<+Denis>\u00a0sure, but about breaking clearly with previous usage  \n15:22\u00a0<+Denis>\u00a0we have jump until now, just proposing a jump to a round number  \n15:22\u00a0<+Denis>\u00a0before starting incrementation by one  \n15:23\u00a0<+sburjan>\u00a0tmortagne: so if all that section will be removed this means that we have got rid of all plugins ?  \n15:25\u00a0<+tmortagne>\u00a0sburjan: https://github.com/xwiki/xwiki-platform/blob/master/xwiki-platform-core/pom.xml is just a configuration saying that \"ok we remove these public classes but don't worry it's ok\", it not much to do with the plugins or if they are packaged or not  \n15:26\u00a0<+tmortagne>\u00a0i.e. don't worry about this section it's just some validation stuff  \n15:26\u00a0<+sburjan>\u00a0oh, just validation. I thought that removing these from platform they won't be included in the build. But I guess they're not in build already because they are excluded  \n15:27\u00a0<+tmortagne>\u00a0theses exclude just mean \"don't validate theses thing\", it not about excluding anything from the packaging  \n15:28\u00a0<+sburjan>\u00a0understood  \n15:39\u00a0<sdumitriu>\u00a0has joined #xwiki  \n15:41\u00a0<vmassol>\u00a0mflorea: why do you do this:  \n15:41\u00a0<vmassol>\u00a0XWikiContext xwikiContext = (XWikiContext) execution.getContext().getProperty(\"xwikicontext\");  \n15:41\u00a0<vmassol>\u00a0+ \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0String sheet = xwikiContext.getRequest().getParameter(SHEET\\_PROPERTY\\_NAME);  \n15:41\u00a0<vmassol>\u00a0you could simply use the passed Request object  \n15:42\u00a0<+mflorea>\u00a0how?  \n15:42\u00a0<vmassol>\u00a0very type and cast it  \n15:42\u00a0<vmassol>\u00a0s/very/verify/  \n15:42\u00a0<vmassol>\u00a0ServletRequest  \n15:42\u00a0<vmassol>\u00a0then  \n15:42\u00a0<+mflorea>\u00a0ah  \n15:42\u00a0<vmassol>\u00a0getOriginalRequest().getParameter(  \n15:42\u00a0<+mflorea>\u00a0cool  \n15:42\u00a0<vmassol>\u00a0it's getHttpServletRequest() not getOriginalRequest  \n15:43\u00a0<vmassol>\u00a0in the future we'll need to expose the query string IMO  \n15:43\u00a0<vmassol>\u00a0actually  \n15:43\u00a0<vmassol>\u00a0s/actually//  \n15:44\u00a0<vmassol>\u00a0I think that attributes are the same as requests values  \n15:44\u00a0<vmassol>\u00a0so we coudl easily put all request params as attributes  \n15:45\u00a0<vmassol>\u00a0and then you wouldn't need any cast  \n15:46\u00a0<vmassol>\u00a0pretty easy to do  \n15:47\u00a0<vmassol>\u00a0I can code it now if you're ok  \n15:47\u00a0<vmassol>\u00a0tmortagne: ok?  \n15:48\u00a0<+mflorea>\u00a0I'll commit the change with the cast  \n15:48\u00a0<vmassol>\u00a0ure  \n15:48\u00a0<vmassol>\u00a0sure  \n15:48\u00a0<+mflorea>\u00a0you can update it after  \n15:49\u00a0<+tmortagne>\u00a0vmassol: put them where ?  \n15:49\u00a0<vmassol>\u00a0as XWiki Request attributes  \n15:50\u00a0<+tmortagne>\u00a0you are talking about \u00a0com.xpn.xwiki.web.XWikiRequest ?  \n15:50\u00a0<vmassol>\u00a0no  \n15:50\u00a0<mflorea>\u00a0has quit  \n15:50\u00a0<jvelociter>\u00a0has quit  \n15:50\u00a0<vmassol>\u00a0org.xwiki.container.Request  \n15:50\u00a0<jvelociter>\u00a0has joined #xwiki  \n15:53\u00a0<+tmortagne>\u00a0vmassol: I don't totally understand how Request is supposed to contain, I see there is properties in it already  \n15:55\u00a0<vmassol>\u00a0yes, the idea is that Requeset.getProperty(\u2026) would return both request params and request attributes  \n15:55\u00a0<vmassol>\u00a0since they're the same thing, except that request param come from the request while request attr are set programatically  \n15:55\u00a0<vmassol>\u00a0basically I'm not sure we need to introduce the 2 concepts in our Request ATM  \n15:56\u00a0<+tmortagne>\u00a0so right now Request only provide request attributes ?  \n15:56\u00a0<vmassol>\u00a0yes  \n15:56\u00a0<+tmortagne>\u00a0and nothing else ? not even the URL ?  \n15:56\u00a0<vmassol>\u00a0URL?  \n15:56\u00a0<vmassol>\u00a0in term of api  \n15:57\u00a0<vmassol>\u00a0yes only req attributes  \n15:57\u00a0<+tmortagne>\u00a0well a representation of the resource requested  \n15:57\u00a0<+tmortagne>\u00a0ok  \n15:57\u00a0<+tmortagne>\u00a0I see \u00a0public static final String XWIKI\\_URL = \"xwikiurl\";  \n15:57\u00a0<vmassol>\u00a0yes my idea was to use our XWiki URL abstraction  \n15:57\u00a0<vmassol>\u00a0but it's not done  \n15:58\u00a0<vmassol>\u00a0depends on the xwiki url module which is not finished  \n15:58\u00a0<+tmortagne>\u00a0so this variable should actually be removed ?  \n15:58\u00a0<vmassol>\u00a0and at some point I wasn't sure  \n15:58\u00a0<vmassol>\u00a0I'm not sure anymore why it's there  \n15:58\u00a0<vmassol>\u00a0it's used in a few places  \n15:59\u00a0<+tmortagne>\u00a0if it's supposed to make possible to get the URL as a property it's very bad  \n15:59\u00a0<+tmortagne>\u00a0since it means it's impossible to have an attribute called \"xwikiurl\"  \n15:59\u00a0<+tmortagne>\u00a0also I 'm not sure wht there is a set  \n16:00\u00a0<+tmortagne>\u00a0the request should probably not be modifiable  \n16:00\u00a0<vmassol>\u00a0why not?  \n16:00\u00a0<vmassol>\u00a0it's modifibale in Http servlet request  \n16:00\u00a0<vmassol>\u00a0but we could decide we don't want that, just not sure why  \n16:01\u00a0<vmassol>\u00a0anyway I know that this request thing has a lot of stuff to improve and that are undecided  \n16:01\u00a0<vmassol>\u00a0but getting the request param is needed in several places of our code  \n16:02\u00a0<vmassol>\u00a0and IMO it seems better to offer a way to access it than forcing an if and a cast  \n16:02\u00a0<+tmortagne>\u00a0in general I'm +1 for merging attributes and url params if we are sure we can't have collisions issues  \n16:02\u00a0<vmassol>\u00a0oh there can be collissions but it's unlikely  \n16:02\u00a0<vmassol>\u00a0very unlikely  \n16:03\u00a0<vmassol>\u00a0it would mean someone woudl get a Request and add a param with the same name  \n16:03\u00a0<vmassol>\u00a0but that's his fault if he does so  \n16:03\u00a0<vmassol>\u00a0it's the same as calling setAttribute twice on a http servlet request wiht the same name  \n16:03\u00a0<vmassol>\u00a0one thing we don't supprot though and which is an issue  \n16:03\u00a0<vmassol>\u00a0is that there can be several request apram with the same name  \n16:04\u00a0<vmassol>\u00a0right now our api is pretty basic  \n16:04\u00a0<vmassol>\u00a0and only allows one name  \n16:04\u00a0<+tmortagne>\u00a0I did not say I want to be sure we don't have collisions, just want to be sure we don't have issue because of collisions ;)  \n16:05\u00a0<+tmortagne>\u00a0and this XWIKI\\_URL if it's set looks like a collision issue generator to me  \n16:15\u00a0<vmassol>\u00a0tmortagne: my idea: http://pastebin.com/rarxnU48  \n16:15\u00a0<vmassol>\u00a0so deprecate getProperty and add getProperties()  \n16:16\u00a0<+tmortagne>\u00a0ok yes I even did not tough about the fact that you can have several values for the same URL param anyway  \n16:17\u00a0<+tmortagne>\u00a0not sure about deprecate it  \n16:17\u00a0<vmassol>\u00a0the http serlvet request has both  \n16:17\u00a0<+tmortagne>\u00a0yep  \n16:17\u00a0<vmassol>\u00a0but they say not to use the first one  \n16:17\u00a0<vmassol>\u00a0:)  \n16:17\u00a0<vmassol>\u00a0IMO the second one came after  \n16:17\u00a0<+tmortagne>\u00a0they don't deprecated it  \n16:17\u00a0<vmassol>\u00a0yes but IMO it's cleaner  \n16:17\u00a0<vmassol>\u00a0than to do like them  \n16:18\u00a0<+tmortagne>\u00a0ok  \n16:18\u00a0<vmassol>\u00a0and say only to use it if you're sure there's only 1 value for the same param  \n16:18\u00a0<vmassol>\u00a0that's seems like bullshit to me  \n16:18\u00a0<vmassol>\u00a0:)  \n16:20\u00a0<+tmortagne>\u00a0sometime you don't really care if their is several since you have no idea what to do with several you just get the one the request gives you  \n16:21\u00a0<+tmortagne>\u00a0it's easier to test if the value is null or not that getting a list, testing if it's empty and then get the first element  \n16:22\u00a0<vmassol>\u00a0\"sometime you don't really care if their is several since you have no idea what to do with several \" IMO that's a bug  \n16:22\u00a0<vmassol>\u00a0I don't see any real use case with that  \n16:22\u00a0<vmassol>\u00a0since the serlvet spec says you can have several with the same name  \n16:23\u00a0<vmassol>\u00a0it woumd mean you wouldn't be implementing the spec  \n16:23\u00a0<vmassol>\u00a0and in that case I don't want to make life easy for you ;)  \n16:23\u00a0<vmassol>\u00a0(you = the one not implementing the spec)  \n16:24\u00a0<+tmortagne>\u00a0I'm not talking about the implementation  \n16:24\u00a0<+tmortagne>\u00a0i'm talking about the user of the API  \n16:25\u00a0<+tmortagne>\u00a0most of the code in xwiki is just looking at one value  \n16:28\u00a0<+tmortagne>\u00a0all I'm saying is that it's a pain to have to do in 90% of the use cases  \n16:28\u00a0<+tmortagne>\u00a0list = getProperties  \n16:28\u00a0<+tmortagne>\u00a0value = null  \n16:28\u00a0<+tmortagne>\u00a0if (!list.isEmpty())  \n16:28\u00a0<+tmortagne>\u00a0\u00a0\u00a0value= list.get(0)  \n16:28\u00a0<+tmortagne>\u00a0instead of just  \n16:28\u00a0<+tmortagne>\u00a0value = getProperty  \n16:28\u00a0<+tmortagne>\u00a0getProperties has to be here for the 10% other use cases  \n16:33\u00a0<pturcotte>\u00a0has joined #xwiki  \n16:33\u00a0<vmassol>\u00a0hmm indeed our documentation can mention that there's only 1 value for a given apram  \n16:33\u00a0<vmassol>\u00a0I agree, I'll keep it  \n16:37\u00a0<sburjan>\u00a0has quit  \n16:46\u00a0<vmassol>\u00a0wow I hadn't see that alex had added a lot of code in containers  \n16:46\u00a0<vmassol>\u00a0including copied ASL code  \n17:06\u00a0<+Enygma`>\u00a0Guys, why are we throwing a ScriptServiceNotFoundException when a service is not found instead of returning null? https://github.com/xwiki/xwiki-commons/blob/master/xwiki-commons-core/xwiki-commons-script/src/main/java/org/xwiki/script/service/ScriptServiceManager.java#L43  \n17:07\u00a0<+Enygma`>\u00a0I can't do a blame trace since the history it probably got lost in translation (svn>git; platform>commons, etc.)  \n17:07\u00a0<@sdumitriu>\u00a0Yeah, it's bad  \n17:07\u00a0<+Enygma`>\u00a0sergiu`s initial commit did not have this exception throwing  \n17:08\u00a0<+Enygma`>\u00a0this is somehow related and got fixed a while ago http://jira.xwiki.org/browse/XWIKI-5901  \n17:09\u00a0<+Enygma`>\u00a0I don`t know the relation between the extension manager stuff and the now individual script service component, but it looks like they do the same thing  \n17:09\u00a0<+Enygma`>\u00a0maybe the script service manager was extracted from the extension manager?  \n17:12\u00a0<+Denis>\u00a0cjdelisle: just noticed that XWikiDocument.getVersionHashCode already use md5 digest  \n17:14\u00a0<+tmortagne>\u00a0Enygma`: noothing to do with XWIKI-5901  \n17:15\u00a0<+tmortagne>\u00a0this issue is about the extension manager API methods which were throwing exceptions  \n17:16\u00a0<+tmortagne>\u00a0but I tousg script service throwing exception was fixed since a long time actually since we all agree it's bad  \n17:16\u00a0<+Denis>\u00a0cjdelisle: and XWikiDocument.equals has been overriden while XWikiDocument.hashCode is not, poor design :(  \n17:16\u00a0<+Enygma`>\u00a0ah, you are right, I just connected the 2 issues because it was a similar practice :)  \n17:17\u00a0<+Enygma`>\u00a0but I also know that we talked about this (script service) and remembered it to be fixed too... just that the code says otherwise  \n17:18\u00a0<+Enygma`>\u00a0so anyway, there is no intended purpose for the exception throwing and it's safely replaceable with a \"return null\".  \n17:18\u00a0<+tmortagne>\u00a0Enygma`: yes it should  \n17:19\u00a0<@sdumitriu>\u00a0The problem was when CSRF protection was introduced  \n17:19\u00a0<+Enygma`>\u00a0sdumitriu: wdym?  \n17:20\u00a0<@sdumitriu>\u00a0Well, $services.csrf.token was introduced all over the place, but the service wasn't included yet  \n17:20\u00a0<@sdumitriu>\u00a0So the wiki was working only when the CSRF module was included  \n17:21\u00a0<+Enygma`>\u00a0so we just added the CSRF module and forgot to remove the exception throwing  \n17:21\u00a0<+tmortagne>\u00a0sdumitriu: \u00a0that's why I tough it was fixed already  \n17:22\u00a0<vmassol>\u00a0sdumitriu: we need to release\u2026. what's your status wrt lucene improvements?  \n17:22\u00a0<vmassol>\u00a0(and good morning btw ;))  \n17:22\u00a0<@sdumitriu>\u00a0Good morning Vincent  \n17:23\u00a0<@sdumitriu>\u00a0Not there yet...  \n17:23\u00a0<+tmortagne>\u00a0Enygma`: I have some time, I can fix it now if you want  \n17:23\u00a0<+tmortagne>\u00a0you are working on snapshot right ?  \n17:23\u00a0<@sdumitriu>\u00a0Is Marius' code stable?  \n17:23\u00a0<+Enygma`>\u00a0tmortagne: yes, I`m on snapshot  \n17:23\u00a0<@sdumitriu>\u00a0There are lots of test failures  \n17:25\u00a0<@sdumitriu>\u00a0Strange platform failure: java.lang.ClassNotFoundException: org.quartz.Job  \n17:25\u00a0<vmassol>\u00a0sdumitriu: trying to win some time? ;)  \n17:25\u00a0<vmassol>\u00a0hehe  \n17:25\u00a0<@sdumitriu>\u00a0Yep :)  \n17:25\u00a0<vmassol>\u00a0I wouldn't call it stable yet  \n17:25\u00a0<vmassol>\u00a0all tests need to be fixed first indeed  \n17:25\u00a0<@sdumitriu>\u00a0Also, I still have to retire albatross and workstream  \n17:25\u00a0<@sdumitriu>\u00a0Almost done with them  \n17:26\u00a0<vmassol>\u00a0sdumitriu: lucene is more important...  \n17:26\u00a0<vmassol>\u00a0but the removal is probably easier  \n17:26\u00a0<vmassol>\u00a0;)  \n17:27\u00a0<vmassol>\u00a0sdumitriu: I'm worried about you committing something at last moment before release  \n17:27\u00a0<vmassol>\u00a0how much time do you need?  \n17:27\u00a0<vmassol>\u00a0would it make sense to make your commit for RC1?  \n17:27\u00a0<@sdumitriu>\u00a0No idea  \n17:27\u00a0<vmassol>\u00a0I really hate that  \n17:27\u00a0<vmassol>\u00a0but  \n17:27\u00a0<vmassol>\u00a0I don't see many options  \n17:27\u00a0<@sdumitriu>\u00a0I thought it should be ready by last Monday  \n17:28\u00a0<@sdumitriu>\u00a0Speaking of Albatross, I have a dilemma  \n17:29\u00a0<vmassol>\u00a0sdumitriu: re lucene does it mean you're hitting some blockers?  \n17:31\u00a0<vmassol>\u00a0tmortagne: fyi just commented on http://jira.xwiki.org/browse/XCOMMONS-35  \n17:35\u00a0<@sdumitriu>\u00a0Since tags have been created from their respective SVN URL (https://svn.xwiki.org/svnroot/xwiki/platform/skins/trunk/albatross@30923), and the trunk has been created from the skins trunk (https://svn.xwiki.org/svnroot/xwiki/platform/skins/trunk@30923), the tags and trunk have different history  \n17:36\u00a0<@sdumitriu>\u00a0I can leave it like that, or I can filter the commit messages to discard the git-svn-id lines so that in the end they compute to the same SHA1  \n17:36\u00a0<@sdumitriu>\u00a0But it means losing the SVN revision number  \n17:36\u00a0<@sdumitriu>\u00a0What is better? Having a comparable history or having the SVN revision number?  \n17:36\u00a0<@sdumitriu>\u00a0re lucene, yes  \n17:38\u00a0<+Enygma`>\u00a0vmassol: not finding a file, script, etc is not an exceptional case  \n17:38\u00a0<+Enygma`>\u00a0this one is a classic :)  \n17:38\u00a0<+Enygma`>\u00a0(in methods like get(A)... return A or null)  \n17:38\u00a0<+tmortagne>\u00a0sdumitriu: I would say what's important is that the history is integrated the best possible way to our current scm  \n17:39\u00a0<+tmortagne>\u00a0not sure what we could do with svn revision numbers  \n17:39\u00a0<@sdumitriu>\u00a0Ah, there's a third option :)  \n17:39\u00a0<@sdumitriu>\u00a0Filter the commit messages so that the svn url is the same  \n17:40\u00a0<@sdumitriu>\u00a0s/\\/skins\\/trunk\\/albatross/\\/skins\\/trunk\\/  \n17:40\u00a0<@sdumitriu>\u00a0This keeps both advantages  \n17:48\u00a0<+tmortagne>\u00a0vote sent  \n17:48\u00a0<Denis>\u00a0has quit  \n17:50\u00a0<tmortagne>\u00a0has quit  \n18:05\u00a0<vmassol>\u00a0has quit  \n19:21\u00a0<jvdrean>\u00a0has quit  \n19:39\u00a0<jvelociter>\u00a0has quit  \n20:03\u00a0<pturcotte>\u00a0has quit  \n20:18\u00a0<evalica>\u00a0has quit  \n20:23\u00a0<vmassol>\u00a0has joined #xwiki  \n20:25\u00a0<Enygma`>\u00a0has quit  \n20:32\u00a0<vmassol>\u00a0has quit  \n20:45\u00a0<pturcotte>\u00a0has joined #xwiki  \n23:14\u00a0<jvdrean>\u00a0has joined #xwiki  \n23:23\u00a0<vmassol>\u00a0has joined #xwiki  \n23:25\u00a0<vmassol>\u00a0has quit  \n23:54\u00a0<pturcotte>\u00a0has quit  \n\n"}