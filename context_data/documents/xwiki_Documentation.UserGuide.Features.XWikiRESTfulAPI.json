{"id": "xwiki:Documentation.UserGuide.Features.XWikiRESTfulAPI", "url": "https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI", "title": "REST API", "collection": ["Eval", "Eval-Large"], "mimetype": "text/markdown", "language": "en", "content": "\n**Contents*** [Accessing the service](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HAccessingtheservice)\n* [Dataset](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HDataset)\n* [Understanding resources and representations](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HUnderstandingresourcesandrepresentations)\n\t+ [Relations](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HRelations)\n\t+ [The \"HATEOAS\" Graph](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HThe22HATEOAS22Graph)\n* [Interacting with the XWiki RESTful API](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HInteractingwiththeXWikiRESTfulAPI)\n\t+ [Authentication](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HAuthentication)\n\t+ [Sending representations](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HSendingrepresentations)\n\t+ [Overcoming browser limitations](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HOvercomingbrowserlimitations)\n\t+ [PUT vs POST](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HPUTvsPOST)\n\t+ [Headers](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HHeaders)\n* [XWiki RESTful API Documentation](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HXWikiRESTfulAPIDocumentation)\n\t+ [Root resources](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HRootresources)\n\t+ [Space resources](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HSpaceresources)\n\t+ [Page resources](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HPageresources)\n\t+ [Tag resources](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HTagresources)\n\t+ [Comments resources](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HCommentsresources)\n\t+ [Attachments resources](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HAttachmentsresources)\n\t+ [Object resources](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HObjectresources)\n\t+ [Class resources](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HClassresources)\n\t+ [Job resources](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HJobresources)\n\t+ [Localization resources](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HLocalizationresources)\n\t+ [Icon Theme resources](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HIconThemeresources)\n\t+ [Other resources](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HOtherresources)\n* [Custom resources](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HCustomresources)\n\t+ [In Wiki Pages](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HInWikiPages)\n\t+ [In Java](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HInJava)\n* [Generate a REST URL for a resource](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HGenerateaRESTURLforaresource)\n* [Using the RESTful API](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HUsingtheRESTfulAPI)\n\t+ [Tutorial](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HTutorial)\n\t+ [Creating an XWiki Object](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HCreatinganXWikiObject)\n\t+ [Formats of files](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HFormatsoffiles)\n* [Examples](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HExamples)\n\t+ [Getting the list of users](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HGettingthelistofusers)\n\t+ [Getting the list of users using XWQL](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HGettingthelistofusersusingXWQL)\nXWiki provides fine-grain access to virtually every element through an API that is based on HTTP semantics, i.e., a RESTful API. In this page you will find all the details to take advantage of this API and the instructions to use it at its full potential.\n\n# Accessing the service\n\nBy defaut the XWiki RESTful API entrypoint is rooted at the following URI:\n\n\u00a0  \n\u00a0\u00a0http://host:port/xwiki/rest  \n\u00a0All the resource references described in the [XWiki RESTful API Documentation](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#HXWikiRESTfulAPIDocumentation) should be intended relative to this URL.\n\nFor example the /wikis resources on a server running on localhost on port 8080 can be retrieved using the following URL : http://localhost:8080/xwiki/rest/wikis\n\nIn addition to retrieving content in XML format, you can also retrieve it in JSON format by adding the parameter ?media=json in the URL. For example: http://localhost:8080/xwiki/rest/wikis?media=json\n\n# Dataset\n\nThis section contains a brief and high-level description of the XWiki data set that should serve as a basis for presenting resources and their associated operations.\n\nXWiki has **pages** organized in **spaces**. Each **page** is available in multiple **versions** (its **history**) and **translations**. Translated pages have their own **versions** and **history** which are independent. Each page might have **attachments**. Each attachment has its own **history**. Attachments are shared among all the different translations of a page (i.e., the same set of attachments is the same regardless of the page language). Pages can have one or more **objects**. Objects are instances of a **class** that contains a set of **properties**. Some objects might be directly exposed as first class entities, such as **comments** and **tags**. Objects, as attachments, are shared among all page translations.\n\n# Understanding resources and representations\n\n\"An important concept in REST is the existence of resources (sources of specific information), each of which is referenced with a global identifier (e.g., an URI in HTTP). In order to manipulate these resources, components of the network (user agents and origin servers) communicate via a standardized interface (e.g., HTTP) and exchange representations of these resources (the actual documents conveying the information).\" ([Wikipedia](http://en.wikipedia.org/wiki/Representational_State_Transfer#Central_principle))\n\nResources in XWiki are pages, attachments, objects, properties, spaces, and all the *things* we described in the previous section. XWiki has a default way of conveying the information about these resources, i.e., by providing well defined XML representations that contain all the information associated to the resource in an XML format. This format is described using an [XML Schema Definition file](https://github.com/xwiki/xwiki-platform/blob/master/xwiki-platform-core/xwiki-platform-rest/xwiki-platform-rest-model/src/main/resources/xwiki.rest.model.xsd).\n\nOf course the same resource can be represented in many different ways. This is yet to be documented.\n\nAnother important aspect of representations is that they contain useful information for linking related resources. This is a realization of the *Hypermedia As The Engine Of The Application State (HATEOAS)* principle. In XML representations this information is conveyed through the <link> tag. This tag has two important parameters: **rel** and **href**. **rel** specifies the \"semantics\" of the link, while **href** is the URI of the linked resource.\n\nFor example, in the representation of a page, we can have links to the comments, tags, attachments which are independent resources associated to the current page. These links are provided in the XML representation of a page and allow a client to navigate to related resources... Like we do every day when we click on a link in a web page.\n\n![representation](https://www.xwiki.org/xwiki/bin/download/Documentation/UserGuide/Features/XWikiRESTfulAPI/representation?height=430&rev=1.1)\n\n## Relations\n\nThe available relations that you might find in the XML resource representations are the following:\n\n\n\n| Rel | Semantics |\n| --- | --- |\n| http://www.xwiki.org/rel/wikis | The representation containing the list of virtual wikis. |\n| http://www.xwiki.org/rel/spaces | The representation containing the list of spaces in a wiki. |\n| http://www.xwiki.org/rel/pages | The representation containing the list of pages in a space. |\n| http://www.xwiki.org/rel/translation | The representation containing a translation of a page. |\n| http://www.xwiki.org/rel/page | The representation for a page. |\n| http://www.xwiki.org/rel/space | The representation for a space. |\n| http://www.xwiki.org/rel/parent | The representation for the page that is parent of the current resource. |\n| http://www.xwiki.org/rel/home | The representation for the page that is the home of the current resource. |\n| http://www.xwiki.org/rel/attachmentData | The representation of the actual attachment data. |\n| http://www.xwiki.org/rel/comments | The representation of the list of comments associated to the current resource. |\n| http://www.xwiki.org/rel/attachments | The representation of the list of attachments associated to the current resource. |\n| http://www.xwiki.org/rel/objects | The representation of the list of objects associated to the current resource. |\n| http://www.xwiki.org/rel/object | The representation for an object. |\n| http://www.xwiki.org/rel/classes | The representation of the list of classes associated to the current resource. |\n| http://www.xwiki.org/rel/history | The representation of the list of history information associated to the current resource. |\n| http://www.xwiki.org/rel/class | The representation for a class. |\n| http://www.xwiki.org/rel/property | The representation for a property. |\n| http://www.xwiki.org/rel/propertyValues | The representation for the list of property values. |\n| http://www.xwiki.org/rel/properties | The representation of the list of properties associated to the current resource. |\n| http://www.xwiki.org/rel/modifications | The representation of the list of modifications associated to the current resource. |\n| http://www.xwiki.org/rel/children | The representation of the list of children associated to the current resource. |\n| http://www.xwiki.org/rel/tags | The representation of the list of tags associated to the current resource. |\n| http://www.xwiki.org/rel/tag | The representation of a tag. |\n| http://www.xwiki.org/rel/search | The representation for a search resource. |\n| http://www.xwiki.org/rel/syntaxes | The representation for a syntax resource. |\n\nRelations are defined as URIs in order to provide a sort of namespace. Currently these URIs are not links to real web pages but, in the future, they might point to descriptions of their semantics on actual web pages (or other kinds of representations).\n\n## The \"HATEOAS\" Graph\n\nIn order to better understand the relations among resources you might have a look at this [graph](https://www.xwiki.org/xwiki/bin/download/Documentation/UserGuide/Features/XWikiRESTfulAPI/XWikiHATEOAS.pdf?rev=1.2) that pictures all the resources available in the XWiki RESTful API and the relations among them. In this graph, nodes are [URI templates](http://code.google.com/p/uri-templates/) representing classes of resources. Edges are the possible links that you might find in a representation of a given resource, and their associated relations.\n\nThis graph shows that by starting from the API entry-point a client can navigate and discover all the resources just by following the links provided in representations (and by knowing their semantics). This was exactly the way how this graph was generated.\n\n# Interacting with the XWiki RESTful API\n\nThe XWiki RESTful API is accessible through HTTP so, in principle, you can use every client that is capable of \"speaking\" HTTP in order to interact with it. Even a web browser!  \nIf you want to write more complex programs you might download an HTTP library for your favorite language (e.g., <http://hc.apache.org/>), see [this post](https://www.xwiki.org/xwiki/bin/view/Blog/Use%20the%20Apache%20HTTP%20library%20to%20interact%20with%20the%20XWiki%20RESTful%20API) by [Mohamed Boussaa](https://www.xwiki.org/xwiki/bin/view/XWiki/mouhb).\n\nJava users might take advantage of the [JAXB](http://jaxb.java.net/) framework and its [XJC binding compiler](http://jaxb.java.net/2.2.4/docs/xjc.html) in order to generate domain object models directly from the [XML Schema Definition](https://github.com/xwiki/xwiki-platform/blob/master/xwiki-platform-core/xwiki-platform-rest/xwiki-platform-rest-model/src/main/resources/xwiki.rest.model.xsd), and use them for serializing and de-serializing \u00a0XML representations.\u00a0\n\nIf you use this approach (Apache HTTP Client + JAXB) you will find yourself writing some code like this:\n\nimport javax.xml.bind.JAXBContext;  \nimport javax.xml.bind.Unmarshaller;  \n  \nimport org.apache.commons.httpclient.HttpClient;  \nimport org.apache.commons.httpclient.methods.GetMethod;  \nimport org.xwiki.rest.model.jaxb.Page;  \n  \n...  \nHttpClient httpClient = new HttpClient();  \nJAXBContext context = JAXBContext.newInstance(\"org.xwiki.rest.model.jaxb\");  \nUnmarshaller unmarshaller = context.createUnmarshaller();  \n  \nGetMethod getMethod = new GetMethod(\"http://localhost:8080/xwiki/rest/wikis/xwiki/spaces/Main/pages/WebHome\");  \ngetMethod.addRequestHeader(\"Accept\", \"application/xml\");  \nhttpClient.executeMethod(getMethod);  \n  \nPage page = (Page) unmarshaller.unmarshal(getMethod.getResponseBodyAsStream());And you will have all the information about the Main.WebHome page in the Page object, without the need of handling XML directly.\n\nBecause of the wide variety of HTTP frameworks available we don't provide a full tutorial about using them. However, in order to show you how to interact with the XWiki RESTful API, we will use [curl](http://curl.haxx.se): a standard command line HTTP client that provides an interface to all the functionalities of the HTTP protocol.\n\nBy using curl, the previous example would have been:\n\n$ curl http://localhost:8080/xwiki/rest/wikis/xwiki/spaces/Main/pages/WebHome  \n  \n<page xmlns=\"http://www.xwiki.org\">  \n <link rel=\"http://www.xwiki.org/rel/space\" href=\"http://localhost:8080/xwiki/rest/wikis/xwiki/spaces/Main\"/>  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...## Authentication\n\nThe XWiki RESTful API supports several types of authentication:\n\n* **HTTP BASIC Auth**: You provide your credentials using the Authorization HTTP header\n* **XWiki session**: If you are logged in XWiki and you use the cookies provided by the authentication mechanism, you will also be authenticated to the XWiki RESTful API. This is useful, for example, when you are interacting with the API using the XMLHttpRequest object of a browser using Javascript.\n* **Custom authentication methods:** if you have setup a custom authenticator on your wiki (such as [OIDC](https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/), or [Trusted authentication](https://extensions.xwiki.org/xwiki/bin/view/Extension/Trusted%20authentication%20framework) or even your own custom ones), additional authentication methods may be available for the RESTful API, provided by these authenticators.\n\nIf you don't provide any credentials the XWiki RESTful API will recognize you as a XWiki.Guest user.\n\nSo if you have, let's say a Main.PrivatePage, and you try to do:\u00a0\n\n$ curl -v http://localhost:8080/xwiki/rest/wikis/xwiki/spaces/Main/pages/PrivatePage  \n...  \n< HTTP/1.1 401 Unauthorized  \n...You will get an Unauthorized empty response.\n\nOn the contrary, by specifying Admin credentials you gain access to the actual page:\n\n$ curl -u Admin:admin http://localhost:8080/xwiki/rest/wikis/xwiki/spaces/Main/pages/PrivatePage  \n  \n<page xmlns=\"http://www.xwiki.org\">  \n <link rel=\"http://www.xwiki.org/rel/space\" href=\"http://localhost:8080/xwiki/rest/wikis/xwiki/spaces/Main\"/>  \n\u00a0...  \n <content>Only admin can see this</content>  \n</page>### CSRF Token\n\nXWiki 14.10.8+, 15.2+\u00a0When using a POST request with a content type of \u00a0text/plain, multipart/form-data or application/www-form-urlencoded, a form token needs to be sent in the header XWiki-Form-Token to prevent cross-site request forgery. The form token is provided in every response in the same header so a GET request to any supported endpoint can be used to obtain a form token. If the form token is missing or wrong, a response with status code 403 and \"Invalid or missing form token.\" as body of type text/plain is sent. As of XWiki 15.2, the form token will stay the same for a user until the server is restarted. As server restarts might happen at any time, API clients should handle this response code and re-try the request with the form token that is returned in the error response. When the form token is provided in a request where it isn't necessary, it won't be checked for validity so it doesn't hurt to just send the token in every request.\n\nIt cannot be excluded that in the future, the form token might depend on the user's session. Therefore, for compatibility with future versions, it might be a good idea to store and send cookies.\n\nWhen using the REST API in JavaScript code from within XWiki's UI, the form token is automatically sent in every same-origin request initiated through fetch or XMLHttpRequest. Therefore, no special steps should be needed for REST requests to the current XWiki instance.\n\n\n\n## Sending representations\n\nMany resources are modifiable, so you can send representations in order to change the state of those resources (e.g., pages).  \nAll modifiable resources accept XML representations that conform to the [XML Schema Definition](https://github.com/xwiki/xwiki-platform/blob/master/xwiki-platform-core/xwiki-platform-rest/xwiki-platform-rest-model/src/main/resources/xwiki.rest.model.xsd). However, some other representations might be accepted as well (see the following sections).\n\nResource update is usually done by using the PUT method, while resource creation is done via PUT or POST.\n\nFor example, in order to create a page you might do the following:\n\n$ curl -u Admin:admin -X PUT --data-binary \"@newpage.xml\" -H \"Content-Type: application/xml\" http://localhost:8080/xwiki/rest/wikis/xwiki/spaces/Main/pages/NewPage  \n  \n<page xmlns=\"http://www.xwiki.org\">  \n <link rel=\"http://www.xwiki.org/rel/space\" href=\"http://localhost:8080/xwiki/rest/wikis/xwiki/spaces/Main\"/>  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<version>1.1</version>  \n <majorVersion>1</majorVersion>  \n <minorVersion>1</minorVersion>  \n <created>2009-03-21+01:00</created>  \n <creator>XWiki.Admin</creator>  \n <modified>2009-03-21+01:00</modified>  \n <modifier>XWiki.Admin</modifier>  \n <content>This is a new page</content>  \n</page>Where newpage.xml is an XML file containing\n\n  \n<page xmlns=\"http://www.xwiki.org\"> \u00a0\u00a0\u00a0\u00a0  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<title>Hello world</title>  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<syntax>xwiki/2.0</syntax>  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<content>This is a new page</content>  \n</page>The page has been created and is accessible. Subsequent PUT requests to the page URI will modify its content.\n\nYou can specify a subset of the three elements title, syntax, and content in the XML when updating/creating a page.  \nFor example, if you just want to change the title, it is sufficient to specify only the title element. The current content and the syntax of the page will be left unchanged.\n\n## Overcoming browser limitations\n\nAs said before, it could be useful to send information by using browser's XmlHttpRequest objects. However, currently many browsers only support GET and POST methods, so it is impossible to send, for example, PUT requests. In order to overcome this limitation you can override the HTTP Method by specifying a method parameter in the URI query string.\u00a0\n\nIn the previous example, if you send a POST request to the http://localhost:8080/xwiki/rest/wikis/xwiki/spaces/Main/pages/NewPage?method=PUT it will be interpreted as if it were an actual PUT request.\n\nThis overriding mechanism allows the interaction with the XWiki RESTful API by using any kind of browser.\n\n## PUT vs POST\n\nIn the following sections you will see that sometimes resources are created by using PUT and sometimes by using POST. The general principle is that if the client is responsible for choosing the resource URI then PUT is used. If it's the server that bears this responsibility, then POST is used.\n\nTo be clearer, when a client wants to create a page it knows **where** that page should go, so it is able to communicate the server the target URI. PUT is used.\n\nA client, on the contrary, cannot know beforehand what will be the URI of a comment, since comment URIs contains the ID of the comment and this information is generated by the server. In this case the client will do a POST and the server, in response, will communicate the URI it generated for the newly created comment.\n\n## Headers\n\nThe response of the REST requests always contain some custom headers that might be useful:\n\n* xwiki-version: contains the representation of the version of XWiki defined in version.properties (e.g. 14.4.6)\n* xwiki-user: contains the reference of the user used to perform the request (e.g. xwiki:XWiki.JohnDoe). If the request is performed as guest, the header won't be present.\n\n# XWiki RESTful API Documentation\n\nIn this section you will find the documentation of the whole XWiki RESTful API.\n\n**application/xml** representations refers to the [XML Schema Definition](https://github.com/xwiki/xwiki-platform/blob/master/xwiki-platform-core/xwiki-platform-rest/xwiki-platform-rest-model/src/main/resources/xwiki.rest.model.xsd).\n\nResource URIs are specified using [URI templates](http://code.google.com/p/uri-templates/). Bracketed elements are formal parameters and should be instantiated to actual values in order to retrieve the associated resource.\n\n## Root resources\n\nBy defaut all the resources of the RESTful API are rooted at the following URI: http://server:port/xwiki/rest/ (depending on where your XWiki is running)\n\n### /\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (XWiki element)\n\t+ **Description:** Retrieves the entry root description containing information about the server (currently returns the XWiki product Version).\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\n### /syntaxes\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Syntaxes element)\n\t+ **Description:** The list of syntaxes supported by the XWiki instance.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\n### /wikis\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Wikis element)\n\t+ **Description:** The list of wikis available on the XWiki instance. Unless the wiki is configured to be a wiki farm, this list is usually made of a single element 'xwiki'.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\n### /wikis/query?q={query}&wikis=wikiList[&distinct={true,false}][&order={asc,desc}][&start=n][&number=n][&prettyNames={true,false}]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (SearchResults element)\n\t+ **Description:** Search resources (pages and attachments):\n\t\t- [since 6.4] using a SOLR query (handled by the [SOLR Query module](https://extensions.xwiki.org/xwiki/bin/view/Extension/Solr%20Search%20Query%20API)) on the wikis that are specified as a comma separated list in the *wikis* parameter.\n\t\t- [before 6.4] using a Lucene query (handled by the [Lucene Plugin](https://extensions.xwiki.org/xwiki/bin/view/Extension/Lucene%20Plugin)) on the wikis that are specified as a comma separated list in the *wikis* parameter.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\n### /wikis/{wikiName}\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Wiki element)\n\t+ **Description:** information about the wiki\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n* **HTTP Method:** POST\n\t+ **Accepted Media types:**\n\t\t- octet/stream (A XAR file)\n\t+ **Media types:**\n\t\t- application/xml (Wiki element)\n\t+ **Query parameters**\n\t\t- backup={true/false} - import XAR as a backup XAR\n\t\t- history={RESET/REPLACE/ADD} - history importing\n\t+ **Description:** import a XAR in a wiki.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\n### /wikis/{wikiName}/search?q={keywords}[[&scope={name,content,title,objects}...]&start=n][&number=n][&orderField=field&order={asc,desc}][distinct={true,false}][&prettyNames={true,false}]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (SearchResults element)\n\t+ **Description:** Returns the list of pages and objects that contain the {keywords} in the specified {scope}s. Multiple scopes can be specified. Search results are relative to the whole {wikiName} and are obtained via a HQL query.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\n### /wikis/{wikiName}/query?q={query}&type={hql,xwql,lucene,solr}[&distinct={true,false}]~[&order={asc,desc}][&start=n][&number=n][&prettyNames={true,false}][&className=className]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (SearchResults element)\n\t+ **Description:** Allow to execute HQL, XWQL, Lucene or SOLR queries on the given {wikiName}. The *q* parameter contains the corresponding query. See [HQL Query Examples in Velocity](https://www.xwiki.org/xwiki/bin/view/Documentation/DevGuide/Scripting/velocityHqlExamples/), [XWiki Query Language Specification](https://dev.xwiki.org/xwiki/bin/view/Design/XWiki%20Query%20Language%20Specification), [Lucene Plugin](https://extensions.xwiki.org/xwiki/bin/view/Extension/Lucene%20Plugin) and [SOLR query API](https://extensions.xwiki.org/xwiki/bin/view/Extension/Solr%20Search%20Query%20API) examples of the queries that can be specified in this parameter. If type is *hql* or *xwql* and *className* is specified, the result will also contain the data for the first object of the corresponding class.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\n### /wikimanager (This resource is only available when using the [multi-wiki](https://extensions.xwiki.org/xwiki/bin/view/Extension/Wiki%20Application) feature)\n\n* **HTTP Method:** POST\n\t+ **Accepted Media types:**\n\t\t- application/xml (Wiki element)\n\t+ **Media types:**\n\t\t- application/xml (Wiki element)\n\t+ **Query parameters**\n\t\t- template \u00a0- the wiki template to be used for initializing the wiki.\n\t\t- history={RESET/REPLACE/ADD} - history importing\n\t+ **Description:** create a new wiki.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\n## Space resources\n\n### /wikis/{wikiName}/spaces[?start=offset&number=n]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Spaces element)\n\t+ **Description:** Retrieves the list of spaces available in the {wikiName} wiki.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/search?q={keywords}[[&scope={name,content,title,objects}...]&number=n]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Search results element)\n\t+ **Description:** The list of pages and objects that contain the {keywords} in the specified {scope}s. Multiple scopes can be specified. Search results are relative to space {spaceName}\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n## Page resources\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages[?start=offset&number=n]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Pages element)\n\t+ **Description:** The list of pages in the space {spaceName}\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}[?prettyNames={true,false}&objects={true,false}&class={true,false}&attachments={true,false}&minorRevision={true,false}]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Page element)\n\t+ **Query parameters**\n\t\t- prettyNames: also return the pretty name for various document information (like the author display name, etc). Disabled by default.\n\t\t- objects: *[since 7.3M1]* also return the objects. Disabled by default.\n\t\t- class: *[since 7.3M1]* also return the class. Disabled by default.\n\t\t- attachments: *[since 7.3M1]* also return the attachments metadatas. Disabled by default.\n\t+ **Description:**\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n* **HTTP Method:** PUT\n\t+ **Accepted Media types:**\n\t\t- application/xml (Page element)\n\t\t- text/plain (Only page content)\n\t\t- application/x-www-form-urlencoded (allowed field names: title, parent, hidden *[since 7.3]*, content)\n\t+ **Media types:**\n\t\t- application/xml (Page element)\n\t+ **Query parameters**\n\t\t- minorRevision (Since 9.11.4 & 10.2RC1): Create a minor revision for the page. Disabled by default.\n\t+ **Description:** Create or updates a page.\n\t+ **Status codes:**\n\t\t- 201: If the page was created.\n\t\t- 202: If the page was updated.\n\t\t- 304: If the page was not modified.\n\t\t- 401: If the user is not authorized.\n* **HTTP Method:** DELETE\n\t+ **Media types:**\n\t\t- application/xml (Page element)\n\t+ **Description:** Delete the page.\n\t+ **Status codes:**\n\t\t- 204: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/history[?start=offset&number=n]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (History element)\n\t+ **Description:** The list of all the versions of the given page.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/history/{version}\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Page element)\n\t+ **Description:** The page at version {version}\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n#### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/translations[?start=offset&number=n]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Translations element)\n\t+ **Description:** The list of available translation for the page\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/translations/{language}[?minorRevision={true,false}]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Page element)\n\t+ **Description:** The page at in the given {language}.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n* **HTTP Method:** PUT\n\t+ **Accepted Media types:**\n\t\t- application/xml (Page element)\n\t\t- text/plain (Only page content)\n\t\t- application/x-www-form-urlencoded (allowed field names: title, parent, content)\n\t+ **Media types:**\n\t\t- application/xml (Page element)\n\t+ **Query parameters**\n\t\t- minorRevision (Since 9.11.4 & 10.2RC1): Create a minor revision for the page. Disabled by default.\n\t+ **Description:** Create or updates a page translation.\n\t+ **Status codes:**\n\t\t- 201: If the page was created.\n\t\t- 202: If the page was updated.\n\t\t- 304: If the page was not modified.\n\t\t- 401: If the user is not authorized.\n* **HTTP Method:** DELETE\n\t+ **Media types:**\n\t\t- application/xml (Page element)\n\t+ **Description:** Delete the page translation.\n\t+ **Status codes:**\n\t\t- 204: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/translations/{language}/history\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (History element)\n\t+ **Description:** The list of all the available revisions of the page in a given {language}.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/translations/{lang}/history/{version}\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Page element)\n\t+ **Description:** A page at a given {version} in a given {language}.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/children\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Pages element)\n\t+ **Description:** The list of the children of a given page.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/pages[?name=paneName&space=spaceName&author=authorName]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Pages element)\n\t+ **Description:** The list of pages in the wiki {wikiName}. Filters can be set for the name, space and/or author to include only pages that match the given filters. This resource can be used to search for pages in a wiki.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n## Tag resources\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/tags[?minorRevision={true,false}]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Tags element)\n\t+ **Description:** List page tags.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n* **HTTP Method:** PUT\n\t+ **Accepted Media types:**\n\t\t- application/xml (Tag element)\n\t\t- text/plain\n\t\t- application/x-www-form-urlencoded (allowed field names: tag)\n\t+ **Media types:**\n\t\t- application/xml (Tags element)\n\t+ **Query parameters**\n\t\t- minorRevision (Since 9.11.4 & 10.2RC1): Create a minor revision for the page. Disabled by default.\n\t+ **Description:** Add a tag to the page.\n\t+ **Status codes:**\n\t\t- 202: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/tags\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Tags element)\n\t+ **Description:** The list of all available tags\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/tags/{tag1}[,{tag2},{tag3}...][?start=offset&number=n]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Pages element)\n\t+ **Description:** The list of pages having the specified tags.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n## Comments resources\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/comments[?start=offset&number=n]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Comments element)\n\t+ **Description:** The list of comments on a given page.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n* **HTTP Method:** POST\n\t+ **Accepted Media types:**\n\t\t- application/xml (Comment element)\n\t\t- text/plain\n\t\t- application/x-www-form-urlencoded \u00a0- allowed field names: text, replyTo (object number of the replied comment, since XE 2.3)\n\t+ **Media types:**\n\t\t- application/xml (Comment element)\n\t+ **Description:** Create a comment on the given page.\n\t+ **Status codes:**\n\t\t- 201: If the comment was created. (The Location header will contain the URI where the comment has been created.)\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/comments/{commentId}\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Comment element)\n\t+ **Description:** A specific comment on a page\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/history/{version}/comments\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Comments element)\n\t+ **Description:** The list of comments at a specific page {version}.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/history/{version}/comments/{commentId}\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Comment element)\n\t+ **Description:** A comment at a specific page {version}.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n## Attachments resources\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/attachments[?start=offset&number=n]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Attachments element)\n\t+ **Description:** The list of attachments of a given page.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/attachments/{attachmentName}\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- The same of the attachment media type.\n\t+ **Description:** The attachment identified by {attachmentName} on a given page.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n* **HTTP Method:** PUT\n\t+ **Accepted media types:**\n\t\t- **/**\n\t+ **Media types:**\n\t\t- application/xml (AttachmentSummary element)\n\t+ **Description:** Create an attachment identified by {attachmentName} on a given page.\n\t+ **Status codes:**\n\t\t- 201: If the attachment was created.\n\t\t- 202: If the attachment was updated.\n\t\t- 401: If the user is not authorized.\n* **HTTP Method:** DELETE\n\t+ **Media types:**\n\t+ **Description:** Delete the attachment identified by {attachmentName} on a given page.\n\t+ **Status codes:**\n\t\t- 204: If the attachment was deleted.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/history/{version}/attachments[?start=offset&number=n]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Attachments element)\n\t+ **Description:** The list of attachments at a given page {version}.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/history/{version}/attachments/{attachmentName}\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- The same of the attachment media type.\n\t+ **Description:** The attachment identified by {attachmentName} on a given page {version}.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/attachments/{attachmentName}/history\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Attachments element)\n\t+ **Description:** The list of available version for the {attachmentName}\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/attachments/{attachmentName}/history/{version}\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- The same of the attachment media type.\n\t+ **Description:** The {attachmentName} at a given {version}\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/attachments[?name=attachmentName&page=pageName&author=authorName&types=attachmentTypeList&start=offset&number=n]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Attachments element)\n\t+ **Description:** The list of attachments of pages located in a given {spaceName}. Filters can be set for the name, page, author and/or types (comma separated list of strings) to include only attachments that match the given filters. This resource can be used to search for attachments in a space.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/attachments[?name=attachmentName&page=pageName&space=spaceName&author=authorName&types=attachmentTypeList&start=offset&number=n]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Attachments element)\n\t+ **Description:** The list of attachments in a given {wikiName}. Filters can be set for the name, page, space, author and/or type (comma separated list of strings) to include only attachments that match the given filters. This resource can be used to search for attachments in a wiki.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n## Object resources\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/objects[?start=offset&number=n]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Objects element)\n\t+ **Description:** The list of objects associated to a page.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n* **HTTP Method:** POST\n\t+ **Accepted media types:**\n\t\t- application/xml (Object element)\n\t\t- application/x-www-form-urlencoded (a set of property#name=value pairs representing properties and a field className)\n\t\t\t* e.g. className=XWiki.XWikiUsers&property#first\\_name=John&property#last\\_name=Doe\n\t+ **Media types:**\n\t\t- application/xml (Object element)\n\t+ **Description:** Create a new object.\n\t+ **Status codes:**\n\t\t- 201: If the object was created (The Location header will contain the URI associated to the newly created object).\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/objects/{className}[?start=offset&number=n]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Objects element)\n\t+ **Description:** The list of objects of a given {className} associated to a page.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/objects/{className}/{objectNumber}[?minorRevision={true,false}]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Object element)\n\t+ **Description:** The object of type {className} identified by {objectNumber} associated to the given page.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n* **HTTP Method:** PUT\n\t+ **Accepted media types:**\n\t\t- application/xml (Object element)\n\t\t- application/x-www-form-urlencoded (a set of property#name=value pairs representing properties)\n\t+ **Media types:**\n\t\t- application/xml (Object element)\n\t+ **Query parameters**\n\t\t- minorRevision (Since 9.11.4 & 10.2RC1): Create a minor revision for the page. Disabled by default.\n\t+ **Description:** Modify the object properties.\n\t+ **Status codes:**\n\t\t- 202: If the object was updated.\n\t\t- 401: If the user is not authorized.\n* **HTTP Method:** DELETE\n\t+ **Media types:**\n\t+ **Description:** Delete the object.\n\t+ **Status codes:**\n\t\t- 204: If the object was deleted.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/objects/{className}/{objectNumber}/properties\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Properties element)\n\t+ **Description:** The properties of the object of type {className} identified by {objectNumber} associated to the given page.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/objects/{className}/{objectNumber}/properties/{propertyName}[?minorRevision={true,false}]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Properties element)\n\t+ **Description:** The property {propertyname} of the object of type {className} identified by {objectNumber} associated to the given page.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n* **HTTP Method:** PUT\n\t+ **Accepted media types:**\n\t\t- application/xml (Property element)\n\t\t- text/plain\n\t\t- application/x-www-form-urlencoded (a field property#name=value pairs representing a property)\n\t+ **Media types:**\n\t\t- application/xml (Property element)\n\t+ **Query parameters**\n\t\t- minorRevision (Since 9.11.4 & 10.2RC1): Create a minor revision for the page. Disabled by default.\n\t+ **Description:** Modify the object properties.\n\t+ **Status codes:**\n\t\t- 202: If the object was updated.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/history/{version}/objects[?start=offset&number=n]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Objects element)\n\t+ **Description:** The list of objects associated to a page at a given {version}.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/history/{version}/objects/{className}/{objectNumber}\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Object element)\n\t+ **Description:** The object of type {className} identified by {objectNumber} associated to the given page at a given {version}.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/history/{version}/objects/{className}/{objectNumber}/properties\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Properties element)\n\t+ **Description:** The properties of the object of type {className} identified by {objectNumber} associated to the given page at a given {version}.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/spaces/{spaceName}[/spaces/{nestedSpaceName}]\\*/pages/{pageName}/history/{version}/objects/{className}/{objectNumber}/properties/{propertyName}\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Properties element)\n\t+ **Description:** The property {propertyName} of the object of type {className} identified by {objectNumber} associated to the given page at a given {version}.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/classes/{className}/objects[?start=offset&number=n]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Objects element)\n\t+ **Description:** The list of all the objects of a given {className}.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n## Class resources\n\n### /wikis/{wikiName}/classes[?start=offset&number=n]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Classes element)\n\t+ **Description:** The list of all the classes defined in the wiki {wikiName}\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/classes/{className}\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Class element)\n\t+ **Description:** The {className} definition\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/classes/{className}/properties\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Properties element)\n\t+ **Description:** The properties of the class {className}.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/classes/{className}/properties/{propertyName}\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Property element)\n\t+ **Description:** The property {propertyName} of the class {className}.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n### /wikis/{wikiName}/classes/{className}/properties/{propertyName}/values Since 9.8RC1\n\nRequest parameters:\n\n\n\n| Name | Description |  |\n| --- | --- | --- |\n| limit | Limit the number of values returned. Zero or a negative number means no limit. |\n| fp | Filter parameters, used to filter the returned values. You can pass multiple filter values by repeating the query string parameter. The way in which the property values are filtered depends on the property type. |\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Property element)\n\t+ **Description:** The list of values for the property {propertyName} of the class {className}. At the moment only Database List properties are supported.\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized to view the specified property.\n\t\t- 404: If the specified property doesn't exist.\n\n## Job resources\n\nA job is identified by an ID (jobId) which is a list of strings. In the REST URL, you have to represent the ID with a list of strings separated by /. (eg: refactoring/delete/11451).\n\n### /jobstatus/{jobId} Since 7.2M3\n\nRequest parameters:\n\n\n\n| Name | Required | Values | Default | Description | Version |\n| --- | --- | --- | --- | --- | --- |\n| request | no | true|false | false | Return also the job request | 9.1RC1 |\n| progress | no | true|false | true | Return also the job progress | 9.1RC1 |\n| log | no | true|false | false | Return also the job log | 9.1RC1 |\n| log\\_fromLevel | no | error|warn|info|debug|trace |  | Indicate the level from which to return logs | 9.1RC1 |\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (JobStatus element)\n\t+ **Description:** status of a job\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 404: If the job status has not been found\n\n### /joblog/{jobId} Since 7.2M3\n\nRequest parameters:\n\n\n\n| Name | Required | Values | Default | Description | Version |\n| --- | --- | --- | --- | --- | --- |\n| level | no | error|warn|info|debug|trace |  | Indicate the exact level for which to return logs | 7.2M3 |\n| fromLevel | no | error|warn|info|debug|trace |  | Indicate the level from which to return logs | 7.2M3 |\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (JobLog element)\n\t+ **Description:** log of a job\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 404: If the job status has not been found\n\n### /jobs Since 9.1RC1\n\nRequest parameters:\n\n\n\n| Name | Required | Values | Default | Description | Version |\n| --- | --- | --- | --- | --- | --- |\n| jobType | yes |  |  | The type of the job to pass to the Job Executor | 9.1RC1 |\n| async | no | true|false | true | If false, return the response only when the job is done | 9.1RC1 |\n\nThis API is designed to be a REST clone of the JobExecutor Java API (the only real difference right now being way to deal with asynchronous jobs) documented on <http://extensions.xwiki.org/xwiki/bin/view/Extension/Job+Module#HUseanexistingjob> so the concepts (job type, job request) are the same and the exact information to put in the job request depends on the job you want to run and are usually documented in the extension this job is coming from (extension module, refactoring, etc.).\u00a0\n\n* **HTTP Method:** PUT\n\t+ **Input:**\n\t\t- Media Types: application/xml or application/json\n\t\t- Input body: JobRequest element\n\t+ **Output:**\n\t\t- Media Types: application/xml or application/json\n\t\t- Response body: JobStatus element\n\t+ **Description:** Start a new job synchronously or asynchronously\n\t+ **Status codes:**\n\t\t- 200: If the job was successfully executed\n\t\t- 401: If the user is not authorized (i.e. doesn't have Programming Rights)\n\t\t- 500: Failing jobs with async=false return an error 500 (Since 9.7RC1)\n\nJobs started through the REST API automatically get their runtime context injected with the following REST HTTP request context properties:\n\n* current wiki\n* current user\n* request URL and parameters\n\nThere is JAXB objects provided to make easy to create a request for Java and other JVM based clients. For other use cases the hard part is generally generating the XML to send as content and you can either:\n\n* ask for the status of an existing job to have an hint of how the XML/JSON should look like (see [jobstatus section](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiRESTfulAPI#H2Fjobstatus2F7BjobId7D))\n* generate this XML in a script in a wiki page, you can look at the following example to help with that: <https://snippets.xwiki.org/xwiki/bin/view/Extension/Generate%20Refactoring%20Job%20REST%20request%20XML/>\n\n### Example of Extension Manager installJob\n\nUsing the [installjobrequest.xml](https://www.xwiki.org/xwiki/bin/download/Documentation/UserGuide/Features/XWikiRESTfulAPI/installjobrequest.xml?rev=1.1) file you can use a request like the following one to ask for the installation of an extension (in this example the XWiki OIDC module version 1.28):\n\ncurl -i --user \"Admin:admin\" -X PUT -H \"Content-Type: text/xml\" \"http://localhost:8080/xwiki/rest/jobs?jobType=install&async=false\" --upload-file installjobrequest.xml## Localization resources\n\nFor more details see the [Localization Module documentation](https://extensions.xwiki.org/xwiki/bin/view/Extension/Localization/).\n\nXWiki 13.3+\u00a0### /wikis/{wikiName}/localization/translations[?locale=l&prefix=p[&key=k]\\*]\n\n* **HTTP Method**: GET\n\t+ **Media Types:** application/xml or application/json\n\t+ **Description:**The list of translations of the requested keys in a given locale\n\t+ **Query Parameters:**\n\t\t- **locale:** (optional) the locale of the returned translation, if missing the locale is resolved from the context\n\t\t- **prefix:** (optional) a common prefix concatenated to all the provided keys.\n\t\t- **key:** (multiple) a list of translation keys\n\t+ **Status Code:**\n\t\t- 200: if the request was successful\n\t+ **Response:**\n\t\t- a list of translation objects, each containing the translation key (concatenated with the prefix) and the resolved raw sources (the translation values without the parameters resolved).\n\n\n## Icon Theme resources\n\nFor more details see the [Icon Theme Application](https://extensions.xwiki.org/xwiki/bin/create/Extension/Icon%20Theme%20Application/WebHome?parent=Documentation.UserGuide.Features.XWikiRESTfulAPI).\n\nXWiki 13.3+\u00a0### /wikis/{wikiName}/iconThemes/icons[?[name=n]\\*]\n\n* **HTTP Method**: GET\n\t+ **Media Types:** application/xml or application/json\n\t+ **Description:**Provides the metadata of the icons of the current icon theme in a given {wikiName} wiki\n\t+ **Query Parameters:**\n\t\t- **name:** (multiple) the name of the requested icons\n\t+ **Status Code:**\n\t\t- 200: if the request was successful\n\t+ **Response:**\n\t\t- An object with two attributes: icon is a list of the requested icons metadata, and missingIcons an array of names of requested icons that couldn't be found in the current theme.\n\n### /wikis/{wikiName}/iconThemes/{iconTheme}/icons[?[name=n]\\*]\n\n* **HTTP Method**: GET\n\t+ **Media Types:** application/xml or application/json\n\t+ **Description:**Provides the metadata of the icons of the {iconTheme} icon theme in a given {wikiName} wiki\n\t+ **Query Parameters:**\n\t\t- **name:** (multiple) the name of the requested icons\n\t+ **Status Code:**\n\t\t- 200: if the request was successful\n\t+ **Response:**\n\t\t- An object with two attributes: icon is a list of the requested icons metadata, and missingIcons an array of names of requested icons that couldn't be found in the requested theme.\n\n\n## Other resources\n\n### /wikis/{wikiName}/modifications[?start=offset&number=n&date=t]\n\n* **HTTP Method:** GET\n\t+ **Media types:**\n\t\t- application/xml (Modifications element)\n\t+ **Description:** The list of the latest modification made to the wiki {wikiName} starting from time t (t is expressed in milliseconds from 1970 of the starting date)\n\t+ **Status codes:**\n\t\t- 200: If the request was successful.\n\t\t- 401: If the user is not authorized.\n\n# Custom resources\n\n## In Wiki Pages\n\nIf you can't find an existing REST endpoint for your needs, you can create your own own by creating a wiki page and putting script in it. For example let's imagine you'd like to get a list of all pages under a given space. You could write a page, say GetChildren with the following content:\n\n{{velocity}}  \n#if (\"$!request.space\" != '')  \n \u00a0#set ($discard = $response.setContentType('text/xml'))  \n \u00a0  \n\u00a0\u00a0<pages>  \n \u00a0#set ($query = $services.query.xwql(\"select doc.fullName from Document doc where ((doc.space like :spacelike escape '!') or (doc.space = :space)) and language='' order by doc.date desc\"))  \n \u00a0#set ($spaceReferenceString = $request.space)  \n \u00a0#set ($spaceLike = $spaceReferenceString.replaceAll('([%\\_!])', '!$1').concat('.%'))  \n \u00a0#set ($query = $query.bindValue('spacelike', $spaceLike))  \n \u00a0#set ($query = $query.bindValue('space', $spaceReferenceString))  \n \u00a0#foreach ($item in $query.execute())  \n\u00a0\u00a0\u00a0\u00a0<page>$item</page>  \n \u00a0#end  \n\u00a0\u00a0</pages>  \n#end  \n{{/velocity}}The calling it for example with the following URL http://localhost:8080/xwiki/bin/get/GetChildren/?space=Sandbox&xpage=plain&outputSyntax=plain would give something like:\n\n<pages>  \n<page>Sandbox.Test.WebHome</page>  \n<page>Sandbox.TestPage2</page>  \n<page>Sandbox.ApplicationsPanelEntry</page>  \n<page>Sandbox.TestPage3</page>  \n<page>Sandbox.TestPage1</page>  \n<page>Sandbox.WebPreferences</page>  \n<page>Sandbox.WebHome</page>  \n</pages>## In Java\n\nIt's possible to easily add any REST resource by registering a org.xwiki.rest.XWikiResource java component on your wiki (see [Component guide](https://www.xwiki.org/xwiki/bin/view/Documentation/DevGuide/Tutorials/WritingComponents/) for more details).\n\npackage org.xwiki.contrib.rest;  \n  \nimport javax.ws.rs.DefaultValue;  \nimport javax.ws.rs.GET;  \nimport javax.ws.rs.Path;  \n  \nimport org.xwiki.component.annotation.Component;  \nimport org.xwiki.rest.XWikiResource;  \n  \n@Component(\"org.xwiki.contrib.rest.HelloWorldResource\")  \n@Path(\"/myresources/{myresourcename}\")  \npublic class HelloWorldResource extends XWikiResource {  \n \u00a0@GET  \n \u00a0public String get(@PathParam(\"myresourcename\") @DefaultValue(\"world\") String myresourcename)  \n \u00a0{  \n \u00a0\u00a0\u00a0return \"Hello \" + myresourcename;  \n \u00a0}  \n}The name of the component has to be the class FQN.\n\nYou can find more examples on [this page](https://github.com/xwiki/xwiki-platform/tree/master/xwiki-platform-core/xwiki-platform-rest/xwiki-platform-rest-server/src/main/java/org/xwiki/rest).\n\nThe resource is expected to follow JAX-RS 1 specifications before XWiki 16.2.0 and JAX-RS 2.1 starting with XWiki 16.2.0.\n\nStarting from release 4.3M2, the RESTful API modules have been refactored so that now resource declarations are available in a separate module.  \nThis means that all the information about resources, i.e., URI Paths, supported methods, query parameters, and so on, are available to module developers without having to include the big REST Server module.\n\nClients willing to access/use the REST API can then declare a dependency on xwiki-platform-rest-api and have all this information available for interacting with it. There are two use cases for this:\n\n* Another platform module that wants to generate responses with links to existing resources.\n* HTTP clients that wants to make requests to the RESTful API.\n\nThe xwiki-platform-rest-api module can be also seen as an authoritative reference for the REST API.\n\n# Generate a REST URL for a resource\n\nIf you need to generate a REST URL as String for a resource inside a script, you can use the REST script services:\n\n##\u00a0Return a relative URL String unless the reference wiki is different from the current wiki  \n$services.rest.url($entityReference)  \n  \n##\u00a0Force returning an external form URL String, false as second parameter would have the same effect that the previous call  \n$services.rest.url($entityReference, true)  \n  \n##\u00a0String parameter automaticallly converter to entity reference  \n$services.rest.url('MySpace.MyPage')  \n$services.rest.url('document:MySpace.MyPage')  \n$services.rest.url('space:MySpace')Where $entityReference could be:\n\n* a DocumentReference\n* a SpaceReference\n\nWe plan to add more supported entities in the future (ObjectReference, ClassReference, etc...).\n\n# Using the RESTful API\n\nThe examples below are using the --data (-d) parameter of the curl command to provide the data sent with the request, which may do some alteration on the content being actually sent (newlines, character set, etc.)  \nThere may be cases where you may need / want to use the --data-binary parameter, in order to send the data as-is, especially when manipulating page content, in which the newlines are relevant.\n\n## Tutorial\n\nSee [this tutorial](http://blog.fabio.mancinelli.me/2011/03/07/XWikis_RESTful_API.html) by Fabio Mancinelli.\n\n## Creating an XWiki Object\n\nIn this example we will use the [curl](http://curl.haxx.se/) utility as the HTTP client.\n\nImagine that you want to create on the page Test.Test a new object of the class XWiki.TestClass, supposing that the class has a property called text.\n\nSo, on the command line, you have to do the following:\n\n$ curl -u Admin:admin   \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-X POST   \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-H \"Content-type: application/xml\"   \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-H \"Accept: application/xml\"   \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-d \"@test.xml\" \u00a0  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0http://localhost/xwiki/rest/wikis/xwiki/spaces/Test/pages/Test/objectswhere test.xml is:\n\n<object xmlns=\"http://www.xwiki.org\">  \n <className>XWiki.TestClass</className>  \n <property name=\"text\">  \n \u00a0\u00a0<value>Whatever you want to put here</value>  \n </property>  \n</object>Alternatively you can use the less verbose application/x-www-form-urlencoded format:\n\n$ curl -u Admin:admin   \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-X POST   \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-H \"Content-type: application/x-www-form-urlencoded\"  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-H \"Accept: application/xml\"  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-d \"@test.txt\"   \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0http://localhost/xwiki/rest/wikis/xwiki/spaces/Test/pages/Test/objectswhere test.txt contains something like:\n\nclassName=XWiki.TestClass&property#test=Whatever+you+wantOr, better, you can use directly curl to specify these parameters  \nusing multiple -d switches:\n\n$ curl -u Admin:admin   \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-X POST -H \"Content-type: application/x-www-form-urlencoded\"  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-H \"Accept: application/xml\"  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-d \"className=XWiki.TestClass\"  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-d \"property#test=Whatever you want\"  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0http://localhost/xwiki/rest/wikis/xwiki/spaces/Test/pages/Test/objectsThe advantage of the second approach is that curl will take care of url-encode your content, while if you send a file you are responsible for this.\n\n### Remarks:\n\n* In the application/x-www-form-urlencoded format the \"property#\" is a standard immutable prefix that is used to distinguish attributes referring to property values from the attributes referring to the object. For example if we had className=XYZ&Text=FOO we would have had an ambiguity on className because we couldn't understand if className is a property of the object to be set to XYZ or an attribute that describes the object itself (i.e., its metadata like the className). By having the property# prefix this ambiguity is resolved.\n* The information you get back when you retrieve an object (i.e., all  \nthe <attribute> elements) are useful when clients need to understand the type of data contained in an object (e.g., when they want to display it). They are not necessary when creating an object because the system already has this information. That's why the XML to be sent is smaller. Actually the only information needed is the <className> and a set of <property name=\"...\"><value> elements.\n* How do you know what kind of information you can send with the XML? You can discover it by using the class description URI. If you go to http://localhost:8080/xwiki/rest/wikis/xwiki/classes\u00a0 you will get a list of all the classes defined in the Wiki. By looking at this you will understand what are the properties defined by each class, their types and attributes. In that way you will know what you're allowed to put in the <property><value> elements of the XML you send.\n\n## Formats of files\n\nA XSD schema exists for XWiki (look [here](https://github.com/xwiki/xwiki-platform/blob/master/xwiki-platform-core/xwiki-platform-rest/xwiki-platform-rest-model/src/main/resources/xwiki.rest.model.xsd) for the source).\n\nHowever, you may not know exactly how to write the XML files to use when using the PUT method. First thing to know, you may try to get examples by using GET HTTP request to the REST service using cURL or similar tools.\n\nBut in order to help you, you'll find below the different formats that you can use. \u00a0Note that the following XML files are exhaustive files but not all the elements are required.\n\n### Example of a file for a wiki\n\n  \n<wiki xmlns=\"http://www.xwiki.org\">  \n \u00a0<id>xwiki</id>  \n \u00a0<name>xwiki</name>  \n \u00a0<description>Some description of the wiki</description>  \n \u00a0<owner>Admin</owner>  \n</wiki>### Example of a file for a space\n\n  \n<space xmlns=\"http://www.xwiki.org\">  \n \u00a0<id>xwiki:Main</id>  \n \u00a0<wiki>xwiki</wiki>  \n \u00a0<name>Main</name>  \n \u00a0<home>xwiki:Main.WebHome</home>  \n \u00a0<xwikiRelativeUrl>http://localhost:8080/xwiki/bin/view/Main/</xwikiRelativeUrl>  \n \u00a0<xwikiAbsoluteUrl>http://localhost:8080/xwiki/bin/view/Main/</xwikiAbsoluteUrl>  \n</space>### Example of a file for a page\n\n  \n<page xmlns=\"http://www.xwiki.org\">  \n \u00a0<id>xwiki:Main.WebHome</id>  \n \u00a0<fullName>Main.WebHome</fullName>  \n \u00a0<wiki>xwiki</wiki>  \n \u00a0<space>Main</space>  \n \u00a0<name>WebHome</name>  \n \u00a0<title>Home</title>  \n \u00a0<parent></parent>  \n \u00a0<parentId></parentId>  \n \u00a0<version>1.1</version>  \n \u00a0<author>XWiki.Admin</author>  \n \u00a0<authorName>Administrator</authorName>  \n \u00a0<xwikiRelativeUrl>http://localhost:8080/xwiki/bin/view/Main/</xwikiRelativeUrl>  \n \u00a0<xwikiAbsoluteUrl>http://localhost:8080/xwiki/bin/view/Main/</xwikiAbsoluteUrl>  \n \u00a0<translations></translations>  \n \u00a0<syntax>xwiki/2.0</syntax>  \n \u00a0<language></language>  \n \u00a0<majorVersion>1</majorVersion>  \n \u00a0<minorVersion>1</minorVersion>  \n \u00a0<hidden>false</hidden>  \n \u00a0<created>2009-09-09T02:00:00+02:00</created>  \n \u00a0<creator>XWiki.Admin</creator>  \n \u00a0<creatorName>Administrator</creatorName>  \n \u00a0<modified>2015-10-29T11:19:02+01:00</modified>  \n \u00a0<modifier>XWiki.Admin</modifier>  \n \u00a0<modifierName>Administrator</modifierName>  \n \u00a0<comment>Imported from XAR</comment>  \n \u00a0<content>{{include reference=\"Dashboard.WebHome\" context=\"new\"/}}</content>  \n</page>### Example of a file for a tag\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>  \n<tags xmlns=\"http://www.xwiki.org\">  \n \u00a0<tag name=\"food\"></tag>  \n</tags>### Example of a file for a comment\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>  \n<comments xmlns=\"http://www.xwiki.org\">  \n \u00a0<comment>  \n \u00a0\u00a0\u00a0<id>0</id>  \n \u00a0\u00a0\u00a0<pageId>xwiki:Main.WebHome</pageId>  \n \u00a0\u00a0\u00a0<author>XWiki.Admin</author>  \n \u00a0\u00a0\u00a0<authorName>Administrator</authorName>  \n \u00a0\u00a0\u00a0<date>2015-11-13T18:20:51.936+01:00</date>  \n \u00a0\u00a0\u00a0<highlight></highlight>  \n \u00a0\u00a0\u00a0<text>This is a comment</text>  \n \u00a0\u00a0\u00a0<replyTo xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:nil=\"true\"></replyTo>  \n \u00a0</comment>  \n</comments>### Example of a file for an object\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>  \n<object xmlns=\"http://www.xwiki.org\">  \n \u00a0<id>xwiki:Main.WebHome:c170a0a8-cc17-41cd-aa1e-6f6faf1d9f28</id>  \n \u00a0<guid>c170a0a8-cc17-41cd-aa1e-6f6faf1d9f28</guid>  \n \u00a0<pageId>xwiki:Main.WebHome</pageId>  \n \u00a0<pageVersion>1.1</pageVersion>  \n \u00a0<wiki>xwiki</wiki>  \n \u00a0<space>Main</space>  \n \u00a0<pageName>WebHome</pageName>  \n \u00a0<pageAuthor>XWiki.superadmin</pageAuthor>  \n \u00a0<className>XWiki.EditModeClass</className>  \n \u00a0<number>0</number>  \n \u00a0<headline>edit</headline>  \n \u00a0<property name=\"defaultEditMode\" type=\"String\">  \n \u00a0\u00a0\u00a0<attribute name=\"name\" value=\"defaultEditMode\"></attribute>  \n \u00a0\u00a0\u00a0<attribute name=\"prettyName\" value=\"Default Edit Mode\"></attribute>  \n \u00a0\u00a0\u00a0<attribute name=\"unmodifiable\" value=\"0\"></attribute>  \n \u00a0\u00a0\u00a0<attribute name=\"disabled\" value=\"0\"></attribute>  \n \u00a0\u00a0\u00a0<attribute name=\"size\" value=\"15\"></attribute>  \n \u00a0\u00a0\u00a0<attribute name=\"number\" value=\"1\"></attribute>  \n \u00a0\u00a0\u00a0<value>edit</value>  \n \u00a0</property>  \n</object>### Example of a file for a property\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>  \n<property xmlns=\"http://www.xwiki.org\" name=\"defaultEditMode\" type=\"String\">  \n \u00a0<attribute name=\"name\" value=\"defaultEditMode\"></attribute>  \n \u00a0<attribute name=\"prettyName\" value=\"Default Edit Mode\"></attribute>  \n \u00a0<attribute name=\"unmodifiable\" value=\"0\"></attribute>  \n \u00a0<attribute name=\"disabled\" value=\"0\"></attribute>  \n \u00a0<attribute name=\"size\" value=\"15\"></attribute>  \n \u00a0<attribute name=\"number\" value=\"1\"></attribute>  \n \u00a0<value>edit</value>  \n</property># Examples\n\n## Getting the list of users\n\nSince Users are stored as Objects, you can do a search of the type XWiki.XWikiUsers. For example:\n\nhttp://<server>/xwiki/rest/wikis/query?q=object:XWiki.XWikiUsers## Getting the list of users using XWQL\n\nUsing the parameter \"className\" the result includes the data for the first object of the XWiki.XWikiUsers:\n\nhttp://<server>/xwiki/rest/wikis/xwiki/query?q=,doc.object(XWiki.XWikiUsers) as obj&type=xwql&className=XWiki.XWikiUsers\n"}