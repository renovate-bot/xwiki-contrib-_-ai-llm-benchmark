{"id": "dev:IRC.xwikiArchive20100620", "url": "https://dev.xwiki.org/xwiki/bin/view/IRC/xwikiArchive20100620", "title": "IRC Archive for channel #xwiki - XWiki", "collection": "Eval-Large", "mimetype": "text/markdown", "language": "en", "content": "\nDSpair - (01:06): Is there a way to use JavaScript inside of an XWiki page?  \nsdumitriu - (01:08): Sure, JSX: http://platform.xwiki.org/xwiki/bin/view/DevGuide/SkinExtensionsTutorial  \nDSpair - (01:09): Interesting. How about this. I'm creating a form inside of an HTML macro and I would like to assign an onClick action to a button.  \nDSpair - (01:10): How would I do that?  \nsdumitriu - (01:11): The ugly way is to just use the onclick attribute directly in your html code  \nDSpair - (01:11): So I would just put a <script> block inside of the {{HTML}} macro then.  \nsdumitriu - (01:12): Yes  \nDSpair - (01:12): OK.  \nsdumitriu - (01:12): But don't count on this solution  \nDSpair - (01:12): I was hoping for something more elegant, but oh well...  \nsdumitriu - (01:12): We'll remove the possibility to include scripts directly pretty soon  \nsdumitriu - (01:12): For security reasons  \nsdumitriu - (01:13): There is a more elegant solution  \nsdumitriu - (01:14): Write all your js code in a skin extension, and attach the listener with Event.observe : http://api.prototypejs.org/dom/event/  \nDSpair - (01:46): OK, that works...  \nDSpair - (01:46): Thanks for the help.  \nDSpair - (01:47): Next step... How do I list all objects of a given class. For example, in XWiki I created a class called \"Device\" and I added several instances of \"Device\" to the Wiki. How would I get a list of them?  \nCalebJamesDeLisl - (02:20): You can query for them with a search query.  \nCalebJamesDeLisl - (02:22): (off the top of my head) \u00a0search(\"select o.name from BaseObject o where o.className = ?\", [\"aClassName\"]);  \nCalebJamesDeLisl - (02:22): \\*xwiki.search  \nsdumitriu left at 03:26 (Ping timeout: 265 seconds  \nabusenius left at 03:42 (Quit: Konversation terminated!  \nabusenius joined #xwiki at 03:43  \nabusenius left at 03:44 (Client Quit  \nabusenius joined #xwiki at 03:44  \nabusenius left at 03:59 (Quit: Konversation terminated!  \njvelociter left at 05:01 (Quit: jvelociter  \nflorinciu joined #xwiki at 09:01  \nvmassol joined #xwiki at 10:24  \ntmortagne joined #xwiki at 10:28  \ntmortagne left #xwiki at 10:28  \nsdumitriu joined #xwiki at 10:29  \nmflorea joined #xwiki at 10:29  \nCalebJamesDeLisl - (10:29): Just found something interesting. http://208.69.32.230/ \u00a0Looks like Google but it isn't. It's sort of a phishing site run by OpenDNS. I guess they mess with the results or something.  \nvmassol - (10:53): CalebJamesDeLisl: good morning. Is this done: http://dev.xwiki.org/xwiki/bin/view/Design/ApplicationConfiguration ?  \nvmassol - (10:53): (in which case we should move it to the DesignArchive space)  \nCalebJamesDeLisl - (10:54): I only made a few small changes I think Denis is the guy to ask.  \nvmassol - (10:54): ok let's ask him when he's online  \nvmassol - (10:54): something for you:  \nvmassol - (10:54): isn't this done: http://jira.xwiki.org/jira/browse/XE-379 ?  \nvmassol - (10:54): same here: http://jira.xwiki.org/jira/browse/XE-431  \nCalebJamesDeLisl - (10:56): I guess they are. I have to get better at dealing with jira.  \nvmassol - (10:56): can I let you close them as duplicate and link them to the duplictaed issues?  \nCalebJamesDeLisl - (10:57): That sounds like a good idea.  \nvmassol - (10:58): sdumitriu: is this done: http://dev.xwiki.org/xwiki/bin/view/Design/NewSearchInterface ?  \nvmassol - (10:59): (jira says it is done so I'll move it the archive)  \nsdumitriu - (11:00): vmassol: Not completely  \nvmassol - (11:00): ah yes the sort isn't there  \nvmassol - (11:00): and content extract neither  \nvmassol - (11:00): I'll leave it there then  \nvmassol left at 12:09 (Quit: Leaving.  \nSvenDowideit joined #xwiki at 13:29  \ntmortagne joined #xwiki at 13:44  \ntmortagne left #xwiki at 13:44  \ntmortagne joined #xwiki at 13:54  \ntmortagne left #xwiki at 13:54  \nbblfish left at 14:06 (Quit: Leaving.  \njvelociter joined #xwiki at 14:09  \nabusenius joined #xwiki at 15:00  \nabusenius left at 15:57 (Ping timeout: 240 seconds  \nnickless joined #xwiki at 15:57  \nnickless is now known as abusenius ([[email\u00a0protected]](https://dev.xwiki.org/cdn-cgi/l/email-protection)  \nvmassol joined #xwiki at 17:24  \nvmassol left at 17:26 (Client Quit  \nabusenius left at 17:49 (Quit: Konversation terminated!  \nabusenius joined #xwiki at 17:49  \nmflorea left at 17:55 (Quit: Leaving.  \nlucaa left at 18:19 (Read error: Operation timed out  \nvmassol joined #xwiki at 20:45  \nabusenius left at 21:34 (Quit: Konversation terminated!  \nabusenius joined #xwiki at 21:34  \nabusenius left at 21:48 (Ping timeout: 245 seconds  \nabusenius joined #xwiki at 21:50  \nCalebJamesDeLisl - (22:09): abusenius: Re your email: why no ip address? it's so easy. Not having the ip address means the token relies on the cookies not being stolen and as Andreas said if we implement anonymous editing, it breaks.  \nCalebJamesDeLisl - (22:10): I would take the ip, and the user agent, hash it and put in a map.  \nabusenius - (22:20): if the attacker can stole your cookies, you're doomed anyway, so why bother? :)  \nabusenius - (22:20): do we bind user to ip?  \nCalebJamesDeLisl - (22:20): Well cookies are ip bound.  \nCalebJamesDeLisl - (22:20): (by default.)  \nabusenius - (22:21): ok, so you really need to make the user do the request for you  \nabusenius - (22:21): => he will do it from his IP  \nCalebJamesDeLisl - (22:21): wifi ;)  \nCalebJamesDeLisl - (22:22): But we're not talkiing about that hopeless situation.  \nabusenius - (22:22): if the attacker has the same ip because of the wifi, then what does it change? :)  \nabusenius - (22:22): I mean, import cookies, open the save page in browser and have some fun :)  \nCalebJamesDeLisl - (22:23): sniff cookies, mitm, cookie monster, etc.  \nabusenius - (22:23): but you say cookies are ip bound  \nabusenius - (22:23): to edit something you'll need cookies \\*and\\* token  \nCalebJamesDeLisl - (22:24): I like ip binding the tokens because it insulates them from the cookies. Otherwise security of one relies on security of the other.  \nCalebJamesDeLisl - (22:24): (makes auditing easier)  \nabusenius - (22:24): well, if it is easy to get IP from a component I can add it, it will not hurt  \nCalebJamesDeLisl - (22:25): Do you have the request?  \nCalebJamesDeLisl - (22:25): (HttpServletRequest)  \nabusenius - (22:25): yes afaik, ok, then its easy  \nabusenius - (22:26): is there a configuration to disable ip binding for cookies?  \nCalebJamesDeLisl - (22:26): Yes but changing it is bad.  \nCalebJamesDeLisl - (22:27): IMO the token should be ip bound and if the user doesn't want to ip bind the cookies they can disable the token entirly.  \nCalebJamesDeLisl - (22:27): (Actually not so sure on that position...)  \nvmassol left at 22:27 (Quit: Leaving.  \nCalebJamesDeLisl - (22:28): What security does the token offer if there is no ip binding? Cookie binding right?  \nCalebJamesDeLisl - (22:29): What we need to ask is: Is it a measurable security improvement to add token without ip binding token or cookies?  \nabusenius - (22:30): as long as you dont have the token, it is definitely better  \nabusenius - (22:30): the \"normal\" way to use this attack is to make the user do the request for you, so ip binding does not matter at all  \nCalebJamesDeLisl - (22:31): How did you end up implementing the tokens?  \nabusenius - (22:31): it only starts to matter if you steal the cookie without ip binding  \nabusenius - (22:31): then with ip bound tokens you'll only be able to view  \nabusenius - (22:31): wdym?  \nCalebJamesDeLisl - (22:32): When I suggested pushing via http redirect and then getting back via referrer, I wasn't thinking one cookie per user.  \nCalebJamesDeLisl - (22:32): s/cookie/token  \nCalebJamesDeLisl - (22:33): So how does the token get handed to the user?  \nabusenius - (22:34): generated randomly  \nCalebJamesDeLisl - (22:35): And passed as a http redirect or in a hidden field?  \nabusenius - (22:35): it would be nice to expire it once in a while, but this seems to be not easy to implement curently  \nabusenius - (22:35): no, currently just injected into html  \nCalebJamesDeLisl - (22:36): injected into html meaning there's a hidden form field which has the number and when you click submit the number gets posted back?  \nabusenius - (22:36): yes  \nabusenius - (22:37): if you do redirect its the same, but its first redirected to find out the token  \nCalebJamesDeLisl - (22:37): Well your implementation means any XSS on the site can scrape the number.  \nabusenius - (22:38): yes, as any other measure  \nabusenius - (22:38): but I still need to experiment with redirects  \nCalebJamesDeLisl - (22:38): If you use the http redirect trick, the number is nowhere in the html document so it can't be lifted.  \nCalebJamesDeLisl - (22:40): But there's a problem with the http redirect method as well.  \nCalebJamesDeLisl - (22:41): Whatever link the user clicks on that edit page, they will post the number back in the referrer header.  \nabusenius - (22:41): ok, let me recall the idea, so you go to a save page, it doesnt have a token, but the script redirects it back to itself, passig a token in referer, correct?  \nCalebJamesDeLisl - (22:42): You go to the edit page. There is no token, the edit page redirects back to the edit page, with the token appended as a url parameter.  \nCalebJamesDeLisl - (22:43): It's cool because (in firefox) XmlHttpRequest never gets to see the final url after a redirect  \nCalebJamesDeLisl - (22:44): So after editing the page, you click save and the save page looks at the referrer and scrapes the token from it.  \nabusenius - (22:44): and then the save action reads the token from referer  \nCalebJamesDeLisl - (22:44): Yup.  \nCalebJamesDeLisl - (22:44): And referrers are pretty hard to forge which adds another level of pain to exploitation.  \nCalebJamesDeLisl - (22:45): The big PITA is that that referrer is going to leak that number where ever you click from that edit page.  \nabusenius - (22:46): I need to look what you can do with browser history in JS  \nCalebJamesDeLisl - (22:46): I have a possible solution.  \nCalebJamesDeLisl - (22:47): Your token algorithm is fine.  \nCalebJamesDeLisl - (22:48): But when the user loads a edit page, they should be redirected to the edit (with token) page.  \nCalebJamesDeLisl - (22:49): The redirect redirects with a random number as the token param.  \nabusenius - (22:50): yes, slightly different logic in the templates  \nabusenius - (22:50): at the beginning there is a redirect  \nCalebJamesDeLisl - (22:50): When the edit page loads with the token param, it generates the HTML token (as with your current implementation) but instead of putting the token in the field, it XORs the token with the random parameter.  \nCalebJamesDeLisl - (22:51): When you hit save, the save action takes the param from the referrer and the param from the hidden field, XORs them and compares to the token.  \nabusenius - (22:52): XOR to protect from passing token to other links?  \nCalebJamesDeLisl - (22:52): And history, and XmlHttpRequest.  \nCalebJamesDeLisl - (22:53): Half protects CSRF (perfectly), the other half protects XSS, (really well)  \nabusenius - (22:53): hm, sounds cool, but somebody should test it in safari and IE :)  \nCalebJamesDeLisl - (22:54): Security is for the people who care about being secure :P  \nabusenius - (22:55): the problem is that those people will complain...  \nabusenius - (22:56): hm, if you manage to inject JS into the save page, you're still doomed, but otherwise seems fine so far  \nCalebJamesDeLisl - (22:56): It's hard to concern myself with protecting the security of a browser which has known overflows which can run binaries and then there is no security.  \nCalebJamesDeLisl - (22:57): So we look very carefully at the save page and don't care much about anything else.  \nabusenius - (22:58): it's still a lot harder to exploit browser bugs than to write malicious images  \nCalebJamesDeLisl - (22:58): images? \u00a0like tiff? ;)  \nabusenius - (22:58): img'es :)  \nCalebJamesDeLisl - (22:59): Well I think we're safe against outside sites making bad img tags.  \nCalebJamesDeLisl - (23:00): (the current implementation that is.)  \nCalebJamesDeLisl - (23:00): Do you have a function to drop the getToken function once it's done being used?  \nCalebJamesDeLisl - (23:02): If there's something like services.csrftoken.disable() then that call can be put in the view template so nobody else has access to the function.  \nabusenius - (23:02): no, but this is actually a good idea, its hard to clear tokens on logout, but we can explicitely clean them...  \nCalebJamesDeLisl - (23:02): Actually I just wanted to make the function unavailable for the duration of the rendering.  \nabusenius - (23:03): if you disable(), how do you enable()?  \nCalebJamesDeLisl - (23:03): Same idea as <!-- There will be no script after this point! -->  \nCalebJamesDeLisl - (23:03): You only disable once you know you are done with it. You get it back when the next page is requested and is rendering.  \nabusenius - (23:03): I could add a method that is not accessible from velocity, only groovy or java  \nabusenius - (23:04): this would do it I guess  \nCalebJamesDeLisl - (23:04): How would templates get at it?  \nabusenius - (23:04): view action would disable it  \nabusenius - (23:04): and other would not  \nabusenius - (23:05): (there is edit action for editing)  \nabusenius - (23:05): but there is a problem with strange ways to edit  \nCalebJamesDeLisl - (23:05): I don't like that so much, there's the get action and it would mean adding code to each action which shouldn't have access.  \nCalebJamesDeLisl - (23:06): Just adding a velocity accessible function which drops access seems like the best.  \nabusenius - (23:07): we could re-enable it automatically before rendering  \nCalebJamesDeLisl - (23:07): Like the idea of $xcontext.dropProgrammingRight() everything after that command is sandboxed.  \nCalebJamesDeLisl - (23:08): Well the XWikiContext is dumped and a new one made per request so everything is fresh.  \nabusenius - (23:08): right, but all these are actually small details, easy to add :)  \nabusenius - (23:08): the hard part is to use the token everywhere  \nabusenius - (23:09): (would be cool if you'd try the patched version btw.)  \nCalebJamesDeLisl - (23:09): Hmm, yea a lot of code posts to save action.  \nabusenius - (23:10): unfortunately it also gets to view action and still changes stuff ^^  \nCalebJamesDeLisl - (23:11): Hmm, maybe we shouldn't even worry about preventing code inside of XWiki from doing something because it can hust use server side Document.save()  \nabusenius - (23:11): well, the idea is to prevent privilege escalation  \nCalebJamesDeLisl - (23:12): Well we can at least say that reflective XSS cannot save documents.  \nabusenius - (23:12): because you make an admin to save something for you  \nabusenius - (23:12): (in most cases)  \nCalebJamesDeLisl - (23:12): Yea, the save() trap.  \nCalebJamesDeLisl - (23:15): So how do you expect a typical application which uses the save action to add the functionality?  \nCalebJamesDeLisl - (23:16): {{include document=\"XWiki.CSRFTokenProvider\"/}} ?  \nabusenius - (23:17): it would need to use some kind of script, no magic here  \nCalebJamesDeLisl - (23:18): That wouldn't work with the hidden field solution because the field wouldn't be in any form :(  \nabusenius - (23:18): why not?  \nCalebJamesDeLisl - (23:19): Unless you put the include macro inside of a form.  \nabusenius - (23:19): ah, ok, sorry, got somewhat confused  \nabusenius - (23:20): ok, so the token should be in a hidden input in forms and as parameter in links  \nCalebJamesDeLisl - (23:20): Maybe there should be a list of \"ok to save\" referrers which for applications which haven't been fixed yet.  \nabusenius - (23:20): so unless we have some API like giveMeASafeSaveForm() it must be included manually  \nCalebJamesDeLisl - (23:20): {{form}}  \nabusenius - (23:21): yea  \nabusenius - (23:21): actually, people shouldn't need to use html for such things at all  \nCalebJamesDeLisl - (23:22): I like the idea of the parameter which is a list of pages which aren't yet fixed. This way we can activate it before everything is perfect.  \nCalebJamesDeLisl - (23:23): you see google ssl?  \nabusenius - (23:23): and for urls, getURL(bla, \"save\") could automatically add the token if it is not disabled  \nabusenius - (23:23): google ssl?  \nCalebJamesDeLisl - (23:24): https://www.google.com/ \u00a0cool stuff  \nabusenius - (23:24): ah, yes  \nabusenius - (23:25): they are so big that they dont care about server load any more :)  \nCalebJamesDeLisl - (23:25): Just set it to my homepage and added a firefox search gadget for it.  \nCalebJamesDeLisl - (23:26): I think isps might have been messing with the traffic. Maybe swapping out the ads.  \nCalebJamesDeLisl - (23:27): Google uses 2% of all the power in Oregon.  \nabusenius - (23:28): hm, wtf happened to velocity macros in the latest build, they all fail...  \nCalebJamesDeLisl - (23:28): Vincent has been tinkering with the velocity engine.  \nabusenius - (23:29): I guess I need to recompile everything  \nCalebJamesDeLisl - (23:29): What are you compiling for?  \nCalebJamesDeLisl - (23:30): You might be able to get away with compiling just XE.  \nabusenius - (23:31): well, not everything, just core and some macros  \nabusenius - (23:31): and copy some jars  \nabusenius - (23:32): I have a script to compile what I've changed and copy the rest  \n\n"}