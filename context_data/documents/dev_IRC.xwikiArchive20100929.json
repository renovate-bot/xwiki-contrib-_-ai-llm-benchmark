{"id": "dev:IRC.xwikiArchive20100929", "url": "https://dev.xwiki.org/xwiki/bin/view/IRC/xwikiArchive20100929", "title": "IRC Archive for channel #xwiki - XWiki", "collection": "Eval-Large", "mimetype": "text/markdown", "language": "en", "content": "\nsdumitriu left at 00:11 (Quit: Leaving.  \nlpereira joined #xwiki at 00:27  \nlucaa left at 00:43 (Ping timeout: 276 seconds  \njvdrean joined #xwiki at 00:55  \njvdrean left at 01:05 (Quit: Leaving.  \nrrodriguez left at 02:15 (Quit: rrodriguez  \nlpereira left at 02:39 (Quit: Leaving.  \nabusenius left at 04:49 (Ping timeout: 240 seconds  \nvenkatesh joined #xwiki at 06:37  \nvenkatesh left at 06:37 (Remote host closed the connection  \nvenkatna joined #xwiki at 06:37  \nrrodriguez joined #xwiki at 07:02  \nDenis left at 07:04 (Ping timeout: 276 seconds  \nDenis joined #xwiki at 07:09  \nsburjan joined #xwiki at 08:33  \nsilviar joined #xwiki at 08:41  \nmflorea joined #xwiki at 08:51  \nasrfel joined #xwiki at 08:53  \nmflorea left at 09:03 (Quit: Leaving.  \njvdrean joined #xwiki at 09:06  \nmflorea joined #xwiki at 09:06  \narkub joined #xwiki at 09:12  \nflorinciu joined #xwiki at 09:17  \ntmortagne joined #xwiki at 09:19  \nrrodriguez left at 09:35 (Quit: rrodriguez  \njvdrean left at 09:39 (Quit: Leaving.  \nsilviar left at 09:39 (Quit: Leaving.  \nsilviar joined #xwiki at 09:48  \nlucaa joined #xwiki at 10:06  \njvdrean joined #xwiki at 10:09  \nflaviusolaru joined #xwiki at 10:11  \ntmortagne left at 10:14 (Quit: Leaving.  \ntmortagne joined #xwiki at 10:16  \nvmassol joined #xwiki at 10:46  \nsburjan - (10:53): vmassol: ping  \nvmassol - (10:53): hi sburjan  \nsburjan - (10:53): hello vmassol  \nsburjan - (10:54): I have a question regarding the UI-tests  \nflorinciu left at 10:54 (Read error: Connection reset by peer  \nsburjan - (10:55): I have a PageObject. And I use an assert in a method. The method isn't annotated as @Test, because that method is not a actual test. Is this correct ?  \nsburjan - (10:55): I am verifying a bottom confirmation .. ajax  \nvmassol - (10:55): sburjan: asserts should only be done un tests  \nsburjan - (10:55): okay  \nvmassol - (10:55): s/un/in/  \nvmassol - (10:55): page objects should have no tests  \nsburjan - (10:56): so where is no test, there must be no Assert ?  \nvmassol - (10:56): assert = test  \nsburjan - (10:56): odd, that I don't get any errors  \nvmassol - (10:57): page objects are APIs  \nvmassol - (10:57): they are not tests  \nvmassol - (10:57): the tests are the classes that end with Test  \nsburjan - (10:58): thanks  \nrrodriguez joined #xwiki at 11:29  \nabusenius joined #xwiki at 11:40  \nvmassol - (11:54): mflorea: hi. I think you forgot to update the pom.xml files  \nvmassol - (11:54): the buils is broken for me  \nmflorea - (11:54): I was just about to commit  \nvmassol - (11:54): \\*build  \nvmassol - (11:54): why don't you commit all at once?  \nvmassol - (11:55): (would be better)  \nmflorea - (11:55): because I moved the file on the server and not locally  \nmflorea - (11:55): moved the modules  \nvmassol - (11:55): ok that's a good reason  \nvmassol - (11:55): hmm  \nvmassol - (11:55): not a good reason actually  \nvmassol - (11:55): you can do that locally  \nvmassol - (11:56): that's what I do usually  \nvmassol - (11:56): just svn move  \nvmassol - (11:57): AFAIK there's never a good reason to do a server move  \nvmassol - (11:57): you can always check out and svn move locally  \nmflorea - (11:58): hmm, for some reason I though that moving on the server is better  \nvmassol - (11:58): I think sergiu gave you that false idea :)  \nvmassol - (11:58): I remember him mentioning it several times but it's not correct IMO  \nmflorea - (11:58): probably :)  \nmflorea - (11:59): I think the diff mail is more clear when you move directly on the server  \nvmassol - (11:59): it's the same  \nvmassol - (11:59): (AFAIR)  \nmflorea - (11:59): I see  \njbrBridge - (12:44): [[[email\u00a0protected]](https://dev.xwiki.org/cdn-cgi/l/email-protection)] Is it possible to deploy 2 instances of xwiki to different contexts on the same tomcat instance ?  \njbrBridge - (12:44): [[[email\u00a0protected]](https://dev.xwiki.org/cdn-cgi/l/email-protection)] (Reason: postgress doesn't allow a virtual xwiki).  \ncjdelisle - (12:51): I have done that with no problem.  \nsburjan left at 13:01 (Ping timeout: 245 seconds  \nsdumitriu joined #xwiki at 13:08  \nDrPoO joined #xwiki at 13:35  \nabusenius left at 13:40 (Ping timeout: 252 seconds  \nflaviusolaru left at 13:40 (Quit: Leaving.  \nDrPoO - (13:48): hey, is there any way of disabling registration in xwiki?  \nflaviusolaru joined #xwiki at 13:51  \nsdumitriu - (13:51): Yes  \nsdumitriu - (13:52): Administer Wiki, Rights, Users, disable Register for Guest  \nflaviusolaru left at 14:09 (Quit: Leaving.  \nflaviusolaru joined #xwiki at 14:10  \nDrPoO - (14:15): how can one adjust the timeout of sessions?  \nDrPoO left at 14:35 (Ping timeout: 252 seconds  \nflaviusolaru left at 14:38 (Ping timeout: 245 seconds  \nqwebirc25247 joined #xwiki at 14:39  \nqwebirc25247 left at 14:40 (Client Quit  \nlpereira joined #xwiki at 14:44  \nvenkatna left at 15:27 (Ping timeout: 240 seconds  \njvelo joined #xwiki at 15:50  \nDrPoO joined #xwiki at 16:08  \nDrPoO - (16:29): i am having a problem with my xwiki. If I log in, start editing a page, leave it inactive for ~3 min... then, I have to restart my browser to be able to log back in  \nDrPoO - (16:30): i think its a problem with my session timeing out... any suggestions?  \nsdumitriu - (16:30): Sessions are handled by the container  \nvmassol - (16:31): DrPoO: sessions are by default 30mn in containers (in general)  \nvmassol - (16:31): look for the documentation for your container  \nmflorea - (16:31): vmassol: I get http://pastebin.com/DtEtyPWD Is this a bug in DocumentLinkTypeReferenceSerializer? The Link object passed to the serializer look fine.  \nsilviar left at 16:32 (Quit: Leaving.  \nDrPoO - (16:33): I am also getting a filenotfoundexception from lucene : /var/cache/jetty/data/Je ...\\_xwiki.war\\_\\_xwiki\\_\\_.zfpng/lucene/\\_1.frq (Too many open files) any suggestions?  \ntmortagne - (16:34): mflorea: I guess the serializer expect the Link of type \"doc\" to be a DocumentLink  \ntmortagne - (16:34): now IMO it should support this use case  \ntmortagne - (16:35): it just mean it will not have queryString and anchor  \ntmortagne - (16:35): vmassol: WDYT ?  \nvmassol - (16:35): hold on  \ntmortagne - (16:37): mflorea: are you sure you don't need a DocumentLink in your use case ? you will never have queryString and anchor ?  \ncjdelisle - (16:38): DrPoO: out of memory error (too many open files) is caused by having limits set too low in linux.  \nvmassol - (16:38): mflorea: checking  \nvmassol - (16:39): mflorea: it means the passed link is not a document link  \nmflorea - (16:39): tmortagne: for the moment no, I don't have query string and anchor. I just create a Link object, set its type and reference and then pass it to the serializer.  \ntmortagne - (16:39): vmassol: that's what i said, did you see my proposal ?  \nvmassol - (16:40): hmmm why not\u2026. I guess it's ok  \nvmassol - (16:40): but it probablt means there's a pb in \u00a0marius code somewhere though  \nvmassol - (16:40): since a DocumentLink should be created instead of a Link object  \nmflorea - (16:41): vmassol: it doesn't look right to me to create concrete type of links if there is the type field  \nvmassol - (16:41): mflorea: how would you do it?  \nDrPoO - (16:41): cjdelisle, how can i fix this?  \ntmortagne - (16:41): mflorea: but there is addintionnal field that make sens only in a document type  \nDrPoO - (16:41): cjdelisle, you mean for the virtual machne?  \ncjdelisle - (16:42): https://encrypted.google.com/search?q=java+memory+open+files+limits  \nmflorea - (16:42): in my case I don't care about those fields. I use a LinkReferenceSerializer which is generic and I can give it a Link object and it should serialize it based on the link type  \ncjdelisle - (16:42): For the user which the virtual machine is running under.  \nasrfel left at 16:42 (Quit: Leaving.  \ntmortagne - (16:43): mflorea: LinkReferenceSerializer is generic but your code is not, you know the type since you set it in the Link object  \nmflorea - (16:43): IMO either I set the type of the Link object, or don't set the link type but create concrete instances of DocumentLink, ImageLink, AttacmhentLink, etc. link  \nvmassol - (16:44): mflorea: how do you handle query string and anchors?  \nmflorea - (16:44): there's no query string and anchor for the moment, so I don't handle them at all  \nvmassol - (16:44): yes but that's temporary  \nvmassol - (16:45): better have the code right for the future  \ntmortagne - (16:45): mflorea: i agree with you that DocumentLinkTypeReferenceSerializer should support Link object that's the not question, just that you could want to pass more infirmations  \nvmassol - (16:45): tmortagne: I'm ok too although I tend to believe doing what you propose may hide real problems  \ntmortagne - (16:45): and in general if you fully support document you will want to serialize all document informations  \nvmassol - (16:45): (as is the example in this case)  \nmflorea - (16:45): vmassol, tmortagne: I want to have a generic code, I don't want to instantiate concrete link types.  \nvmassol - (16:46): mflorea: that's not possible  \nvmassol - (16:46): if you know how to do it, please let me know  \nvmassol - (16:46): well you could use varargs but that's ugly  \nmflorea - (16:46): vmassol: that's possible for EntityReference, it should be possible for Link  \nvmassol - (16:46): varargs or maps  \nvmassol - (16:47): entity ref is different  \nvmassol - (16:47): all types have the same # of params  \nmflorea - (16:47): vmassol: I can serialize an EntityReference without creating a concrete type  \nvmassol - (16:48): that's what we do too for serialization i don't understand  \nvmassol - (16:48): LinkRefernceSerializer  \nvmassol - (16:48): it's generic  \ntmortagne - (16:48): mflorea: it's not the same, there is no special information depending on the reference type  \nvmassol - (16:49): mflorea: have a look at XWikiSyntaxLinkReferenceSerializer you'll see it's generic  \nvmassol - (16:49): the pb is simply  \nvmassol - (16:49): that someone is passing a Link obeject instead of a DocumentLink object  \ntmortagne - (16:49): typed entityreference are helpers and just that  \nvmassol - (16:49): (with a type being document)  \nmflorea - (16:50): vmassol, tmortagne: I understand that EntityReferences are a bit different, but as long as Link is a concrete type, i.e. can be instantiated, and LinkReferenceSerializer accepts a Link object then it should be able to serialize generic links and not only concrete link types  \ntmortagne - (16:51): mflorea: that's also what i'm saying  \nmflorea - (16:51): otherwise make Link abstract  \nvmassol - (16:51): mflorea: I don't know any solution except to remove strong typing for the link objects  \ntmortagne - (16:51): simply if you need to serialize special information you need to provide them, and the way is by using the proper specialized Link  \nvmassol - (16:52): mflorea: indeed we could male Link an interface and make the current Link object be a GenericLink or DefaultLink  \nvmassol - (16:52): s/male/make/  \nvmassol - (16:52): but it won't change much for you  \nmflorea - (16:52): vmassol: yes, this way I am forced to use a concrete type  \nvmassol - (16:53): if we want to do this we should do it in 2.5 timeframe  \nmflorea - (16:54): right now it is confusing. I can instantiate Link and LinkReferenceSerializer accepts a Link object so it's natural to expect that linkReferenceSerializer(genericLink) is working fine  \nvmassol - (16:54): I understand  \nvmassol - (16:55): tmortagne: wdyt about making Link an interface?  \ntmortagne - (16:55): always better for extensibility to manipulate interface so I'm ok with that  \nvmassol - (16:55): how do we name the generic/standard lnk: DefaultLink? GenericLink? something else?  \nmflorea - (16:56): now, if I create concrete instances of Link, i.e. DocumentLink, AttachmentLink, I shouldn't have to set the type (the type could be set in the constructor)  \ntmortagne - (16:56): DefaultLink is fine  \nvmassol - (16:56): note that this will break some of our users even more but anyway...  \nvmassol - (16:56): mflorea: yep  \ntmortagne - (16:56): mflorea: i don't think you ned to set the type  \nvmassol - (16:56): tmortagne: right now you do but I can fix this  \ntmortagne - (16:56): hmm indeed that look like an error  \ntmortagne - (16:57): actually it should even be impossible to set the type i think  \ntmortagne - (16:57): when it's a DocumentLink  \ntmortagne - (16:57): or any other types Link  \ntmortagne - (16:57): \\*typed  \nmflorea - (17:00): ok, I'll change my code to use specific link types. I have one more question.  \nmflorea - (17:01): the text after \"startwikilink\" is syntax specific right? I'll have to pass the syntax id when parsing/serializing link references (for the case when document syntax is not xwiki/2.0)  \ntmortagne - (17:01): mflorea: no i think it's always xwiki/2.1 style  \ntmortagne - (17:01): vmassol: right ?  \nvmassol - (17:02): yes  \ntmortagne - (17:02): (and will be a xml generic marker when ready)  \nmflorea - (17:02): hmm, so the link reference syntax doesn't depend on the document syntax?  \ntmortagne - (17:02): nop  \ntmortagne - (17:03): always the same way to parse/serialize it whatever the syntax, let's say it's html syntax which happen to look strongly like xwiki/2.1 syntax  \nmflorea - (17:03): vmassol: then I should replace @Requirement(\"xwiki/2.0\") with @Requirement(\"xwiki/2.1\") ? for LinkReferenceSerializer and LinkParser  \nvmassol - (17:04): mflorea: i don't know this code well enough  \ntmortagne - (17:05): would be even better to implements a \"xhml/1.0\" that internally use \"xwiki/2.0\", WDYT ?  \nvmassol - (17:05): not xhtml  \nvmassol - (17:05): xml maybe  \nvmassol - (17:05): xhml?  \nvmassol - (17:06): note that I'm still not 100% convinced about this xml syntax but that's another story (although related)  \nmflorea - (17:06): so, what hint should I use for LinkReferenceSerializer and LinkParser? xwiki/2.0 or xwiki/2.1?  \ntmortagne - (17:07): mflorea: again the syntax is 2.1 but as i said your code would be nicer if it was not referencing directly xwiki/2.1  \nmflorea - (17:08): I agree, so xwiki/2.1 for the moment and I'll change it when a generic hint is available  \ntmortagne - (17:09): with generic marker it would not work that way anyway  \nvmassol - (17:09): mflorea: I'm not 100% sure DefaultLink is better for you  \nvmassol - (17:10): you'll be tempted to use new DefaultLink() rather than new DocumentLink(), won't you?  \ntmortagne - (17:10): vmassol: factory ?  \nvmassol - (17:11): you cannot have a factory  \nvmassol - (17:11): unless you use varargs and that's going to be ugly  \ntmortagne - (17:11): with custom parameters  \nmflorea - (17:11): I wouldn't be tempted as long as DefaultLink is abstract (so AbstractLink should be the name)  \nvmassol - (17:11): mflorea: you've lost me with your abstract :)  \ntmortagne - (17:11): vmassol: not that ugly but safe  \nmflorea - (17:11): does it have to be instantiable?  \nmflorea - (17:12): if only specific link types should be used, then Link/DefaultLink/AbstractLink shouldn't be instantiable, thus abstract  \nvmassol - (17:13): mflorea: how do you pass specific info?  \nmflorea - (17:13): you instantiate specific type, i.e. DocumentLink  \nvmassol - (17:13): DefautLink is that  \nmflorea - (17:14): I don't understand  \ntmortagne - (17:14): me neither  \nvmassol - (17:14): it replaces MailtoLink, AttachmentLink, URLLink, etc and all possible custom links  \ntmortagne - (17:14): vmassol: mflorea was suggesting to force having theses classes  \nmflorea - (17:14): so right now there's no AttachmentLink?  \nvmassol - (17:15): it wouldn't add anything  \nvmassol - (17:15): since it doesn't have any additional param to add  \nvmassol - (17:15): same if I want to add a new link type I don't have to create a new link type  \nmflorea - (17:16): but then you shouldn't force me to use specific link types.  \nvmassol - (17:16): why not?  \nvmassol - (17:16): how would you pass query string and anchor for ex for a doc link?  \nmflorea - (17:16): so you say that linkReferenceSerializer.serialize(link) work if link type is Attachment but doesn't work if link type is document  \nvmassol - (17:17): it always work  \nvmassol - (17:17): the only case it doesn't work  \nmflorea - (17:17): I might not know that a specific link type has specific parameters  \nvmassol - (17:17): is if you specify a link type and have a non matching instance  \nvmassol - (17:18): I guess we could do a check in the serializer  \ntmortagne - (17:18): IMO serialize should always support DefaultLink unless it expect mandatory special information  \nvmassol - (17:18): hmm no we cannot actually  \nvmassol - (17:18): forget that  \ntmortagne - (17:18): and when you know the type better you use the typed Link  \nvmassol - (17:19): tmortagne: yes we could check for DefaultLink itself  \ntmortagne - (17:19): i meant Link actually but that's pretty much the same  \nvmassol - (17:19): and only use specialized serializers when the type isn't DefaultLink  \ntmortagne - (17:19): what i meant is that it should not cast without testing  \nmflorea - (17:19): for me all the link types should be handled the same. if I can serialize an attachment link without creating a specific object (I don't know if there is a specific class) then I should be able to do the same with document links  \nvmassol - (17:19): what I don't want is have specialized serializer have to do the check  \ntmortagne - (17:20): vmassol: that's the other way around actually, you test for the special type not for DefaultLink, DefaultLink is just the default inmplementation of Link  \nvmassol - (17:20): tmortagne: you cannot do that  \nvmassol - (17:20): since it won't work for user-provided types  \ntmortagne - (17:21): i don't understand, user provide serializer with type and related special type  \ntmortagne - (17:21): you know the special type in the serializer  \ntmortagne - (17:22): otherwiser how do you expect to cast ? which is wht you are doing currently...  \ntmortagne - (17:24): vmassol: what i'm saying is that you should modify DocumentLinkTypeReferenceSerializer to test the type beforefore casting it in DocumentLink  \nvmassol - (17:24): tmortagne: yes but it would be better to handle this more generically  \nvmassol - (17:24): since otherwise all serializers will need to test  \nvmassol - (17:24): but if we don't have any way why ot  \nvmassol - (17:25): not  \ntmortagne - (17:25): and if that's not a DocumentLink then you serialize everything except the anchor ans querystring  \ntmortagne - (17:25): how would it be less generic that what you do now ?  \ntmortagne - (17:25): you already know the type  \ntmortagne - (17:26): there is no generic way to implement serialize for a given type, you need to know how to serialize that type  \nlucaa left at 17:37 (Ping timeout: 265 seconds  \nmflorea - (17:42): on my side, I think we should avoid breaking the WYSIWYG editor when a new concrete link type is added. Right now we don't have AttachmentLink, but if we add it, then the editor should continue to work. The editor code will be update to instantiate the concrete AttachmentLink when the UI will be extended to include the custom parameter. It's the same with DocumentLink. I will instantiate a DocumentLink when the insert/edit link wizard will ext  \njose\\_\\_ joined #xwiki at 17:42  \nsdumitriu - (17:59): rrodriguez: Ping  \nrrodriguez - (17:59): sdumitriu: Pong  \nrrodriguez - (17:59): hi!  \nsdumitriu - (17:59): Hi  \nsdumitriu - (17:59): \"I would like to set the value of $species to the value of the property \u00a0GalicianName of the class Species.SpeciesClass instantiated in this \u00a0document.\"  \nsdumitriu - (18:00): Define \"this document\"  \nvmassol left at 18:00 (Quit: Leaving.  \nrrodriguez - (18:00): ok  \nrrodriguez - (18:00): it is not precise my question  \njvelo left at 18:00 (Read error: Connection timed out  \nrrodriguez - (18:01): \"this document\" is an XWiki document with an object of the class Species.SpeciesClass  \nrrodriguez - (18:01): Caleb answer did the trick  \nsdumitriu - (18:01): OK  \njvelo joined #xwiki at 18:01  \nrrodriguez - (18:01): I'm still pending to check the second part of his message to see if I've well understood  \nrrodriguez - (18:01): I've to leave now! The family, you know! I'll reconnect later on!  \nsdumitriu - (18:02): So there aren't two objects in the query, one of the objects is in the query and the other in the current page, right?  \nrrodriguez - (18:02): yeap  \nsdumitriu - (18:02): K  \nrrodriguez - (18:02): that is why I wrote \"involving\"  \nrrodriguez - (18:03): there is an example with 2 objects in ...  \nrrodriguez - (18:03): http://platform.xwiki.org/xwiki/bin/view/DevGuide/QueryGuide  \nrrodriguez - (18:04): but i do need to link \"documents\" coming from a wrong, or at least, not correct, model  \nrrodriguez - (18:05): I've another problem that I'll try to describe in another message. Thanks for asking!  \nrrodriguez left at 18:07 (Quit: rrodriguez  \njvelo left at 18:10 (Ping timeout: 240 seconds  \ncjdelisle - (18:10): wow hibernate guts is like a huge cavernous undocumented mansion.  \nsdumitriu - (18:10): hibernate, or our storage package?  \ncjdelisle - (18:11): Hibernate itself.  \ncjdelisle - (18:11): It puts XWikiHibernateStore and friends to shame.  \ncjdelisle - (18:12): Just found with jhat that it duplicates everything it saves --> double memory cost for attachments.  \njose\\_\\_ left at 18:13 (Ping timeout: 265 seconds  \nmflorea left at 18:13 (Quit: Leaving.  \ncjdelisle - (18:13): Now working on getting column names so I can stream the attachment with jdbc since hibernate doesn't seem to allow saving of an InputStream.  \ncjdelisle - (18:32): I have this fantasy about setup.  \ncjdelisle - (18:33): User starts the zip/exe or drops the .war in the container, and navigates to it with the browser.  \ncjdelisle - (18:34): Instead of an error500 they get a nice static template which helps them to devise a configuration.  \nsdumitriu - (18:34): Something like this? http://gsoc.myxwiki.org/xwiki/bin/view/Improving%20the%20setup%20and%20upgrade%20process/  \ncjdelisle - (18:34): They fill in the bubbles and change what they have to (things like cookie encryption are set automatically)  \ncjdelisle - (18:35): (I'll read that in a minute...)  \ncjdelisle - (18:35): Then when they're done, they click generate and it downloads a .conf file to their browser.  \ncjdelisle - (18:35): They can either put the conf file in /etc/xwiki/ or they can put it anywhere as long as -Dxwiki.configuration.dir is set to there.  \ncjdelisle - (18:36): The conf file has a version number in it.  \ncjdelisle - (18:36): When they update the wiki, the engine detects an old version number and walks them through the process of making the necessary changes then they do the process again.  \ncjdelisle - (18:37): 1. Only 1 conf file for everything (this would be a big change)  \ncjdelisle - (18:38): 2. .war file is never opened. :D  \ncjdelisle - (18:38): 3. .zip/.exe version can be set up to use mysql/postgres db.  \ntmortagne - (18:39): cjdelisle: we talk about such a initial configuration UI since a long time but never been able to put that in the top of the todo list :(  \ncjdelisle - (18:40): .zip/.exe version can be set up to use mysql/postgres db. <-- This seems like a big + to me. We could just as easily build a .jar version and make it start jetty on run.  \ncjdelisle - (18:42): I have heard a lot of people say that they chose XWiki because they couldn't get lighttpd/php/mysql/mediawiki running.  \njvelo joined #xwiki at 18:42  \nflorinciu joined #xwiki at 18:45  \ncjdelisle - (18:48): \"allowing the installer to detect an existing XWiki instance and correctly update it (remove updated or deleted libraries, but keep the user's jar, merge settings)\"  \ncjdelisle - (18:48): That looks complicated.  \nsdumitriu - (18:48): It could be done by reading poms  \ncjdelisle - (18:50): Hrmph. \"Modified by http://www.myxwiki.org/xwiki/bin/view/XWiki/Sergiu\">Sergiu\" \u00a0we released 2.4 with escaping issues?  \nsdumitriu - (18:51): I don't think that's escaping  \nsdumitriu - (18:51): It's a known BlogApp bug  \ncjdelisle - (18:52): Ok. I was going to say \"I thought I reverted that commit!\"  \ncjdelisle - (18:53): I remember now, mine was with the copyright license link.  \nabusenius joined #xwiki at 18:59  \njvdrean left at 19:00 (Quit: Leaving.  \ntmortagne - (19:04): cjdelisle: \"detect an existing XWiki instance\" is already done by new extension manager, it analyze what it called \"core\" extension to know what is already there when you install a new extension from a repository  \ntmortagne - (19:06): it's not 100% perfect because some jars does not provide any pom.xml (even if they come from a maven repository) but even for theses jar some are found by looking at other jars that depends on it  \ntmortagne - (19:07): at some point anyway we will force some extension descriptor in all the distributed jars to be safe  \njvelo left at 19:13 (Ping timeout: 252 seconds  \nlucaa joined #xwiki at 19:16  \ncjdelisle - (19:19): Ok so you just install the new version as an extension of the old version?  \ntmortagne - (19:23): currently core extension are impossible to upgrade, they are freezed  \ntmortagne - (19:23): extension manager currently only manipulate what is in its local repository, what it's sure it has the right to modify  \ntmortagne - (19:24): problem is that core extension could be located in a war or in a folder where the application does not have the right to write  \ncjdelisle - (19:25): I see.  \ncjdelisle - (19:25): So the only way to do an update is still by way of deploying a new war.  \ntmortagne - (19:26): yep but that could be still done by a tool instead of being done by hand  \ncjdelisle - (19:26): IMO dropping the .war file into the container /webapps/ folder is the easy part. Configuration is the hard part.  \ntmortagne - (19:26): XWiki ask to the a XWiki Upgrader Daemon to upgrade and restart it  \ntmortagne - (19:26): s/the a/a/  \ntmortagne - (19:27): or it's done by apt-get  \ncjdelisle - (19:27): \"XWiki Upgrader Daemon\" <-- need lots of security precautions.  \ncjdelisle - (19:27): IMO the tomcat user should not have write access on the .war file.  \ntmortagne - (19:29): yes that's why i suggest a daemon which is not a tomcat application  \ntmortagne - (19:29): but anyway on linux system the best is apt-get  \ncjdelisle - (19:30): Still configuration is the hard part IMO.  \narkub left at 19:30 (Ping timeout: 240 seconds  \ntmortagne - (19:31): sure  \ntmortagne - (19:31): but apt-get can handle that too  \ntmortagne - (19:31): but would be great to have something working whatever the system  \ncjdelisle - (19:33): apt-get can't make decisions for the user.  \ntmortagne - (19:34): yes but you can make apt-get ask questions  \ntmortagne - (19:34): that what it does for lots of applications  \ncjdelisle - (19:35): If we write code for debian then why not make it C?  \ntmortagne - (19:35): writing an installer for debian does not mean the whole thing is for debian  \ntmortagne - (19:35): to be a good debian citizen we will need to provide a apt package at some point anyway  \ncjdelisle - (19:36): I'm not -1 to adding deb specific code, I just wouldn't want to write it.  \ncjdelisle - (19:37): Also to write a good deb pkg you want to use deb libraries instead of shipping everything inside the .war as we do now.  \ntmortagne - (19:38): sure and i never said we should not do that  \ncjdelisle - (19:38): aka http://packages.debian.org/unstable/web/velocity  \ntmortagne - (19:38): i'm just talking about your configuration use case here  \ncjdelisle - (19:39): I am enamored by the fantasy of a nice friendly template explaining all of the options then making a .conf file for you to put on the server.  \ncjdelisle - (19:40): It's relatively easy, the only major internal change is all conf files have to be merged.  \ntmortagne - (19:40): which is not really easy :)  \ntmortagne - (19:41): only i don't see why you could not generate several configuration files for now  \ntmortagne - (19:41): s/only/also/  \ncjdelisle - (19:41): You just suggested integrating with apt-get, after hearing that it sounded easy.  \ncjdelisle - (19:42): Central to the scheme is that the user downloads the file then has to place it on the server themselves so there is no security issue with trying to write to disk.  \ncjdelisle - (19:44): Also IMO it's messy to have a bunch of different configuration mechanisms strewn all over.  \ntmortagne - (19:45): cjdelisle: i said \"for now\" and i'm only answering to \"It's relatively easy, the only major internal change is all conf files have to be merged.\"  \ncjdelisle - (19:45): Everything else is relatively easy ;)  \ntmortagne - (19:46): all i'm saying is that if the only thing that stop you from doing the template you are talking about is merged configuration it's really not mandatory for a first version  \ncjdelisle - (19:46): And we have to get all configuration files to be readable from /etc or some other place.  \ncjdelisle - (19:47): because if we help the user generate config files then ask them to unzip the .war, we kind of break the \"ease of use\" factor.  \ntmortagne - (19:48): for upgrade sure, but your tool would cover the install which is already great  \ncjdelisle - (19:49): log4j.properties, hibernate.cfg.xml, xwiki.cfg. \u00a0It would be nice if all were handled in xwiki.properties. The question is whether are more against a bunch of configuration mechanisms or having one big conf file with entries which we plan to remove.  \ncjdelisle - (19:49): s/is whether are/is whether we are/  \ntmortagne - (19:49): it's hard to have one big mechanism, at least impossible to have that in the current xwiki.properties format  \ntmortagne - (19:51): also one big configuration file is not really following the standards  \ntmortagne - (19:51): look at apache httpd  \ncjdelisle - (19:51): We can't have the old xwiki.cfg defer to the ConfigurationSource?  \ncjdelisle - (19:52): A lot of our users are not running MediaWiki just because Apache was too hard to install.  \ncjdelisle - (19:54): I suppose it's possible the configuration template to generate a .zip file.  \njvdrean joined #xwiki at 19:57  \ntmortagne - (19:59): \"the\" ConfigurationSource does not exists, there is plenty of ConfigurationSource  \ntmortagne - (19:59): xwiki.cfg could be one ConfigurationSource but it does not change anything  \ncjdelisle - (20:01): the ConfigurationSource meaning the ConfigurationSource component.  \nsdumitriu left at 20:06 (Quit: Leaving.  \njose\\_\\_ joined #xwiki at 20:15  \nsdumitriu joined #xwiki at 20:16  \ntmortagne left #xwiki at 20:19  \njvelo joined #xwiki at 20:24  \njvelo left at 20:29 (Ping timeout: 272 seconds  \njvelo joined #xwiki at 20:41  \nflorinciu1 joined #xwiki at 20:59  \nrrodriguez joined #xwiki at 21:11  \nlucaa left at 21:20 (Quit: Leaving.  \nsdumitriu - (21:32): Quick check  \nsdumitriu - (21:33): abusenius, jvdrean: ready for the release?  \nsdumitriu - (21:33): sburjan`: Did you test a bit a recent trunk build?  \njvdrean - (21:34): sdumitriu: not ready, were you planning to release tonight ? I can commit my stuff tomorrow before noon  \nabusenius - (21:35): sdumitriu: from my side yes  \nsdumitriu - (21:35): jvdrean: No, tomorow  \nsburjan` - (21:44): sdumitriu : yu mean the latest 2.5 snapshot ?  \nsdumitriu - (21:44): Not THE latest, a recent enough one (yesterday, today)  \nsburjan` - (21:44): nop  \nsburjan` - (21:44): only the snaps from last week  \nsburjan` - (21:45): but tomorrow morning I'll test  \nsburjan` - (21:45): I was busy with the 2.4.3 testing  \nsburjan` - (21:45): tonowwor at first hour I'll test latest snap  \nsburjan` - (21:45): \\*tomorrow  \njvdrean left at 22:02 (Quit: Leaving.  \njvdrean joined #xwiki at 22:07  \njvdrean left at 22:09 (Client Quit  \nflorinciu1 left at 22:32 (Read error: Connection reset by peer  \nlucaa joined #xwiki at 22:40  \njose\\_\\_ left at 23:23 (Ping timeout: 252 seconds  \nDrPoO left at 23:26 (Remote host closed the connection  \n\n"}