{"id": "dev:IRC.xwikiArchive20111026", "url": "https://dev.xwiki.org/xwiki/bin/view/IRC/xwikiArchive20111026", "title": "IRC Archive for channel #xwiki - XWiki", "collection": "Eval-Large", "mimetype": "text/markdown", "language": "en", "content": "\n00:02\u00a0<fmancinelli>\u00a0has quit  \n01:26\u00a0<rrodriguez>\u00a0has joined #xwiki  \n01:47\u00a0<rrodriguez>\u00a0has quit  \n03:32\u00a0<cjdelisl1>\u00a0has quit  \n07:00\u00a0<Denis2>\u00a0has joined #xwiki  \n07:03\u00a0<Denis>\u00a0has quit  \n07:44\u00a0<mflorea>\u00a0has joined #xwiki  \n07:45\u00a0<rrodriguez>\u00a0has joined #xwiki  \n07:49\u00a0<rrodriguez>\u00a0has quit  \n08:20\u00a0<vmassol>\u00a0has joined #xwiki  \n08:35\u00a0<tekzilla>\u00a0has quit  \n08:40\u00a0<tekzilla>\u00a0has joined #xwiki  \n09:01\u00a0<vmassol>\u00a0sdumitriu: when you get a few minutes, could you do the new model move from contrib to a branch on platform?  \n09:01\u00a0<vmassol>\u00a0(good morning)  \n09:20\u00a0<Denis2>\u00a0is now known as <Denis>  \n09:30\u00a0<tmortagne>\u00a0has joined #xwiki  \n09:34\u00a0<cjdelisle>\u00a0has joined #xwiki  \n09:44\u00a0<+tmortagne>\u00a0cjdelisle: just gave you admin right on github xwiki org  \n09:45\u00a0<@cjdelisle>\u00a0cool thanks  \n09:46\u00a0<@cjdelisle>\u00a0just upgraded to wheezy/kernel-3.0.0, not much has changed but it feels a lot nicer :)  \n09:47\u00a0<+tmortagne>\u00a0that's testing debian right ?  \n09:51\u00a0<@cjdelisle>\u00a0yup  \n09:52\u00a0<@cjdelisle>\u00a0someone told me that debian lags behind everyone else so testing = stable  \n09:52\u00a0<+tmortagne>\u00a0ok good to know debian \u00a0is close when I will get really tired of ubuntu ;)  \n09:52\u00a0<@cjdelisle>\u00a0I usually run unstable experimental everything anyway  \n09:53\u00a0<+tmortagne>\u00a0yea I used to be a debian unstable before moving to ubuntu but there was too many bad surprises that time  \n09:54\u00a0<@cjdelisle>\u00a0I think unstable is the trunk and testing is the latest non-dev branch  \n09:58\u00a0<jvelociter>\u00a0has joined #xwiki  \n09:58\u00a0<jvelociter>\u00a0has quit  \n09:59\u00a0<jvelociter>\u00a0has joined #xwiki  \n10:01\u00a0<jvelociter>\u00a0has quit  \n10:02\u00a0<cjdelisle>\u00a0has quit  \n10:02\u00a0<jvelociter>\u00a0has joined #xwiki  \n10:16\u00a0<sburjan>\u00a0has joined #xwiki  \n10:17\u00a0<jvelociter>\u00a0has quit  \n10:24\u00a0<+sburjan>\u00a0good morning  \n10:32\u00a0<jvelociter>\u00a0has joined #xwiki  \n10:38\u00a0<vmassol>\u00a0good morning sburjan  \n10:45\u00a0<+sburjan>\u00a0vmassol: wasn't more simpler to use the jira macro on http://enterprise.xwiki.org/xwiki/bin/view/Main/Roadmap ?  \n10:46\u00a0<vmassol>\u00a0sure  \n10:46\u00a0<vmassol>\u00a0I didn't use anything, it was a copy paste from elsewhere  \n10:46\u00a0<vmassol>\u00a0but yes I agree  \n10:46\u00a0<vmassol>\u00a0(if it's performant)  \n10:47\u00a0<+sburjan>\u00a0it should be, there are not a lot of issues on the page.  \n10:48\u00a0<+sburjan>\u00a0vmassol: http://www.xwiki.org/xwiki/bin/view/TestReports/JiraMacro2 this should fit our needs  \n10:50\u00a0<+sburjan>\u00a0or if not, we could use http://www.xwiki.org/xwiki/bin/view/TestReports/JiraMacro to simply generate a link to the jira issue more easily  \n10:52\u00a0<vmassol>\u00a0sburjan: re JiraMacro2, are the results cached? because otherwsie that's going to send a JIRA request per usage right?  \n10:52\u00a0<vmassol>\u00a0ah no  \n10:52\u00a0<vmassol>\u00a0it's grouped in a single request right?  \n10:53\u00a0<+sburjan>\u00a0yes, jira2 are grouped in a single macro block  \n10:55\u00a0<+sburjan>\u00a0vmassol: but if I have time, I could create a macro that makes the display very similar to the table layout we have now  \n10:56\u00a0<vmassol>\u00a0sburjan: I think we already have this on extensions.xwiki.org  \n10:56\u00a0<vmassol>\u00a0but yes would be great to have the status updated automaitcally :)  \n10:56\u00a0<+sburjan>\u00a0yes, it would be great. but afaik we don't have t hat on extensions  \n10:57\u00a0<+sburjan>\u00a0vmassol: then, a new macro will be born on xwiki.org when I will have some time.. maybe today a little bit later  \n10:57\u00a0<+sburjan>\u00a0;)  \n10:57\u00a0<vmassol>\u00a0ok ;)  \n10:57\u00a0<+sburjan>\u00a0vmassol: I will ping you when it's done ;)  \n10:57\u00a0<vmassol>\u00a0ok  \n10:57\u00a0<vmassol>\u00a0thanks  \n11:35\u00a0<irssi>\u00a0has joined #xwiki  \n11:35\u00a0<irssi>\u00a0is now known as <cjdelisle>  \n12:06\u00a0<fmancinelli>\u00a0has joined #xwiki  \n12:09\u00a0<lucaa>\u00a0has joined #xwiki  \n12:25\u00a0<jvelociter>\u00a0has quit  \n13:23\u00a0<mflorea>\u00a0has quit  \n13:29\u00a0<vmassol>\u00a0sburjan: a simple solution would be:  \n13:29\u00a0<vmassol>\u00a0{{cache}}  \n13:29\u00a0<vmassol>\u00a0{{jira}}  \n13:29\u00a0<vmassol>\u00a0|XWIKI-1000|additional notes here  \n13:29\u00a0<vmassol>\u00a0|XWIKI-1200|additional notes here  \n13:29\u00a0<vmassol>\u00a0...  \n13:29\u00a0<vmassol>\u00a0{{/jira}}  \n13:29\u00a0<vmassol>\u00a0{{/cache}}  \n13:30\u00a0<vmassol>\u00a0and this would generate a table with several columns: jira issue type, jira id, assigned person, status, additional notes  \n13:30\u00a0<+sburjan>\u00a0vmassol: yes, I know, but the main issue is that after each modification, you have to change t he cahce id  \n13:30\u00a0<vmassol>\u00a0no  \n13:30\u00a0<vmassol>\u00a0the point of the cache is to cache  \n13:30\u00a0<vmassol>\u00a0it caches for 5 minutes by default which is very fine  \n13:31\u00a0<+sburjan>\u00a0wel If I have a cached block, edit it and save and view, I won't get the modifications if I don't changethe cache id  \n13:31\u00a0<vmassol>\u00a0yes  \n13:31\u00a0<+sburjan>\u00a0I have to wait for 5 minutes ?  \n13:31\u00a0<vmassol>\u00a0I don't see a problem  \n13:31\u00a0<+sburjan>\u00a0my problem is that after saving I don't get the updated version in view mode  \n13:31\u00a0<vmassol>\u00a0how is that a problem?  \n13:31\u00a0<vmassol>\u00a0that' sthe point of a cache  \n13:31\u00a0<vmassol>\u00a0:)  \n13:32\u00a0<vmassol>\u00a0if you don't do this then you don't have a cache  \n13:32\u00a0<+sburjan>\u00a0well I'd like to have t he latest modified version displayed in view mode :)  \n13:32\u00a0<vmassol>\u00a0then it's not a cache  \n13:32\u00a0<vmassol>\u00a0it's live  \n13:32\u00a0<vmassol>\u00a0the point of a cache is to not make it live  \n13:32\u00a0<vmassol>\u00a0and thus to improve the perfomances  \n13:32\u00a0<+sburjan>\u00a0so in theory after 5 minutes the changes should kick in \u00a0?  \n13:33\u00a0<vmassol>\u00a0in practice too  \n13:33\u00a0<vmassol>\u00a0:)  \n13:33\u00a0<+sburjan>\u00a0ok. I never waited 5 minutes :)  \n13:33\u00a0<+sburjan>\u00a0I'll try it out :D  \n13:33\u00a0<vmassol>\u00a0the important part is that the syntax in the jira macro  \n13:33\u00a0<vmassol>\u00a0using a table makes it easy to add more column and makes it very easy to parse  \n13:34\u00a0<vmassol>\u00a0(using our wiki syntax parser and XDOM)  \n13:34\u00a0<vmassol>\u00a0takes 2-4 lines of code  \n13:34\u00a0<vmassol>\u00a0(groovy code)  \n13:34\u00a0<+sburjan>\u00a0so you suggest I integrate the table in the JIRA macro, right ?  \n13:34\u00a0<+sburjan>\u00a0(I was about to propose the same thin)  \n13:34\u00a0<+sburjan>\u00a0\\*thing  \n13:34\u00a0<vmassol>\u00a0it's just a format to define data  \n13:34\u00a0<vmassol>\u00a0but the same format as our wiki syntax so that we can reuse our existing parser  \n13:35\u00a0<vmassol>\u00a0the columns to be displayed can be configured as macro parameters if need be  \n13:35\u00a0<vmassol>\u00a0columns=\"type,id,assigned,notes\" etc  \n13:35\u00a0<vmassol>\u00a0but for a first version you don't even need that, we can have fixed columns  \n13:37\u00a0<vmassol>\u00a0and if you specify a JQL query in parameter then the macro content could be ignored  \n13:37\u00a0<vmassol>\u00a0to make it a multi purpose macro  \n13:38\u00a0<+sburjan>\u00a0yes, I won't be able to do this today. I can try to make the Tabeled JIRA Macro, but not with params  \n13:38\u00a0<vmassol>\u00a0np, the params are a nobrainer, takes 5 mn  \n13:38\u00a0<+sburjan>\u00a0okay. Let me finish with a thing I'm on and I will start working on the macro.ttyl .. ETA 2-3 hours  \n13:39\u00a0<vmassol>\u00a0ok ask if you need help for the XDOM manipulation it's real easy  \n13:39\u00a0<vmassol>\u00a0(when you know)  \n13:40\u00a0<vmassol>\u00a0how do you do a single jira query? you create a JQL out of the discrete jira id specified?  \n13:41\u00a0<vmassol>\u00a0(sburjan)  \n13:41\u00a0<vmassol>\u00a0hmm not sure that will work actually  \n13:41\u00a0<vmassol>\u00a0since JQL is about returning jira ids, not their details  \n13:42\u00a0<+sburjan>\u00a0vmassol: no, for querying JIRA I have another macro, but not ported on xwiki.org  \n13:42\u00a0<vmassol>\u00a0that's not my question  \n13:42\u00a0<vmassol>\u00a0my question is about perf  \n13:42\u00a0<+sburjan>\u00a0I simlpy access JIRA and request the response in XML format. From that, I parse the XML and I get all I need. This is how the current macro works. No auth, no nothing  \n13:43\u00a0<vmassol>\u00a0REST? xmlrpc? soap?  \n13:44\u00a0<+sburjan>\u00a0none. URL based  \n13:44\u00a0<+sburjan>\u00a0\u00a0def url = \"http://jira.xwiki.org/jira/si/jira.issueviews:issue-xml/${id}/${id}.xml\"  \n13:44\u00a0<vmassol>\u00a0ok that' s a single jira  \n13:44\u00a0<vmassol>\u00a0my question is how do you batch this  \n13:44\u00a0<+sburjan>\u00a0yepp  \n13:45\u00a0<vmassol>\u00a0otherwise it's very very unperformanty  \n13:45\u00a0<+sburjan>\u00a0let me check if I can find it  \n13:45\u00a0<vmassol>\u00a0so the question is whether jira has a way to express several issues in a single URL  \n13:46\u00a0<+sburjan>\u00a0it has, but if generate a query permalink  \n13:46\u00a0<+sburjan>\u00a0I have created such a macro also :)  \n13:46\u00a0<+sburjan>\u00a0let me find it  \n13:47\u00a0<vmassol>\u00a0I need to document this btw in the jira integration (since you haven't done it, bad! :))  \n13:47\u00a0<vmassol>\u00a0I'll do it  \n13:47\u00a0<vmassol>\u00a0I'll put this information here: http://extensions.xwiki.org/xwiki/bin/view/Extension/JIRA+Integration  \n13:47\u00a0<+sburjan>\u00a0seems my macro doesn't work with the new jira :(  \n13:47\u00a0<vmassol>\u00a0(later this afternoon)  \n13:48\u00a0<+sburjan>\u00a0but the main idea is here:  \n13:48\u00a0<+sburjan>\u00a0def hardcodedURLPortion = \"http://jira.xwiki.org/jira/sr/jira.issueviews:searchrequest-xml/temp/SearchRequest.xml?jqlQuery=\"  \n13:48\u00a0<+sburjan>\u00a0def fullURL = \u00a0hardcodedURLPortion + macroContentURLEscaped;  \n13:48\u00a0<+sburjan>\u00a0where macroContentURLEscaped is the JQL query  \n13:49\u00a0<gsauthier>\u00a0has joined #xwiki  \n13:49\u00a0<gsauthier>\u00a0Hi all  \n13:50\u00a0<gsauthier>\u00a0I have an issue using macros  \n13:51\u00a0<gsauthier>\u00a0When rendering I got a \"Nested scripts not allowed\" exception  \n13:52\u00a0<gsauthier>\u00a0Is there a way to workaround this ?  \n13:52\u00a0<gsauthier>\u00a0A little bit of context:  \n13:52\u00a0<+tmortagne>\u00a0this mean you have a script macro generated by another script macro  \n13:52\u00a0<+tmortagne>\u00a0the way to workaround that is to not do that :)  \n13:53\u00a0<gsauthier>\u00a0I wanted to create a Panel displaying twitter feed (using Vincent's macro example)  \n13:53\u00a0<+tmortagne>\u00a0but it depends on you use case  \n13:53\u00a0<+sburjan>\u00a0vmassol: maybe we will have a call a little bit later, I'd like that  \n13:53\u00a0<vmassol>\u00a0sburjan: ok  \n13:53\u00a0<gsauthier>\u00a0looking at how are done panel now, it is based on a velocity macro  \n13:53\u00a0<gsauthier>\u00a0but vmassol's example is a groovy script  \n13:54\u00a0<gsauthier>\u00a0and I tend to prefer groovy ;)  \n13:54\u00a0<fmancinelli>\u00a0has quit  \n13:54\u00a0<gsauthier>\u00a0so, at first I tried to have {{velocity}}#panelheader('blabla'){{/velocity}} {{groovy}} ... and finishing with a #panelfooter in velocity  \n13:55\u00a0<gsauthier>\u00a0At this point, no exceptions, but the rendering is wrong  \n13:55\u00a0<gsauthier>\u00a0since velocity #panelheader open some <div> (that will be closed in #panelfooter)  \n13:56\u00a0<gsauthier>\u00a0So, I decided to have a {{panel}} macro with a content  \n13:56\u00a0<gsauthier>\u00a0code is quite simple  \n13:58\u00a0<gsauthier>\u00a0http://paste2.org/p/1739660  \n13:58\u00a0<gsauthier>\u00a0so far so good  \n13:58\u00a0<gsauthier>\u00a0but when I'm actually using this macro, with a content that is itself a macro, boum  \n13:59\u00a0<gsauthier>\u00a0now you should understand better what i want to achieve :)  \n13:59\u00a0<gsauthier>\u00a0any advises ?  \n14:02\u00a0<gsauthier>\u00a0I was actually wondering why panels where not available as macro ... looked easy to do ...  \n14:03\u00a0<+lucaa>\u00a0gsauthier: wdym boum?  \n14:04\u00a0<gsauthier>\u00a0lucaa: \"Nested scripts not allowed\" exception  \n14:04\u00a0<+lucaa>\u00a0well, that's more like it  \n14:04\u00a0<+lucaa>\u00a0it means you cannot have a script macro that endsup calling a script macro  \n14:04\u00a0<gsauthier>\u00a0tmortagne: the solution I see is to abandon the panel macro idea (which was appealing) an rewrite all the panel logic in my panel to avoid macro \"recursivity\"  \n14:05\u00a0<gsauthier>\u00a0but that is causing code duplication since I cannot reuse the #panelheader and #panelfooter  \n14:06\u00a0<+lucaa>\u00a0or, when you call your panel macro, you make sure you don't call it in a script macro  \n14:06\u00a0<+lucaa>\u00a0where are you using the panel macro/  \n14:06\u00a0<+lucaa>\u00a0?  \n14:06\u00a0<gsauthier>\u00a0in fact, this is the content of the panel macro that may have scripts inside  \n14:06\u00a0<+lucaa>\u00a0ah right  \n14:07\u00a0<gsauthier>\u00a0lucaa: \"where are you using the panel macro ?\" I don't understand  \n14:08\u00a0<+lucaa>\u00a0it's a wiki syntax macro, you must be calling it someplace  \n14:08\u00a0<+lucaa>\u00a0but it doesn't matter because the issue is caused by what you actually can have in the panel content  \n14:08\u00a0<+lucaa>\u00a0\\* in the macro content  \n14:09\u00a0<gsauthier>\u00a0oh, in my Panels.PanelClass instance  \n14:10\u00a0<gsauthier>\u00a0So, ATM, if I don't want to duplicate the header/footer logic in my panel, I have to stick to velocity only ?  \n14:11\u00a0<gsauthier>\u00a0AFAIU, vmassol twitter example is tight to groovy since it's using the @Grab annotation to link twitter4j jars  \n14:17\u00a0<+lucaa>\u00a0velocity is script also  \n14:17\u00a0<+lucaa>\u00a0it will cause the nested scripts error as well  \n14:18\u00a0<gsauthier>\u00a0Sure  \n14:19\u00a0<+lucaa>\u00a0you stick with velocity for your code and you use #panelheader and #panelfooter  \n14:19\u00a0<gsauthier>\u00a0Hardcore solution is to have a separate rendering pass of the macro content using the XWiki rendering API in the panel macro :)  \n14:19\u00a0<gsauthier>\u00a0Is it only feasible ?  \n14:19\u00a0<+lucaa>\u00a0i'm not sure you'll not get the script error  \n14:19\u00a0<+lucaa>\u00a0another option is to write a java macro  \n14:20\u00a0<+lucaa>\u00a0in which case you don't use groovy  \n14:20\u00a0<+lucaa>\u00a0java macro as in component in a jar on the filesystem of your install  \n14:20\u00a0<gsauthier>\u00a0Are java macro usable as classic xwiki macros ?  \n14:20\u00a0<gsauthier>\u00a0{{my-java-macro /}}  \n14:21\u00a0<+lucaa>\u00a0well, that's a wiki syntax macro  \n14:21\u00a0<+lucaa>\u00a0which can be defined in 2 ways:  \n14:21\u00a0<+lucaa>\u00a0by having a java component that implements the Macro role  \n14:21\u00a0<+lucaa>\u00a0or by writing an object in a page  \n14:21\u00a0<gsauthier>\u00a0Is there some doc / example of this ?  \n14:21\u00a0<+lucaa>\u00a0if you want, the object in a page is the \"helper\"  \n14:21\u00a0<+lucaa>\u00a0the standard way is the java  \n14:21\u00a0<+lucaa>\u00a0lemme find it  \n14:22\u00a0<+lucaa>\u00a0http://platform.xwiki.org/xwiki/bin/view/DevGuide/WritingMacros  \n14:25\u00a0<gsauthier>\u00a0Thanks  \n14:26\u00a0<gsauthier>\u00a0Ok so at this point, in the Java panel macro, I can access the raw content, the parameters  \n14:27\u00a0<gsauthier>\u00a0I can also generate the header/footer blocks (they should not have any MacroBlock inside)  \n14:28\u00a0<gsauthier>\u00a0And I render the content using the XWiki rendering API in a simple Block ?  \n14:28\u00a0<gsauthier>\u00a0ok, more clearly, the question is: can this macro output some MacroBlock elements ?  \n14:28\u00a0<gsauthier>\u00a0if I do so, will that result in the same nested... exception ?  \n14:32\u00a0<mflorea>\u00a0has joined #xwiki  \n14:39\u00a0<jvelociter>\u00a0has joined #xwiki  \n14:40\u00a0<gsauthier>\u00a0Experience will tell me :)  \n14:48\u00a0<+lucaa>\u00a0gsauthier: yes, it can output macro block  \n14:57\u00a0<gsauthier>\u00a0lucaa: thanks, I'll try that  \n14:58\u00a0<gsauthier>\u00a0lucaa: as I need to output a List<Block>, do you know how i can represent the (% class=\"...\" %) that I have in my wiki ?  \n14:59\u00a0<+lucaa>\u00a0you do Block.setParameter or something like that  \n14:59\u00a0<gsauthier>\u00a0I didn't find any good candidate in all the Block implementations  \n14:59\u00a0<+lucaa>\u00a0to the block taht you want the parameters to be set on  \n14:59\u00a0<gsauthier>\u00a0hmmm ok  \n14:59\u00a0<+lucaa>\u00a0that is the block in front of which you had the (%%) in the wiki syntax  \n14:59\u00a0<gsauthier>\u00a0understood  \n15:01\u00a0<gsauthier>\u00a0does this list of Block needs to be fully parsed ?  \n15:01\u00a0<gsauthier>\u00a0forgot it ... as I have to use the rendering engine  \n15:02\u00a0<gsauthier>\u00a0I will output a RawBlock or something like this  \n15:22\u00a0<+tmortagne>\u00a0gsauthier: note macro in wiki pages are emulated java macros in practice so you can do everything you can do in wiki macro in java and even more (typed parameters etc.)  \n15:47\u00a0<sburjan>\u00a0has quit  \n15:49\u00a0<sburjan>\u00a0has joined #xwiki  \n15:55\u00a0<gsauthier>\u00a0tmortagne: so the restriction on nested macro applies too ?  \n15:57\u00a0<+tmortagne>\u00a0gsauthier: nested scrip macro restriction is applied in script macro it does not have anything to do with the fact that you are writing a wiki or a java macro  \n15:58\u00a0<+tmortagne>\u00a0but in java macro you don't need scripting since you are in java unless the point of you macro is to executed some scrip  \n15:58\u00a0<+tmortagne>\u00a0script  \n15:58\u00a0<gsauthier>\u00a0ok understood  \n15:58\u00a0<gsauthier>\u00a0new questions :)  \n15:58\u00a0<+tmortagne>\u00a0sure  \n15:58\u00a0<gsauthier>\u00a0I did my little Java macro for panel  \n15:59\u00a0<gsauthier>\u00a0quite simple  \n16:00\u00a0<gsauthier>\u00a0http://paste2.org/p/1739849  \n16:01\u00a0<gsauthier>\u00a0As the archetypes provided me with a ready to use testing environment, I decide to use it  \n16:01\u00a0<gsauthier>\u00a0That never works the first time .... :)  \n16:01\u00a0<+tmortagne>\u00a0yea well plus the fact that the archetype is not always perfectly up to date  \n16:02\u00a0<gsauthier>\u00a0What I get is an error that says that the \"html\" macro is not in the list of registered macros  \n16:02\u00a0<+tmortagne>\u00a0you need html macro ?  \n16:02\u00a0<gsauthier>\u00a0how can I configure the test env to register the html macro ?  \n16:02\u00a0<gsauthier>\u00a0I'm simply copying what is done in #panelheader  \n16:02\u00a0<+tmortagne>\u00a0you don't need to setup anything in the test, just add html macro as test dependency in your pom.xml  \n16:03\u00a0<vmassol>\u00a0gsauthier: the archetype should work. I'll test it again  \n16:03\u00a0<gsauthier>\u00a0you know the groupId and artifactId ?  \n16:03\u00a0<+tmortagne>\u00a0it will automatically be regsitered (as any component)  \n16:03\u00a0<+tmortagne>\u00a0group: org.xwiki.platform  \n16:03\u00a0<vmassol>\u00a0gsauthier: that macro could be improved a lot  \n16:03\u00a0<vmassol>\u00a0you shouldn't use HTML in it  \n16:03\u00a0<gsauthier>\u00a0vmassol: Sorry for the misunderstanding, the archetype works. It's passing my tests that never works the 1st time ;)  \n16:04\u00a0<vmassol>\u00a0ah ok ;)  \n16:04\u00a0<vmassol>\u00a0I prefer that!  \n16:04\u00a0<gsauthier>\u00a0hehe  \n16:04\u00a0<+tmortagne>\u00a0artifact: xwiki-platform-rendering-macro-html I think  \n16:04\u00a0<+tmortagne>\u00a0checking  \n16:04\u00a0<+tmortagne>\u00a0a no  \n16:04\u00a0<+tmortagne>\u00a0it's in rendering  \n16:05\u00a0<vmassol>\u00a0tmortagne: I think it would be better not to use hte html macro  \n16:05\u00a0<gsauthier>\u00a0vmassol: I shouldn't use {{html}}, so I have to write html code by hand ?  \n16:05\u00a0<vmassol>\u00a0you can use Blocks  \n16:05\u00a0<gsauthier>\u00a0ah ok  \n16:05\u00a0<+tmortagne>\u00a0vmassol: it's always better not to use it, i did not looked what gsauthier was doing in his macro  \n16:05\u00a0<vmassol>\u00a0for example for a h1 you'd use  \n16:05\u00a0<gsauthier>\u00a0click on the link to see :)  \n16:05\u00a0<vmassol>\u00a0a HeaderBlock level 1  \n16:06\u00a0<+tmortagne>\u00a0gsauthier: the point of java macro is to directly create Block objects and unless you really need it to be html not supported by standard block you should not use html macro  \n16:06\u00a0<gsauthier>\u00a0Ok, i'll try with pure Block processing :)  \n16:06\u00a0<vmassol>\u00a0if you use HTML macro then it uses a RawBlock which is opaque for renderers  \n16:06\u00a0<vmassol>\u00a0(except for the HTML renderer obviously ;))  \n16:07\u00a0<vmassol>\u00a0also some people forbid the usage of the HTML macro in their wiki for security reasons  \n16:08\u00a0<+tmortagne>\u00a0in any case the goal of html macro is to put things that are supported only in html and not in XDOM/wiki syntax  \n16:08\u00a0<vmassol>\u00a0btw gsauthier we also provide some convenience methods for parsing wiki syntax inside macros  \n16:08\u00a0<+tmortagne>\u00a0it's not just about java macro but for wiki pages too  \n16:09\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0/\\*\\*  \n16:09\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\\* The parser used to parse macro content.  \n16:09\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\\*/  \n16:09\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0@Inject  \n16:09\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0private MacroContentParser contentParser;  \n16:09\u00a0<vmassol>\u00a0(hmm although just remembered that this is internal ATM ;))  \n16:10\u00a0<gsauthier>\u00a0vmassol: That may be useful for me  \n16:11\u00a0<gsauthier>\u00a0For the moment, i'll stick to the published rendering API, using Parser  \n16:11\u00a0<vmassol>\u00a0yep  \n16:11\u00a0<gsauthier>\u00a0Speaking of tests, what is this .test format ?  \n16:11\u00a0<gsauthier>\u00a0it looks like expectations  \n16:12\u00a0<gsauthier>\u00a0or commands ...  \n16:12\u00a0<+tmortagne>\u00a0gsauthier: you should not hascode Syntax.XWIKI\\_2\\_0.toIdString() if you want you macro to work in any syntax  \n16:12\u00a0<+tmortagne>\u00a0hardcode  \n16:12\u00a0<vmassol>\u00a0gsauthier: it's a test framework we have for rendering which you can use. I think I put an example in the archetype  \n16:12\u00a0<gsauthier>\u00a0Indeed but i have no idea of the content's syntax  \n16:13\u00a0<vmassol>\u00a0unfortunatley we haven't really documented it....  \n16:13\u00a0<gsauthier>\u00a0vmassol: Yep, I found 2 .test examples  \n16:13\u00a0<gsauthier>\u00a0It's just kind of cryptic :)  \n16:15\u00a0<vmassol>\u00a0gsauthier: basically input is an input, the part after is the parser hint  \n16:15\u00a0<vmassol>\u00a0expect is the expectation with the part after being the renderer hint  \n16:15\u00a0<+tmortagne>\u00a0gsauthier:  \n16:15\u00a0<+tmortagne>\u00a0Syntax currentSyntax = context.getSyntax();  \n16:15\u00a0<+tmortagne>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MacroBlock currentMacroBlock = context.getCurrentMacroBlock();  \n16:15\u00a0<+tmortagne>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (currentMacroBlock != null) {  \n16:15\u00a0<+tmortagne>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MetaDataBlock metaDataBlock =  \n16:15\u00a0<+tmortagne>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0currentMacroBlock.getFirstBlock(new MetadataBlockMatcher(MetaData.SYNTAX), Axes.ANCESTOR\\_OR\\_SELF);  \n16:15\u00a0<+tmortagne>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (metaDataBlock != null) {  \n16:15\u00a0<+tmortagne>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0currentSyntax = (Syntax) metaDataBlock.getMetaData().getMetaData(MetaData.SYNTAX);  \n16:15\u00a0<+tmortagne>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n16:15\u00a0<+tmortagne>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n16:15\u00a0<+tmortagne>\u00a0that's the code in DefaultMacroContentParser actually  \n16:15\u00a0<gsauthier>\u00a0I think i got it, the other sections are what is expected given a hint: what xhtml output is expected, ....  \n16:16\u00a0<vmassol>\u00a0the test framework takes each input it finds, parses them, then compares the result with all the expect found  \n16:16\u00a0<+tmortagne>\u00a0did not know it was internal  \n16:16\u00a0<+tmortagne>\u00a0we need some helper to get the current syntaxe which is not internal  \n16:16\u00a0<vmassol>\u00a0tmortagne: we could decide not to make it internal also  \n16:17\u00a0<+tmortagne>\u00a0yep IMO there is no reason for it to be internal  \n16:17\u00a0<gsauthier>\u00a0a Groupblock produces a <div> in xhtml ?  \n16:17\u00a0<vmassol>\u00a0it was just to be on the safe side  \n16:17\u00a0<+tmortagne>\u00a0gsauthier: yep  \n16:17\u00a0<vmassol>\u00a0till we were sure it's the right thing to do  \n16:17\u00a0<gsauthier>\u00a0thx  \n16:37\u00a0<+sburjan>\u00a0vmassol: @round ?  \n16:38\u00a0<vmassol>\u00a0sburjan: yep, I need 10 more minutes, ok?  \n16:39\u00a0<+sburjan>\u00a0vmassol: me too, great :)  \n16:49\u00a0<gsauthier>\u00a0using HeaderBlock makes the code more readable, but when rendered as XHTML, it add a <span> and a wikigeneratedheader style  \n16:50\u00a0<gsauthier>\u00a0How can I ensure that my HeaderBlock wrapping a WordBlock will outout a simple <h1 class=\"my-class\">hello</div> ??  \n16:50\u00a0<gsauthier>\u00a0output  \n16:51\u00a0<gsauthier>\u00a0oups </h1>  \n16:52\u00a0<gsauthier>\u00a0BTW, does a HeaderBlock needs to be itself wrapped in a SectionBlock ?  \n16:52\u00a0<gsauthier>\u00a0In my case, it is child of a GroupBlock  \n16:58\u00a0<jvelociter1>\u00a0has joined #xwiki  \n17:01\u00a0<jvelociter>\u00a0has quit  \n17:03\u00a0<vmassol>\u00a0gsauthier: is it really important not to have a span?  \n17:03\u00a0<vmassol>\u00a0(it's done on purpose)  \n17:03\u00a0<vmassol>\u00a0if it is it means you want to use a \"simplified\" HTML renderer  \n17:04\u00a0<vmassol>\u00a0(which we don't provide since we didn't have the need)  \n17:04\u00a0<vmassol>\u00a0we already provide 2 HTML renderers but not this one ;)  \n17:05\u00a0<vmassol>\u00a0(actually you could override the XHTMLLinkRenderer component implementation with your version)  \n17:06\u00a0<vmassol>\u00a0(actually DefaultXHTMLLinkTypeRenderer to be more precise)  \n17:07\u00a0<vmassol>\u00a0wait  \n17:07\u00a0<vmassol>\u00a0I'm looking at the wrong code  \n17:08\u00a0<vmassol>\u00a0actually  \n17:08\u00a0<vmassol>\u00a0we could remove this span now  \n17:08\u00a0<vmassol>\u00a0:)  \n17:08\u00a0<vmassol>\u00a0here' s what the code says:  \n17:08\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// We generate a span so that CSS rules have a hook to perform some magic that wouldn't work on just a H  \n17:08\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// element. Like some IE6 magic and others.  \n17:08\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getXHTMLWikiPrinter().printXMLStartElement(\"span\");  \n17:08\u00a0<vmassol>\u00a0I think it was for IE6 styling  \n17:08\u00a0<vmassol>\u00a0since we've just dropped IE6 support we could remove it....  \n17:11\u00a0<gsauthier>\u00a0vmassol: I don't really care about the span :)  \n17:11\u00a0<gsauthier>\u00a0It's just that i'm not used to have a span inside a h1  \n17:11\u00a0<vmassol>\u00a0ok, at least you know why we have it...  \n17:12\u00a0<gsauthier>\u00a0:)  \n17:12\u00a0<gsauthier>\u00a0test pass :)  \n17:12\u00a0<gsauthier>\u00a0thx  \n17:12\u00a0<+sburjan>\u00a0vmassol: I have to leave for home. Can we talk from tehre, or have a meeting tomorrow morning ?  \n17:12\u00a0<gsauthier>\u00a0now I have to try with a content that is not null :)  \n17:12\u00a0<vmassol>\u00a0sburjan: ping me when you're there  \n17:12\u00a0<vmassol>\u00a0(we can decide then)  \n17:12\u00a0<gsauthier>\u00a0come back after a coffe pause :)  \n17:13\u00a0<+sburjan>\u00a0vmassol: deal ;)  \n17:26\u00a0<sburjan>\u00a0has quit  \n17:48\u00a0<gsauthier>\u00a0I think I found a small typo in org.xwiki.rendering.internal.renderer.event.EventsChainingRenderer#endDocument  \n17:49\u00a0<vmassol>\u00a0where?  \n17:49\u00a0<gsauthier>\u00a0All other methods are using getPrinter().println() where getPrinter().print() is used in endDocument()  \n17:49\u00a0<vmassol>\u00a0yep  \n17:49\u00a0<vmassol>\u00a0done on purpose  \n17:49\u00a0<gsauthier>\u00a0so I got a concatened output in the test  \n17:50\u00a0<vmassol>\u00a0it's the last call  \n17:50\u00a0<gsauthier>\u00a0So I have to live with a line like this in my test: endDocument [[syntax]=[XWiki 2.0]]endGroup [[class]=[xwikipanelcontents]] ?  \n17:50\u00a0<vmassol>\u00a0what's wrong?  \n17:51\u00a0<vmassol>\u00a0it's a choice really  \n17:51\u00a0<gsauthier>\u00a0ok  \n17:51\u00a0<vmassol>\u00a0whether a test ends with a NL or not  \n17:51\u00a0<vmassol>\u00a0ah wait  \n17:51\u00a0<vmassol>\u00a0there's a prpoblem  \n17:51\u00a0<gsauthier>\u00a0in fact the Parser provides me with somekind of DocumentBlock, right ?  \n17:51\u00a0<vmassol>\u00a0didn't read fully your example  \n17:51\u00a0<vmassol>\u00a0I think it's wrong  \n17:51\u00a0<vmassol>\u00a0a document should be the top most block  \n17:52\u00a0<vmassol>\u00a0you have it inside a group  \n17:52\u00a0<gsauthier>\u00a0and I have a doc in a doc  \n17:52\u00a0<vmassol>\u00a0I don't think we allow this anymore,  \n17:52\u00a0<gsauthier>\u00a0yep, it's the result of the Parser  \n17:52\u00a0<vmassol>\u00a0there should be only 1 doc  \n17:52\u00a0<vmassol>\u00a0a doc inside a doc is a group inside a document bloc  \n17:52\u00a0<vmassol>\u00a0you need to call getChildren()  \n17:53\u00a0<+tmortagne>\u00a0you should not have a document in a document  \n17:53\u00a0<gsauthier>\u00a0ok, let see what happen :)  \n17:53\u00a0<vmassol>\u00a0parse \u2014> xdom \u2014> xdom.getChildren()  \n17:53\u00a0<+tmortagne>\u00a0you can look at what include macro is doing  \n17:53\u00a0<vmassol>\u00a0we don't yet do XDOM validation but it's planned to do it one day ;)  \n17:54\u00a0<+tmortagne>\u00a0or directly use it if that's what you actually want to do  \n17:54\u00a0<+tmortagne>\u00a0forget that  \n17:54\u00a0<+tmortagne>\u00a0XDOM is meant to be the top Block, always  \n17:54\u00a0<gsauthier>\u00a0thats better with getChuildren  \n17:54\u00a0<gsauthier>\u00a0thanks  \n17:55\u00a0<gsauthier>\u00a0I'll now test with a {{groovy}} content  \n17:56\u00a0<+tmortagne>\u00a0note that groovy require a special right to be executed and it's usually impossible to use it in a panel since this right is forbidden  \n17:56\u00a0<gsauthier>\u00a0BTW, would you be interested by such a panel macro ? Personnaly I prefer to handle Java code instead of velocity code :)  \n17:56\u00a0<gsauthier>\u00a0tmortagne: not a good news for me :'(  \n17:57\u00a0<+tmortagne>\u00a0gsauthier: we definitely need a panel macro to replace the old velocity based begin/end used in xwiki/1.0 panels  \n17:57\u00a0<gsauthier>\u00a0any scripts are disallowed in Panels ?  \n17:57\u00a0<+tmortagne>\u00a0any other that velocity which is properly \u00a0protected  \n17:57\u00a0<gsauthier>\u00a0i'll publish the module on github once it's done  \n17:57\u00a0<+tmortagne>\u00a0the issue is that the panel is executed in the context of the current document  \n17:57\u00a0<+tmortagne>\u00a0so with the right of the current document author  \n17:58\u00a0<vmassol>\u00a0gsauthier: yes would be cool to provide a panel macro by default  \n17:58\u00a0<+tmortagne>\u00a0and with groovy you can do whatever you want, includeding executing command on the server  \n17:58\u00a0<+tmortagne>\u00a0which is why only velocity is enabled in panels for now  \n17:59\u00a0<gsauthier>\u00a0tmortagne: ok, so i'm dead with my twitter4j panel ...  \n17:59\u00a0<+tmortagne>\u00a0see http://jira.xwiki.org/browse/XWIKI-6823  \n18:00\u00a0<vmassol>\u00a0there are workarounds I think, tmortagne?  \n18:00\u00a0<+tmortagne>\u00a0no  \n18:00\u00a0<+tmortagne>\u00a0not for panels  \n18:00\u00a0<+tmortagne>\u00a0well  \n18:00\u00a0<+tmortagne>\u00a0there is some non rendering workaround  \n18:00\u00a0<+tmortagne>\u00a0like loading the content of your panel in ajax for example  \n18:00\u00a0<+tmortagne>\u00a0that's generally the chosen colution  \n18:01\u00a0<vmassol>\u00a0(indeed)  \n18:01\u00a0<gsauthier>\u00a0tmortagne: yep  \n18:01\u00a0<vmassol>\u00a0which is a good thing to do anyway I think  \n18:01\u00a0<vmassol>\u00a0so that the panel is not blocking  \n18:01\u00a0<vmassol>\u00a0(when rendering the page)  \n18:01\u00a0<+tmortagne>\u00a0yep if you panels is a bit slow at least it cant slow down the page loading itself  \n18:02\u00a0<gsauthier>\u00a0vmassol: sure, but I'm much more a back-end guy than a UI guy, I was happy to be able to generate all my stuff without touching any javascript ;)  \n18:03\u00a0<+tmortagne>\u00a0other \"solution\" is an iframe :D  \n18:03\u00a0<gsauthier>\u00a0it's probably also harder to test it when javascript come into play  \n18:03\u00a0<+tmortagne>\u00a0yep  \n18:04\u00a0<+tmortagne>\u00a0you can't test that using rendering test framework  \n18:04\u00a0<gsauthier>\u00a0sure  \n18:04\u00a0<gsauthier>\u00a0you can just test that some javascript is generated maybe ?  \n18:04\u00a0<vmassol>\u00a0lucaa: can show you some code  \n18:04\u00a0<+tmortagne>\u00a0even if we start to have a pretty good intergation test framework  \n18:05\u00a0<+lucaa>\u00a0vmassol: code?  \n18:05\u00a0<vmassol>\u00a0for hving a panel that has some js code to get its content  \n18:05\u00a0<+tmortagne>\u00a0gsauthier: well you could but it's generally bad practice to generate js with macro, it's supposed to go in a object in a wiki page  \n18:05\u00a0<+lucaa>\u00a0vmassol: \u00a0ah to somebody else. I understood that I can show you some code...  \n18:05\u00a0<vmassol>\u00a0(to bypass PR issue)  \n18:06\u00a0<gsauthier>\u00a0Anyway, i'll finish my simple tests as-is, I'll publish the code and give you the URL for cloning, asking for feedback  \n18:06\u00a0<+lucaa>\u00a0well the way I did it when I needed it was to create myself a java script service :) (java rox)  \n18:06\u00a0<+lucaa>\u00a0(gsauthier)  \n18:06\u00a0<+lucaa>\u00a0to implement my functionality there and to expose it as a service function  \n18:07\u00a0<+sburjan`>\u00a0vmassol: ping  \n18:07\u00a0<vmassol>\u00a0ah so no js  \n18:07\u00a0<+tmortagne>\u00a0but that work only if you are using velocity  \n18:07\u00a0<vmassol>\u00a0just velcoity macro calling $services.<yourserviceW  \n18:07\u00a0<vmassol>\u00a0sburjan`: pong  \n18:07\u00a0<+lucaa>\u00a0gsauthier: like this http://extensions.xwiki.org/xwiki/bin/view/Extension/Script+Module#HScriptServices \u00a0and then use $services.myservice.dobad()  \n18:08\u00a0<+lucaa>\u00a0in the panel  \n18:08\u00a0<+lucaa>\u00a0tmortagne: script service is accesisble from groovy as well, iirc  \n18:09\u00a0<+tmortagne>\u00a0lucaa: sure but then you need programming right anyway  \n18:09\u00a0<+lucaa>\u00a0ah yeah ( :) )  \n18:09\u00a0<gsauthier>\u00a0:)  \n18:09\u00a0<+tmortagne>\u00a0gsauthier want to use groovy  \n18:09\u00a0<+lucaa>\u00a0in the panel content?  \n18:09\u00a0<+tmortagne>\u00a0yep  \n18:10\u00a0<+lucaa>\u00a0ah well yes, that's a bit unfortunate :( the only solution I see is to write your functionality in a piece of java.  \n18:10\u00a0<gsauthier>\u00a0So for the moment I see 2 separate things:  \n18:10\u00a0<gsauthier>\u00a01. a panel macro written in Java that executes any content  \n18:10\u00a0<gsauthier>\u00a02. my use case: having the content of that panel be a groovy script  \n18:11\u00a0<gsauthier>\u00a0For 1), it's the user's problem if he put some groovy code in the content, XWiki will complain about PR  \n18:12\u00a0<gsauthier>\u00a0For 2) it's my problem, and I suspect i'll have to do some javscript to asynchronously fill the content of my panel  \n18:12\u00a0<gsauthier>\u00a0Probably with an associated Xwiki page that will contains my Groovy code  \n18:13\u00a0<gsauthier>\u00a0... invoked from the javascript  \n18:13\u00a0<+tmortagne>\u00a0yep  \n18:13\u00a0<gsauthier>\u00a0Does all of this looks good ?  \n18:14\u00a0<+tmortagne>\u00a0sounds good, another way the java macro for the general panel look and an ajax call for the content of you specific panel  \n18:14\u00a0<+tmortagne>\u00a0s/another way/said another way/  \n18:15\u00a0<gsauthier>\u00a0Yep, but for a {{panel title=\"A\"}} macro, we need to keep it simple (no JS involved)  \n18:16\u00a0<gsauthier>\u00a0the user just put his content and he is done  \n18:16\u00a0<+tmortagne>\u00a0yep, that's the use who will put some html to execute ajax call as content of the panel  \n18:16\u00a0<gsauthier>\u00a0yep, that was the idea  \n18:17\u00a0<+tmortagne>\u00a0one details: better use /get/ action instead of /view/ in your ajax call  \n18:17\u00a0<gsauthier>\u00a0thanks for the tip  \n18:17\u00a0<gsauthier>\u00a0otherwise you get all the fancy html head body, ... ?  \n18:17\u00a0<+tmortagne>\u00a0yep plus get action is not taken into account by statistics and things like that  \n18:17\u00a0<gsauthier>\u00a0ok  \n18:20\u00a0<gsauthier>\u00a0what is the artifact containing the velocity macro ?  \n18:21\u00a0<+tmortagne>\u00a0gsauthier:  \n18:21\u00a0<+tmortagne>\u00a0https://github.com/xwiki/xwiki-platform/tree/master/xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-macros/xwiki-platform-rendering-macro-velocity  \n18:22\u00a0<+tmortagne>\u00a0org.xwiki.platform:xwiki-platform-rendering-macro-velocity  \n18:22\u00a0<gsauthier>\u00a0thx  \n18:25\u00a0<gsauthier>\u00a0Is it in central ?  \n18:25\u00a0<vmassol>\u00a0nope  \n18:25\u00a0<vmassol>\u00a0only commns and rendering are  \n18:25\u00a0<vmassol>\u00a0this is platform  \n18:26\u00a0<gsauthier>\u00a0ok, I need an additional repository then :)  \n18:26\u00a0<vmassol>\u00a0correct  \n18:26\u00a0<vmassol>\u00a0see http://dev.xwiki.org/xwiki/bin/view/Community/Building  \n18:26\u00a0<gsauthier>\u00a0Do you have a parent POM that I could extends ?  \n18:27\u00a0<vmassol>\u00a0commons-pom is a possibility  \n18:27\u00a0<+tmortagne>\u00a0gsauthier: yep see http://contrib.xwiki.org/xwiki/bin/view/Main/WebHome  \n18:27\u00a0<vmassol>\u00a0xwiki-commons-pom  \n18:27\u00a0<gsauthier>\u00a0thx, adding the repo did the trick  \n18:29\u00a0<gsauthier>\u00a0NPE at initialization time : http://paste2.org/p/1740049  \n18:30\u00a0<gsauthier>\u00a0I just added the macro-velocity artifact as test dependency  \n18:34\u00a0<+tmortagne>\u00a0gsauthier: I think velocity macro require an Execution context which is probably not provided by rendering framework  \n18:35\u00a0<+tmortagne>\u00a0you absolutely need velocity context for you test ?  \n18:35\u00a0<gsauthier>\u00a0No I wanted to have a test case for a macro based content inside my panel  \n18:35\u00a0<gsauthier>\u00a0I'm open to any macro  \n18:35\u00a0<gsauthier>\u00a0:)  \n18:36\u00a0<+tmortagne>\u00a0if it's to validate your panel macro I don't think you really need to test a macro  \n18:36\u00a0<+tmortagne>\u00a0as long as it support any wiki syntax it support macros  \n18:36\u00a0<gsauthier>\u00a0Ok so I have to work on the thing you tell me earlier about the XWiki Syntax  \n18:37\u00a0<abusenius>\u00a0has joined #xwiki  \n18:37\u00a0<+tmortagne>\u00a0I mean just put  \n18:37\u00a0<+tmortagne>\u00a0\\*\\*bold\\*\\*  \n18:37\u00a0<+tmortagne>\u00a0in you test and that should be all you need to validate your macro I think  \n18:37\u00a0<gsauthier>\u00a0Does having the following is sufficent to accept any syntax ?  \n18:38\u00a0<gsauthier>\u00a0Parser parser = manager.lookup(Parser.class, context.getSyntax().toIdString());  \n18:38\u00a0<+tmortagne>\u00a0well that's not enough  \n18:38\u00a0<gsauthier>\u00a0or at least the syntax of the current document  \n18:39\u00a0<+tmortagne>\u00a0if you look at the code I copy pasted you will see that you also have to look at your parent blocks to see if they override the context syntax  \n18:39\u00a0<+tmortagne>\u00a0but it's already better  \n18:40\u00a0<+tmortagne>\u00a0a lot better that hardcoding a syntax ;)  \n18:40\u00a0<+tmortagne>\u00a0will send a vote tomorrow to move ContentParser out of internal if I don't forget  \n18:41\u00a0<+tmortagne>\u00a0than all you will have to do is using it  \n18:41\u00a0<+tmortagne>\u00a0you will be a ble to remove a lot of code that way ;)  \n18:41\u00a0<gsauthier>\u00a0tmortagne: ok  \n18:42\u00a0<+tmortagne>\u00a0in the meantime  \n18:42\u00a0<+tmortagne>\u00a0Parser parser = manager.lookup(Parser.class, context.getSyntax().toIdString());  \n18:42\u00a0<+tmortagne>\u00a0is ok  \n18:42\u00a0<gsauthier>\u00a0cool  \n18:42\u00a0<+tmortagne>\u00a0you are not going to have the sue case were parent override the syntaxe with panel anyway I think  \n18:42\u00a0<+tmortagne>\u00a0s/sue/use/  \n18:42\u00a0<+tmortagne>\u00a0I have to go now  \n18:42\u00a0<+tmortagne>\u00a0bye  \n18:43\u00a0<tmortagne>\u00a0has quit  \n18:49\u00a0<gsauthier>\u00a0Here we go for the git repository: https://github.com/sauthieg/xwiki-panel-macro  \n18:49\u00a0<gsauthier>\u00a0I need to disconnect, I'll connect again tomorow to discuss about this  \n18:49\u00a0<gsauthier>\u00a0Many thanks for your valuable advises everybody  \n18:49\u00a0<gsauthier>\u00a0See you tomorow  \n18:50\u00a0<gsauthier>\u00a0has quit  \n19:22\u00a0<mflorea>\u00a0has quit  \n19:22\u00a0<jvelociter1>\u00a0has quit  \n19:30\u00a0<rrodriguez>\u00a0has joined #xwiki  \n19:56\u00a0<lucaa>\u00a0has quit  \n21:44\u00a0<CIA-102>\u00a0has joined #xwiki  \n22:41\u00a0<abusenius>\u00a0has quit  \n23:31\u00a0<Ruudjah>\u00a0has quit  \n23:45\u00a0<sburjan`>\u00a0has quit  \n23:46\u00a0<sburjan`>\u00a0has joined #xwiki  \n\n"}