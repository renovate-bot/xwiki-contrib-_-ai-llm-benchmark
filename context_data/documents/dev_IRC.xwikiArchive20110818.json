{"id": "dev:IRC.xwikiArchive20110818", "url": "https://dev.xwiki.org/xwiki/bin/view/IRC/xwikiArchive20110818", "title": "IRC Archive for channel #xwiki - XWiki", "collection": "Eval-Large", "mimetype": "text/markdown", "language": "en", "content": "\n00:25\u00a0<abusenius>\u00a0has quit  \n00:47\u00a0<sburjan`>\u00a0has quit  \n01:11\u00a0<sburjan`>\u00a0has joined #xwiki  \n01:19\u00a0<rrodriguez>\u00a0has quit  \n01:21\u00a0<pturcotte>\u00a0has joined #xwiki  \n01:52\u00a0<SvenDowideit>\u00a0has joined #xwiki  \n04:07\u00a0<polx>\u00a0has quit  \n04:07\u00a0<DrLou>\u00a0has quit  \n04:14\u00a0<polx>\u00a0has joined #xwiki  \n07:01\u00a0<Denis1>\u00a0has joined #xwiki  \n07:01\u00a0<Denis>\u00a0has quit  \n07:26\u00a0<mflorea>\u00a0has joined #xwiki  \n07:40\u00a0<vmassol>\u00a0has joined #xwiki  \n07:45\u00a0<vmassol>\u00a0has quit  \n08:11\u00a0<polx\\_>\u00a0has joined #xwiki  \n08:12\u00a0<polx>\u00a0has quit  \n08:12\u00a0<polx\\_>\u00a0is now known as <polx>  \n08:42\u00a0<patrek>\u00a0has joined #xwiki  \n08:42\u00a0<pturcotte>\u00a0has quit  \n08:54\u00a0<patrek>\u00a0has quit  \n09:03\u00a0<pturcotte>\u00a0has joined #xwiki  \n09:28\u00a0<rrodriguez>\u00a0has joined #xwiki  \n09:30\u00a0<rrodriguez>\u00a0has quit  \n09:58\u00a0<vmassol>\u00a0has joined #xwiki  \n10:31\u00a0<vmassol>\u00a0cjdelisle: good morning. Any progress on the attachment issue?  \n10:32\u00a0<vmassol>\u00a0mflorea: btw was the issue with nexus fixed yesterday?  \n10:33\u00a0<+mflorea>\u00a0vmassol: http://nexus.xwiki.org/nexus/content/groups/public-snapshots/org/xwiki/enterprise/xwiki-enterprise-jetty-hsqldb/3.2-SNAPSHOT/maven-metadata.xml is now readable, but I haven't touch anything  \n10:34\u00a0<vmassol>\u00a0snapshot removal is done every day by nexus  \n10:34\u00a0<vmassol>\u00a0maybe it removes some and fixed the metadata  \n10:35\u00a0<+mflorea>\u00a0still, the question is how it end up protected  \n10:35\u00a0<vmassol>\u00a0yep  \n10:36\u00a0<+mflorea>\u00a0we'll see if it happens again  \n10:37\u00a0<vmassol>\u00a0yep, rebooting  \n10:37\u00a0<vmassol>\u00a0has quit  \n10:47\u00a0<cmarcoin>\u00a0has joined #xwiki  \n10:51\u00a0<jvelociter>\u00a0has quit  \n10:52\u00a0<vmassol>\u00a0has joined #xwiki  \n11:04\u00a0<+mflorea>\u00a0vmassol: The version of JODConverter we're using doesn't support OpenOffice 3.3 (neither the most recent LibreOffice). The issue was fixed on jodconverter's trunk. The problem is that jodconverter is in 3.0beta3 for more than 2 years (the project is maintained by a single dev on his free time). what do you prefer: (1) deploy a jar for the latest jodconverter revision in external and use it or (2) see which commits fix OpenOffice 3.3 support and port them to   \n11:05\u00a0<vmassol>\u00a0otp  \n11:07\u00a0<sburjan>\u00a0has joined #xwiki  \n11:07\u00a0<jvelociter>\u00a0has joined #xwiki  \n11:18\u00a0<Denis1>\u00a0is now known as <Denis>  \n11:28\u00a0<vmassol>\u00a0back  \n11:28\u00a0<vmassol>\u00a0mflorea: I prefer (1)  \n11:28\u00a0<+mflorea>\u00a0good, thanks  \n11:28\u00a0<vmassol>\u00a0(it should be verified that it works OFC)  \n11:29\u00a0<+mflorea>\u00a0yep  \n11:29\u00a0<vmassol>\u00a0(by works I mean stable)  \n11:29\u00a0<DrLou>\u00a0has joined #xwiki  \n12:00\u00a0<cmarcoin>\u00a0has quit  \n12:07\u00a0<polx>\u00a0has quit  \n12:15\u00a0<cmarcoin>\u00a0has joined #xwiki  \n12:37\u00a0<cmarcoin>\u00a0has quit  \n13:25\u00a0<polx>\u00a0has joined #xwiki  \n13:38\u00a0<polx\\_>\u00a0has joined #xwiki  \n13:42\u00a0<polx>\u00a0has quit  \n13:42\u00a0<polx\\_>\u00a0is now known as <polx>  \n13:42\u00a0<Denis>\u00a0has quit  \n13:45\u00a0<mflorea>\u00a0has quit  \n13:45\u00a0<Denis>\u00a0has joined #xwiki  \n13:46\u00a0<jvelociter>\u00a0has quit  \n13:48\u00a0<vmassol>\u00a0cjdelisle: ping  \n13:51\u00a0<polx>\u00a0has quit  \n13:51\u00a0<pturcotte>\u00a0has quit  \n13:51\u00a0<polx>\u00a0has joined #xwiki  \n13:52\u00a0<polx>\u00a0has quit  \n13:53\u00a0<cmarcoin>\u00a0has joined #xwiki  \n14:19\u00a0<mmaksimov>\u00a0Ping! :-( I've imported into xwiki 3.1 a page with \"/\" in its name. It was created under 3.0 and everything worked fine. However, the 3.1 server shows links to the page but does not open it. It is also impossible to delete, copy, rename, etc. the page. What's the easiest way to remove the page? I was thinkning about renaming it in DB or doing some velocity script voodoo...  \n14:22\u00a0<vmassol>\u00a0mmaksimov: you should create a jira issue at http://jira.xwiki.org  \n14:22\u00a0<vmassol>\u00a0\"/\" is supposed to be allowed in page names  \n14:24\u00a0<pturcotte>\u00a0has joined #xwiki  \n14:26\u00a0<mflorea>\u00a0has joined #xwiki  \n14:33\u00a0<jamesxu>\u00a0has joined #xwiki  \n14:34\u00a0<cmarcoin1>\u00a0has joined #xwiki  \n14:36\u00a0<cmarcoin>\u00a0has quit  \n14:38\u00a0<vmassol>\u00a0cjdelisle: you there?  \n14:48\u00a0<polx>\u00a0has joined #xwiki  \n14:59\u00a0<polx\\_>\u00a0has joined #xwiki  \n14:59\u00a0<polx>\u00a0has quit  \n14:59\u00a0<polx\\_>\u00a0is now known as <polx>  \n15:05\u00a0<abusenius>\u00a0has joined #xwiki  \n15:08\u00a0<@cjdelisle>\u00a0just got up  \n15:08\u00a0<vmassol>\u00a0good morning then!  \n15:08\u00a0<vmassol>\u00a0I've found something  \n15:08\u00a0<vmassol>\u00a0(for the AttachmentTest issue)  \n15:09\u00a0<vmassol>\u00a0I'm put some Sysem.out.println in XWikiAttachmentContent where the content is stored and retrieced  \n15:09\u00a0<vmassol>\u00a0and when the result retrieved is 0 size (empty)  \n15:09\u00a0<vmassol>\u00a0it's because the retrieval is done just before the content is set  \n15:09\u00a0<vmassol>\u00a0it appears there are 2 threads  \n15:12\u00a0<vmassol>\u00a0now I need to understand where these 2 threads are coming from  \n15:12\u00a0<@cjdelisle>\u00a0That's odd because the 5 second wait doesn't seem to solve the problem either.  \n15:12\u00a0<vmassol>\u00a0here's a portion of log till it stops at my breakpoint  \n15:12\u00a0<vmassol>\u00a0http://pastebin.com/XG8ENSDF  \n15:13\u00a0<vmassol>\u00a0I've put the breakpoint in XWikiAttachmentContent.getInputStream() on line: return new AutoCloseInputStream(...  \n15:13\u00a0<vmassol>\u00a0(the breakpoint is triggered only when the retruned input stream has no data in it)  \n15:13\u00a0<vmassol>\u00a0line 13 of the paste  \n15:14\u00a0<vmassol>\u00a0shows 0 bytes  \n15:14\u00a0<vmassol>\u00a0but if you check the xwikiattachmentcontent pointer value  \n15:14\u00a0<vmassol>\u00a0it's only set after  \n15:14\u00a0<vmassol>\u00a0at line 14  \n15:15\u00a0<vmassol>\u00a0and btw since my breakpoint corresponds to line 13 there should not have been anything printed except that the rest is done on a different thread  \n15:15\u00a0<vmassol>\u00a0(on thread with id = 20)  \n15:15\u00a0<cmarcoin>\u00a0has joined #xwiki  \n15:16\u00a0<cmarcoin1>\u00a0has quit  \n15:17\u00a0<@cjdelisle>\u00a0wow the download action is setting the content? that is really weird.  \n15:19\u00a0<vmassol>\u00a0indeed  \n15:20\u00a0<vmassol>\u00a0the main page is loaded in one thread  \n15:20\u00a0<vmassol>\u00a0and the attachment tab is calling another thread  \n15:20\u00a0<vmassol>\u00a0maybe those are the 2 threads  \n15:21\u00a0<vmassol>\u00a0I still don't fully understand the sequence of events though, i'll need to look at the code to understand how the attachment tab works  \n15:24\u00a0<mmaksimov>\u00a0exit  \n15:24\u00a0<polx>\u00a0has quit  \n15:24\u00a0<mmaksimov>\u00a0has quit  \n15:41\u00a0<vmassol>\u00a0sdumitriu: you there?  \n15:41\u00a0<@sdumitriu>\u00a0Yes  \n15:41\u00a0<vmassol>\u00a0could you explain quickly how the attachemtn tab works in term of request to the server side?  \n15:41\u00a0<vmassol>\u00a0(when uploading an attachment)  \n15:42\u00a0<vmassol>\u00a0it seems we have a race condition between 2 threads  \n15:42\u00a0<vmassol>\u00a0but I'm not familiar with this part of the code  \n15:42\u00a0<vmassol>\u00a0basically I'd like to know what happens when the user presses \"attach\"  \n15:43\u00a0<vmassol>\u00a0from the debug logs I've seen it's as if one request was made to the server to upload the attachment  \n15:43\u00a0<vmassol>\u00a0and another one is made before it returns to display the attachments  \n15:43\u00a0<@sdumitriu>\u00a0It shouldn't be \"before\"  \n15:44\u00a0<@sdumitriu>\u00a0It's supposed to work like a normal upload  \n15:44\u00a0<@sdumitriu>\u00a0i.e.: Send data, wait for response  \n15:44\u00a0<vmassol>\u00a0well the logs clearly show that we try to get the attachment value \\*before\\* it's set (happens once every 30 runs or so)  \n15:45\u00a0<vmassol>\u00a0s/value/content  \n15:45\u00a0<vmassol>\u00a0it's done in 2 separate threads on the server side  \n15:45\u00a0<vmassol>\u00a0which indicates IMO that the client side does 2 requests  \n15:45\u00a0<vmassol>\u00a0and that sometimes the second one runs slightly before the first one  \n15:46\u00a0<@sdumitriu>\u00a0Maybe there should be a wait in the test?  \n15:46\u00a0<vmassol>\u00a0nope that deosn't help actually  \n15:46\u00a0<@sdumitriu>\u00a0Does the test code wait for the upload to finish?  \n15:46\u00a0<vmassol>\u00a0yes  \n15:46\u00a0<@sdumitriu>\u00a0There's nothing speacial in the attach tab, really  \n15:46\u00a0<vmassol>\u00a0well it's ajax code  \n15:46\u00a0<@sdumitriu>\u00a0Since we can't upload via JS  \n15:46\u00a0<vmassol>\u00a0for a start  \n15:46\u00a0<@sdumitriu>\u00a0It's a normal form upload  \n15:47\u00a0<@sdumitriu>\u00a0No, it's not AJAX  \n15:47\u00a0<vmassol>\u00a0if I click on the attach tab it doesn't relaod the whole page  \n15:47\u00a0<@sdumitriu>\u00a0It has a bit of JS for adding form inputs, but that's all  \n15:47\u00a0<@sdumitriu>\u00a0Yes, but that's not related to uploads  \n15:47\u00a0<vmassol>\u00a0so there's at least 2 threads  \n15:47\u00a0<vmassol>\u00a0one for loading the main page  \n15:47\u00a0<vmassol>\u00a0and one for loading the attach tab  \n15:47\u00a0<@sdumitriu>\u00a0Let me read again what you asked  \n15:48\u00a0<@sdumitriu>\u00a0You said \"when uploading an attachment\"  \n15:48\u00a0<vmassol>\u00a0yes because that's when we get an error  \n15:48\u00a0<@sdumitriu>\u00a0Those two threads are on normal display, unrelated to uploads  \n15:48\u00a0<@sdumitriu>\u00a0They happen strictly after the upload is completed  \n15:48\u00a0<vmassol>\u00a0the test does this:  \n15:48\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vp.waitForDocExtraPaneActive(\"comments\");  \n15:48\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AttachmentsPane ap = vp.openAttachmentsDocExtraPane();  \n15:48\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ap.setFileToUpload(this.getClass().getResource(\"/\" + this.testAttachment).getPath());  \n15:48\u00a0<vmassol>\u00a0// \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ap.addAnotherFile();  \n15:48\u00a0<vmassol>\u00a0/// \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ap.setFileToUpload(this.getClass().getResource(\"/\" + this.testAttachment2).getPath());  \n15:48\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ap.clickAttachFiles();  \n15:49\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ap.getAttachmentLink(this.testAttachment).click();  \n15:49\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.assertEquals(\"This is a small attachment.\", getDriver().findElement(By.tagName(\"html\")).getText());  \n15:49\u00a0<vmassol>\u00a0can you see 2 thread that could happen in there?  \n15:50\u00a0<vmassol>\u00a0attachfiles will reload the whole page?  \n15:50\u00a0<@sdumitriu>\u00a0In term of requests:  \n15:50\u00a0<@sdumitriu>\u00a0GET /view/some/doc  \n15:50\u00a0<@sdumitriu>\u00a0wait for response, then JS triggers:  \n15:50\u00a0<@sdumitriu>\u00a0GET /get/some/doc?xpage=attachments  \n15:50\u00a0<@sdumitriu>\u00a0wait for response  \n15:50\u00a0<vmassol>\u00a0clickAttachFiles I mean  \n15:50\u00a0<@sdumitriu>\u00a0user selects file, clicks upload  \n15:50\u00a0<cmarcoin>\u00a0has quit  \n15:50\u00a0<vmassol>\u00a0could it be that:  \n15:51\u00a0<vmassol>\u00a0click attach will send a request to uplod the file and trigger a page refresh which would spawn another thread for loading the attach tab content?  \n15:51\u00a0<@sdumitriu>\u00a0POST /upload/some/doc, browser waits for response  \n15:51\u00a0<@sdumitriu>\u00a0The server is supposed to get the attachment into the database \\*fully\\* then respond with a redirect  \n15:51\u00a0<@sdumitriu>\u00a0Browser gets a redirect to /view/some/doc#attachments  \n15:51\u00a0<@sdumitriu>\u00a0Back to step 1  \n15:52\u00a0<@sdumitriu>\u00a0Normally, if clickAttachFiles does what it's supposed to do, it just clicks the button and waits for a page reload  \n15:52\u00a0<vmassol>\u00a0it does:  \n15:52\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0public void clickAttachFiles()  \n15:52\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0{  \n15:52\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.pane.findElement(By.xpath(\"//form[@id='AddAttachment']//input[@class='button' and @type='submit' and \"  \n15:52\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"@value='Attach']\")).click();  \n15:52\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0}  \n15:53\u00a0<vmassol>\u00a0FYI here's what happens on the server side: http://pastebin.com/PgayQQDn  \n15:53\u00a0<vmassol>\u00a0(when there's a pb)  \n15:53\u00a0<vmassol>\u00a0line 1 shows that there's 0 bytes in XWikiAttachmentCotnent 64a3b9dd  \n15:54\u00a0<vmassol>\u00a0line 2 is when that instance gets its content set  \n15:54\u00a0<@cjdelisle>\u00a0I'm confused about one thing  \n15:54\u00a0<vmassol>\u00a01 ms after  \n15:54\u00a0<@cjdelisle>\u00a0when you upload and download and there's no content, didn't you say that if you download again there's still no content?  \n15:54\u00a0<vmassol>\u00a028 bytes = \"small attachemnt content\"  \n15:55\u00a0<vmassol>\u00a0cjdelisle: no there is  \n15:55\u00a0<cmarcoin>\u00a0has joined #xwiki  \n15:55\u00a0<@sdumitriu>\u00a0Where does the WRITE line come from?  \n15:55\u00a0<@cjdelisle>\u00a0ahh ok  \n15:55\u00a0<vmassol>\u00a0sdumitriu: in XWikiAttachmentContent: public void setContent(InputStream is) throws IOException  \n15:55\u00a0<vmassol>\u00a0and the read is in XWikiAttachmentContent: public InputStream getContentInputStream()  \n15:56\u00a0<vmassol>\u00a0thread 19 tries to read tha attachment content and gets 0 bytes  \n15:56\u00a0<vmassol>\u00a0thread 18 sets the content and read it after  \n15:56\u00a0<@cjdelisle>\u00a0I could explain everything except for the fact that the 5 second wait by assuming that hibernate load() doesn't work in the same thread.  \n15:56\u00a0<vmassol>\u00a0when it works the order is reversed (as we'd expect)  \n15:57\u00a0<@cjdelisle>\u00a0\\*except for the fact that the 5 second wait was not effective  \n15:57\u00a0<vmassol>\u00a0cjdelisle: IMO the 5 seconds doesn't matter because click () is doing the 2 threads somehow  \n15:57\u00a0<@cjdelisle>\u00a0no actually that doesn't matter if the attachment content is loaded from the db when it is first downloaded.  \n15:57\u00a0<vmassol>\u00a0(and the objects are in memory thereafter)  \n15:58\u00a0<@cjdelisle>\u00a0I would try replacing session.load( with a session.get(  \n15:59\u00a0<vmassol>\u00a0cjdelisle: IMO the problem is on the client side, not the server side  \n16:00\u00a0<@cjdelisle>\u00a0ok. I'm still having a tough time with my build, I can't seem to get my changes to oldcore to end up in enterprise when I build it.  \n16:00\u00a0<vmassol>\u00a0(I doubt that the 2 thrads are created on the server side by some code - but I may be wrong)  \n16:00\u00a0<vmassol>\u00a0cjdelisle: simply build an XE the, build oldcore and copy it to WEB-INF/lib  \n16:00\u00a0<vmassol>\u00a0s/build/build or download/  \n16:00\u00a0<vmassol>\u00a0s/the,/then,/  \n16:01\u00a0<vmassol>\u00a0(that's what I do)  \n16:01\u00a0<jamesxu>\u00a0has quit  \n16:01\u00a0<@cjdelisle>\u00a0ok then mvn test for the ui tests so they don't overwrite it?  \n16:01\u00a0<vmassol>\u00a0then in my IDE I start the UI test  \n16:01\u00a0<@cjdelisle>\u00a0yea yea eventually... I will hold out till the end ;)  \n16:02\u00a0<vmassol>\u00a0(after having started my XE of course)  \n16:06\u00a0<@sdumitriu>\u00a0vmassol: Can you print the full stacktrace at the same place that prints READ and WRITE?  \n16:06\u00a0<vmassol>\u00a0hehe was thinking about this too  \n16:06\u00a0<vmassol>\u00a0I'll do it  \n16:07\u00a0<@sdumitriu>\u00a0cjdelisle: oldcore is not what ends up in the XE build  \n16:07\u00a0<@sdumitriu>\u00a0You must also build legacy  \n16:07\u00a0<vmassol>\u00a0nope  \n16:07\u00a0<vmassol>\u00a0no need  \n16:07\u00a0<vmassol>\u00a0just remove legacy  \n16:07\u00a0<vmassol>\u00a0and only copy oldcore  \n16:07\u00a0<vmassol>\u00a0you'll just get one error that the ldap plugin won't load but the rest will work fine  \n16:07\u00a0<@sdumitriu>\u00a0Yes, if he uses copy  \n16:08\u00a0<@sdumitriu>\u00a0I was telling what needs to be done to get the right thing through a normal build  \n16:08\u00a0<vmassol>\u00a0indeed  \n16:08\u00a0<vmassol>\u00a0ok  \n16:08\u00a0<vmassol>\u00a0(didn't read fully)  \n16:08\u00a0<@cjdelisle>\u00a0ok, I am used to the build, build, build method so I will try that out  \n16:08\u00a0<vmassol>\u00a0cjdelisle: it's much slower than a copy  \n16:08\u00a0<@sdumitriu>\u00a0Since before it was enough to build oldcore+xe-web+xe-jetty-hsql  \n16:09\u00a0<@sdumitriu>\u00a0Now it should be oldcore+legacy+xe-web+xe-jetty-hsql  \n16:09\u00a0<@cjdelisle>\u00a0indeed, maybe I need a shell script  \n16:09\u00a0<@sdumitriu>\u00a0But yes, it's simpler with a copy in an existing distribution  \n16:09\u00a0<@sdumitriu>\u00a0I use the copy method as well  \n16:20\u00a0<vmassol>\u00a0sdumitriu: ok here' sthe result: http://pastebin.com/BdMb5hHV  \n16:21\u00a0<vmassol>\u00a0analyzing now\u2026.  \n16:22\u00a0<@sdumitriu>\u00a0vmassol: You don't need to throw an exception to get a stack trace...  \n16:23\u00a0<vmassol>\u00a0I've used: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new RuntimeException(\"\" + System.currentTimeMillis() + \"read\").printStackTrace();  \n16:23\u00a0<@sdumitriu>\u00a0vmassol: For me it's clearly a cache issue  \n16:24\u00a0<vmassol>\u00a0not really  \n16:24\u00a0<@sdumitriu>\u00a0You are 100% sure there's no WRITE before the first READ, right?  \n16:24\u00a0<vmassol>\u00a0if you look at the 50 previous runs  \n16:24\u00a0<vmassol>\u00a0that worked  \n16:24\u00a0<vmassol>\u00a0the thread order is different  \n16:24\u00a0<vmassol>\u00a0it's only when it fails that the thread order is wrong  \n16:24\u00a0<@sdumitriu>\u00a0Hm...  \n16:24\u00a0<@sdumitriu>\u00a0Why are there two download requests  \n16:25\u00a0<vmassol>\u00a0I have no clue yet  \n16:25\u00a0<vmassol>\u00a0sdumitriu: one thing to note: in some previous tests I had disabled FF prefetch but still got the error  \n16:25\u00a0<vmassol>\u00a0I haven't disabled it here  \n16:26\u00a0<@sdumitriu>\u00a0OK, my number one question is now why are there two downloads  \n16:26\u00a0<@sdumitriu>\u00a0Can you get me the request log?  \n16:26\u00a0<@sdumitriu>\u00a0The list of URLs from jetty  \n16:27\u00a0<vmassol>\u00a0good point with request logs  \n16:28\u00a0<vmassol>\u00a0http://pastebin.com/eitvc20E  \n16:29\u00a0<vmassol>\u00a0hmm times don't seem ok , checking if it(s the correct logs  \n16:29\u00a0<vmassol>\u00a0ah yes correct  \n16:30\u00a0<vmassol>\u00a0it's +0000  \n16:32\u00a0<@sdumitriu>\u00a0And... where are the /download/?  \n16:33\u00a0<vmassol>\u00a0so lines 8, 9, 10 is when we click \"attach\"  \n16:33\u00a0<@sdumitriu>\u00a0Yes  \n16:33\u00a0<@sdumitriu>\u00a0And line 11 is when we download...  \n16:33\u00a0<@sdumitriu>\u00a0But I don't have it  \n16:33\u00a0<vmassol>\u00a0there isn't any  \n16:33\u00a0<@sdumitriu>\u00a0So far things are normal, there's no download request before the user clicks on the attachment  \n16:34\u00a0<vmassol>\u00a0note that I'm on a breakpoint though  \n16:34\u00a0<vmassol>\u00a0so it probably waits till it returns  \n16:34\u00a0<vmassol>\u00a0to print the request log entry  \n16:34\u00a0<vmassol>\u00a0since it prints the total times it takes  \n16:34\u00a0<vmassol>\u00a0that's probably why  \n16:34\u00a0<vmassol>\u00a0let me continue  \n16:34\u00a0<@sdumitriu>\u00a0Yes  \n16:36\u00a0<vmassol>\u00a0updated paste: http://pastebin.com/Jf9pRFtV  \n16:39\u00a0<@sdumitriu>\u00a0So there are two download requests, one returning 0 bytes and the other 28  \n16:40\u00a0<@sdumitriu>\u00a0Are you sure that only one is triggered in the test?  \n16:41\u00a0<vmassol>\u00a0one test at a time you mean?  \n16:41\u00a0<+sburjan>\u00a0did you found a bug in attachments, or it's just a faulty written test ?  \n16:41\u00a0<vmassol>\u00a0sdumitriu: AFAIK the test only generates 1 thread  \n16:42\u00a0<vmassol>\u00a0also we have the same pb on jenkins which definitely runs the test only once  \n16:42\u00a0<vmassol>\u00a0http://ci.xwiki.org/view/Functional%20Tests/job/xwiki-enterprise-test-ui/org.xwiki.enterprise$xwiki-enterprise-test-ui/71/testReport/org.xwiki.test.ui/AttachmentTest/testUploadDownloadTwoAttachments/  \n16:42\u00a0<vmassol>\u00a0btw on jenkins we get the error at almost every run  \n16:43\u00a0<@sdumitriu>\u00a0But it's new in 3.2, right?  \n16:43\u00a0<vmassol>\u00a0sburjan: we're still debugging, we're not sure of anything at this stage  \n16:43\u00a0<vmassol>\u00a0no  \n16:43\u00a0<@sdumitriu>\u00a0It doesn't happen on 3.1  \n16:43\u00a0<vmassol>\u00a0it's not new  \n16:43\u00a0<vmassol>\u00a0or maye  \n16:43\u00a0<vmassol>\u00a0I don't know  \n16:43\u00a0<vmassol>\u00a0but it's been like this for more than 1 month for sure  \n16:43\u00a0<@sdumitriu>\u00a0That's why I say it's a cache issue  \n16:43\u00a0<@sdumitriu>\u00a0And I mean hibernate cache  \n16:44\u00a0<@sdumitriu>\u00a0The session-level one  \n16:44\u00a0<vmassol>\u00a0yes it's very possible it's caused by the hibenrate upgrade BUT  \n16:44\u00a0<@sdumitriu>\u00a0Since parallel sessions don't get refreshed automatically  \n16:44\u00a0<vmassol>\u00a0that doesn't explain the threading race condition  \n16:45\u00a0<@sdumitriu>\u00a0Hm, one more thing  \n16:45\u00a0<@sdumitriu>\u00a0(thinking)  \n16:46\u00a0<@sdumitriu>\u00a0Can you print the attachment filesize as reported by the attachment object?  \n16:48\u00a0<vmassol>\u00a0when we READ right?  \n16:48\u00a0<vmassol>\u00a0because it's set in setContent: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.attachment.setFilesize(this.getSize());  \n16:50\u00a0<@sdumitriu>\u00a0Yes, when READ  \n16:50\u00a0<@sdumitriu>\u00a0Normally the filesize should be stored in the DB as well, as a field of XWikiAttachment  \n16:51\u00a0<vmassol>\u00a0you want this: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \", attachment size = \" + this.attachment.getFilesize()  \n16:51\u00a0<vmassol>\u00a0?  \n16:51\u00a0<@sdumitriu>\u00a0Yes  \n16:52\u00a0<vmassol>\u00a0or getSize()?  \n16:52\u00a0<vmassol>\u00a0or both  \n16:52\u00a0<vmassol>\u00a0(XWikiAttachmentContent.getSize())  \n16:53\u00a0<vmassol>\u00a0doing both  \n16:53\u00a0<@sdumitriu>\u00a0getSize would wrongly be 0 here, I'm interested if the cached filesize is correct or not  \n17:06\u00a0<vmassol>\u00a0could get it to fail in 100 runs, trying again  \n17:06\u00a0<vmassol>\u00a0s/could/couldn't  \n17:12\u00a0<vmassol>\u00a0ah got it at least\u2026 after 159 runs  \n17:12\u00a0<vmassol>\u00a0s/least/last/  \n17:13\u00a0<vmassol>\u00a0sdumitriu: http://pastebin.com/EuiNaCy9  \n17:16\u00a0<@sdumitriu>\u00a0content size = 0, attachment size = 28  \n17:16\u00a0<@sdumitriu>\u00a0And then content size = 28, attachment size = 28  \n17:17\u00a0<@sdumitriu>\u00a0So the problem is that the attachment content is not read from the database  \n17:17\u00a0<@sdumitriu>\u00a0It is taken from a cache  \n17:17\u00a0<@sdumitriu>\u00a0Where it's wrong  \n17:17\u00a0<vmassol>\u00a0I still don't understand why you think that reading before writing is correct?  \n17:18\u00a0<@sdumitriu>\u00a0Here \"writing\" is not \"writing to the database  \n17:18\u00a0<vmassol>\u00a0ok let me rephrase  \n17:18\u00a0<@sdumitriu>\u00a0Writing = write from the database into the Java object  \n17:18\u00a0<vmassol>\u00a0I still don't understand why you think that reading the attachment content before setting it is correct  \n17:19\u00a0<@sdumitriu>\u00a0And it's normal not to have writing when the content was already set in a different request and this is a cache  \n17:19\u00a0<@sdumitriu>\u00a0Hm...  \n17:19\u00a0<@sdumitriu>\u00a0Getting closer to the truth  \n17:20\u00a0<@sdumitriu>\u00a0Can you print the object ID of the XWikiAttachment and XWikiAttachmentContent objects?  \n17:20\u00a0<@sdumitriu>\u00a0Is that the same Java object in both requests?  \n17:20\u00a0<vmassol>\u00a0ok I had this before and removed it  \n17:20\u00a0<vmassol>\u00a0I can add it again  \n17:21\u00a0<@sdumitriu>\u00a0Do you remember the conclusion? :)  \n17:21\u00a0<vmassol>\u00a0XWikiAttachmentContent is already printed  \n17:21\u00a0<vmassol>\u00a0I can add XWikiAttachment  \n17:21\u00a0<vmassol>\u00a0no I don't remember  \n17:21\u00a0<@sdumitriu>\u00a0Indeed, XWikiAttachmentContent@141922c9  \n17:21\u00a0<sburjan>\u00a0has quit  \n17:21\u00a0<@sdumitriu>\u00a0Always the same  \n17:22\u00a0<vmassol>\u00a0I only copy pasted when it failed  \n17:22\u00a0<@sdumitriu>\u00a0So the object is used before it is fully written  \n17:22\u00a0<vmassol>\u00a0I can also paste when it works if you want  \n17:22\u00a0<vmassol>\u00a0the log before it fails  \n17:22\u00a0<@sdumitriu>\u00a0So it could be a theadsafety bug  \n17:22\u00a0<vmassol>\u00a0yes exactly  \n17:22\u00a0<@sdumitriu>\u00a0Going into the code  \n17:22\u00a0<vmassol>\u00a0thread safety is a good thing but we'd still need to explain  \n17:23\u00a0<vmassol>\u00a0why there are 2 threads in //  \n17:23\u00a0<pulasthi>\u00a0has joined #xwiki  \n17:23\u00a0<vmassol>\u00a0(and whether that's \"normal\" to have those 2 threads in //)  \n17:24\u00a0<@sdumitriu>\u00a0It's not normal  \n17:25\u00a0<@sdumitriu>\u00a0Looking for the || bug in this.doc.loadAttachmentContent  \n17:26\u00a0<@sdumitriu>\u00a0Yeah...  \n17:26\u00a0<@sdumitriu>\u00a0Stupid  \n17:26\u00a0<@sdumitriu>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0attachment.setAttachment\\_content(content);  \n17:26\u00a0<@sdumitriu>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0session.load(content, new Long(content.getId()));  \n17:26\u00a0<@cjdelisle>\u00a0I have locally replaced load with get, testing it now...  \n17:27\u00a0<vmassol>\u00a0what's stupid sdumitriu?  \n17:27\u00a0<vmassol>\u00a0cjdelisle: what's the difference between load and get?  \n17:27\u00a0<@sdumitriu>\u00a0Because the load is triggered if attachment\\_content is not null  \n17:27\u00a0<@cjdelisle>\u00a0get will never return a proxy  \n17:27\u00a0<@sdumitriu>\u00a0So the other thread thinks that attachment\\_content is correct  \n17:27\u00a0<@sdumitriu>\u00a0But it's still in \"loading\"  \n17:28\u00a0<@sdumitriu>\u00a0It's not a proxy:  \n17:28\u00a0<@sdumitriu>\u00a0XWikiAttachmentContent content = new XWikiAttachmentContent(attachment)  \n17:28\u00a0<@sdumitriu>\u00a0It's an empty new object  \n17:28\u00a0<@cjdelisle>\u00a0oh yea, that too.  \n17:28\u00a0<@sdumitriu>\u00a0So the bug is normal, we just never saw it because there weren't these parallel threads  \n17:29\u00a0<@sdumitriu>\u00a0The question is why are there two download requests  \n17:29\u00a0<@cjdelisle>\u00a0Based on the paste, I don't think there are, that's why I suspect some proxy stuff is going on. Anyway load is not really the right function to use for this.  \n17:30\u00a0<@sdumitriu>\u00a0I wonder how to fix this:  \n17:30\u00a0<@sdumitriu>\u00a01. reverse the order of the two statements, which means that there could be two parallel session.load for the same entity  \n17:30\u00a0<@sdumitriu>\u00a02. add a synchronized{} somewhere, which makes it slower all the time  \n17:30\u00a0<@cjdelisle>\u00a0AFAIK parallel loads don't really matter  \n17:31\u00a0<@sdumitriu>\u00a0Yes, it won't be a bug, at most useless DB work, which shouldn't happen that often since normally there shouldn't be parallel requests  \n17:32\u00a0<@sdumitriu>\u00a0vmassol: Can you try locally to swap the two lines in XWikiHibernateAttachmentStore#184 and see if the bug still happens? I think it shouldn't  \n17:33\u00a0<vmassol>\u00a0sdumitriu: ok can do  \n17:33\u00a0<vmassol>\u00a0sdumitriu: but we need to find out why we have these 2 threads  \n17:33\u00a0<@sdumitriu>\u00a0Yes  \n17:33\u00a0<vmassol>\u00a0(even if it fixes the issue)  \n17:34\u00a0<@sdumitriu>\u00a0I'll check locally if downloading an attachment triggers two requests  \n17:40\u00a0<pulasthi>\u00a0cjdelisle: hi  \n17:41\u00a0<pulasthi>\u00a0cjdelisle: i got deep quries working for primitives and strings  \n17:42\u00a0<@cjdelisle>\u00a0nice  \n17:42\u00a0<@cjdelisle>\u00a0Is it committed in your fork?  \n17:43\u00a0<pulasthi>\u00a0still not i just tested it just now  \n17:43\u00a0<pulasthi>\u00a0i have a few questions  \n17:43\u00a0<pulasthi>\u00a0are you busy?  \n17:44\u00a0<@cjdelisle>\u00a0Not too busy to answer a few questions.  \n17:45\u00a0<pulasthi>\u00a0ok so the question is how to handle collections and arrays  \n17:45\u00a0<pulasthi>\u00a0lets say a Company object has a Employee array  \n17:45\u00a0<pulasthi>\u00a0and then and Employee has a Task Array  \n17:46\u00a0<@cjdelisle>\u00a0I am not sure just what characters are allowed in a column name but I would tend toward using a column name like \"employees[0].name\"  \n17:46\u00a0<pulasthi>\u00a0the first stage is ok  \n17:46\u00a0<pulasthi>\u00a0but when we have to go deeper  \n17:47\u00a0<pulasthi>\u00a0employees[0].tasks[0].name  \n17:47\u00a0<@cjdelisle>\u00a0then something like \"employees[0].tasks[3].description\"  \n17:47\u00a0<@cjdelisle>\u00a0Yes, something like that seems to make the most sense.  \n17:47\u00a0<vmassol>\u00a0sorry was otp, starting tests with inverted linesin XHAS  \n17:47\u00a0<pulasthi>\u00a0so all the objects should be turned into primitives and string right?  \n17:48\u00a0<@cjdelisle>\u00a0Unless the user specifies them as being @Persistant(serialized = true)  \n17:49\u00a0<pulasthi>\u00a0if that is the case just save the hole object  \n17:49\u00a0<pulasthi>\u00a0as it is done now  \n17:50\u00a0<@cjdelisle>\u00a0Yes  \n17:50\u00a0<pulasthi>\u00a0if the Collection consists of only primitives or String should i just save it as it is  \n17:51\u00a0<@cjdelisle>\u00a0perhaps like: \u00a0names[1] = 'John' ?  \n17:51\u00a0<pulasthi>\u00a0ahh ok :)  \n17:51\u00a0<@cjdelisle>\u00a0Having not really thought it through I am not sure if there are traps that you will run in to.  \n17:52\u00a0<pulasthi>\u00a0i will let you know if i get stuck  \n17:52\u00a0<pulasthi>\u00a0was a little busy again have to write a 50 page report about our tranning  \n17:52\u00a0<pulasthi>\u00a0still only 35 done :)  \n17:53\u00a0<@sdumitriu>\u00a0Increase \u00a0the font size and line spacing :D  \n17:53\u00a0<pulasthi>\u00a0i will commit the work tomorrow have a few things to do before i commit  \n17:54\u00a0<@cjdelisle>\u00a0cool, let me know when you do, I am excited to see how it works.  \n17:54\u00a0<pulasthi>\u00a0sdumitrui: i used those tricks and still 35 :D  \n17:54\u00a0<pulasthi>\u00a0cjdelisle: cool  \n18:07\u00a0<cmarcoin>\u00a0has quit  \n18:12\u00a0<pulasthi>\u00a0has left #xwiki  \n18:25\u00a0<cmarcoin>\u00a0has joined #xwiki  \n18:25\u00a0<+mflorea>\u00a0sdumitriu: I'm trying to deploy a jar to maven.xwiki.org . It fails with both \"maven\" and \"mflorea\" users and my private ssh key. can you check if my public ssh key is on maven.xwiki.org machine?  \n18:27\u00a0<+mflorea>\u00a0wait, I can ssh on the machine. something is wrong with my pom then  \n18:27\u00a0<@sdumitriu>\u00a0mflorea: Are you sure it's maven.xwiki.org and not nexus?  \n18:29\u00a0<cmarcoin>\u00a0has quit  \n18:30\u00a0<+mflorea>\u00a0sdumitriu: I want to push the jar to http://maven.xwiki.org/externals/, afaik nexus is just a layer in front of maven.xwiki.org  \n19:10\u00a0<vmassol>\u00a0back going to start the second run of 100 tests....  \n19:12\u00a0<cmarcoin>\u00a0has joined #xwiki  \n19:12\u00a0<@cjdelisle>\u00a0Switching the order has fixed it?  \n19:12\u00a0<vmassol>\u00a0don't know yet  \n19:12\u00a0<vmassol>\u00a0need to run a few hundred times first  \n19:12\u00a0<vmassol>\u00a0I ran a first 100 times already, no problem  \n19:13\u00a0<vmassol>\u00a0(but then with the current order I had to run 150 times too before getting a failure)  \n19:13\u00a0<@cjdelisle>\u00a0I see  \n19:15\u00a0<mflorea>\u00a0has quit  \n19:16\u00a0<vmassol>\u00a0when I reach 400 runs I'll consider a good chance that it fixes the issue\u2026 but it only make the real issue hidden, it doesn't fix the real problem  \n19:20\u00a0<Denis>\u00a0has quit  \n19:23\u00a0<rrodriguez>\u00a0has joined #xwiki  \n19:24\u00a0<cmarcoin>\u00a0has quit  \n19:30\u00a0<@sdumitriu>\u00a0vmassol: Tried locally, only one request to /download/  \n19:30\u00a0<@sdumitriu>\u00a0So something is wrong during the test  \n19:30\u00a0<@sdumitriu>\u00a0I'll go look at the test code  \n19:31\u00a0<vmassol>\u00a0can you check with the test or tell me how to cehck?  \n19:31\u00a0<@sdumitriu>\u00a0I checked by manually uploading and opening a text attachment  \n19:32\u00a0<vmassol>\u00a0with the network tab of firebug?  \n19:33\u00a0<@sdumitriu>\u00a0With the jetty request logs  \n19:34\u00a0<vmassol>\u00a0ok  \n19:34\u00a0<vmassol>\u00a0will try too  \n19:34\u00a0<vmassol>\u00a0246 test run and still working....  \n19:34\u00a0<vmassol>\u00a0however  \n19:34\u00a0<vmassol>\u00a0remember that it's failing on jenkins too  \n19:34\u00a0<vmassol>\u00a0and they're not using @intermittent as I'm using locally  \n19:35\u00a0<vmassol>\u00a0so it probably means something in a single test run will do the 2 requests  \n19:37\u00a0<@sdumitriu>\u00a0vmassol: Can you try to go step by step in the testUploadDownloadTwoAttachments code and look when are the requests triggered?  \n19:37\u00a0<vmassol>\u00a0yep I'll do that  \n19:38\u00a0<vmassol>\u00a0just finhsing my 400 run firt  \n19:38\u00a0<vmassol>\u00a0first  \n19:38\u00a0<vmassol>\u00a0just fininshed 300\u2026 100 more  \n19:38\u00a0<@sdumitriu>\u00a0Normally, ap.getAttachmentLink(this.testAttachment).click(); should be the only one to trigger a request  \n19:39\u00a0<@sdumitriu>\u00a0vmassol: Each test run triggers two requests, right? Just that they both succeed  \n19:39\u00a0<@sdumitriu>\u00a0It's not happening only from time to time  \n19:39\u00a0<vmassol>\u00a0let me check the request logs  \n19:40\u00a0<vmassol>\u00a0yes correct  \n19:40\u00a0<vmassol>\u00a0there are always \u00e9 requests  \n19:40\u00a0<vmassol>\u00a0s\u00e9/2/  \n19:40\u00a0<vmassol>\u00a0grrss  \n19:40\u00a0<vmassol>\u00a0s/\u00e9/2/  \n19:43\u00a0<@cjdelisle>\u00a0I just implemented it with get() instead of load() and I'm 1000 looping it now  \n19:43\u00a0<vmassol>\u00a0cjdelisle: could you make it fail before with the same test?  \n19:43\u00a0<@cjdelisle>\u00a0yup  \n19:44\u00a0<vmassol>\u00a0so you didn't change the order of the 2 lines?  \n19:44\u00a0<vmassol>\u00a0just switching from load to get fixed it for you?  \n19:44\u00a0<@cjdelisle>\u00a0using get, by it's nature forces the order to be the opposite.  \n19:44\u00a0<vmassol>\u00a0ok  \n19:44\u00a0<vmassol>\u00a0haven't read up on get/load  \n19:44\u00a0<vmassol>\u00a0so I have no clue what they do  \n19:44\u00a0<vmassol>\u00a0:)  \n19:46\u00a0<vmassol>\u00a0ok 400 runs and still ok  \n19:46\u00a0<vmassol>\u00a0going to step in debug now  \n19:46\u00a0<@cjdelisle>\u00a0The thing with load() is it can give you a proxy object without checking for actual existance which can be pretty bad if the object doesn't actually exist in the DB.  \n19:49\u00a0<@cjdelisle>\u00a0\"The load() method may return a proxy instead of a real persistent instance.  \n19:49\u00a0<@cjdelisle>\u00a0A proxy is a placeholder that triggers the loading of the real object when it\u2019s  \n19:49\u00a0<@cjdelisle>\u00a0accessed for the first time; we discuss proxies later in this section. On the  \n19:49\u00a0<@cjdelisle>\u00a0other hand, get() never returns a proxy. \"  \n19:49\u00a0<@cjdelisle>\u00a0https://forum.hibernate.org/viewtopic.php?p=2387456  \n19:49\u00a0<@cjdelisle>\u00a0\"The application may retrieve a valid reference (a proxy) to a  \n19:49\u00a0<@cjdelisle>\u00a0persistent instance without hitting the database to retrieve its persistent state. So  \n19:49\u00a0<@cjdelisle>\u00a0load() might not throw an exception when it doesn\u2019t find the persistent object  \n19:49\u00a0<@cjdelisle>\u00a0in the cache or database; the exception would be thrown later, when the proxy  \n19:49\u00a0<@cjdelisle>\u00a0^ == D:  \n19:49\u00a0<@cjdelisle>\u00a0is accessed. \"  \n19:53\u00a0<@sdumitriu>\u00a0cjdelisle: That is \"may\"  \n19:53\u00a0<@sdumitriu>\u00a0I don't think we have proxies  \n19:53\u00a0<@sdumitriu>\u00a0Since we're not using lazy objects  \n19:54\u00a0<vmassol>\u00a0sdumitriu: hmm strange the 2 downloads are done by this line: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ap.getAttachmentLink(this.testAttachment).click();  \n19:54\u00a0<@sdumitriu>\u00a0Step into  \n19:54\u00a0<vmassol>\u00a0getAttachmentLink just does a findElement  \n19:54\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return getDriver().findElement(  \n19:54\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0By.xpath(\"//div[@id='\\_attachments']//a[contains(@href, '\" + attachmentName + \"')]\"));  \n19:55\u00a0<@sdumitriu>\u00a0Does the click() trigger them both, or getAttachmentLink triggers one already?  \n19:55\u00a0<vmassol>\u00a0the click triggers them both  \n19:55\u00a0<vmassol>\u00a0apparently  \n19:55\u00a0<@sdumitriu>\u00a0Hm...  \n19:55\u00a0<@sdumitriu>\u00a0Selenium bug?  \n19:55\u00a0<vmassol>\u00a0trying manually  \n19:56\u00a0<@sdumitriu>\u00a0Can you try to downgrade to a previous version of Se2 to see what happens?  \n19:57\u00a0<@sdumitriu>\u00a0It's strange that clicking on other links only triggers one GET  \n19:58\u00a0<@sdumitriu>\u00a0vmassol: I'll commit the store bugfix, OK?  \n19:58\u00a0<vmassol>\u00a0wait  \n19:58\u00a0<@sdumitriu>\u00a0K  \n19:58\u00a0<vmassol>\u00a0first we should probably do what cjdelisle is suggesting  \n19:59\u00a0<@sdumitriu>\u00a0Replace load with get?  \n19:59\u00a0<vmassol>\u00a0(I haven't tested it but caleb says it's working fine for him)  \n19:59\u00a0<vmassol>\u00a0yes  \n19:59\u00a0<vmassol>\u00a0you don't agree?  \n19:59\u00a0<@sdumitriu>\u00a0No  \n19:59\u00a0<vmassol>\u00a0ok guys discuss together!  \n19:59\u00a0<@sdumitriu>\u00a0The bug would still be there  \n19:59\u00a0<@cjdelisle>\u00a0I'm 1000 looping it and I figure I must be getting near the end now.  \n19:59\u00a0<vmassol>\u00a0cjdelisle says he had the bug before and just replaced load by get and bug disappearted  \n20:00\u00a0<@sdumitriu>\u00a0Since the first line sets an empty XWikiAttachmentContent object into the XWikiAttachment  \n20:00\u00a0<@sdumitriu>\u00a0The other thread will use that regardless of what Hibernate does  \n20:00\u00a0<@cjdelisle>\u00a0Since get() doesn't behave the same as load it is by definition does what you were suggesting too.  \n20:00\u00a0<@sdumitriu>\u00a0It's not how we fill the object with the data, but that the object is wrongly set  \n20:00\u00a0<@cjdelisle>\u00a0s/is//  \n20:00\u00a0<@sdumitriu>\u00a0It's a classical lazy initialization error  \n20:01\u00a0<@sdumitriu>\u00a0The reference will still be bad in the other thread  \n20:01\u00a0<@sdumitriu>\u00a0Maybe your fix just reduces the time window or something  \n20:01\u00a0<@cjdelisle>\u00a0I can't set the content of the attachment before loading it because the XWikiAttachmentContent object is created by the get() function.  \n20:02\u00a0<@sdumitriu>\u00a0cjdelisle: So you also reversed the order of the two statements?  \n20:02\u00a0<@cjdelisle>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0final XWikiAttachmentContent content = (XWikiAttachmentContent)  \n20:02\u00a0<@cjdelisle>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0session.get(XWikiAttachmentContent.class, Long.valueOf(attachment.getId()));  \n20:03\u00a0<@cjdelisle>\u00a0there's really no way to avoid it.  \n20:03\u00a0<@sdumitriu>\u00a0Yes  \n20:03\u00a0<vmassol>\u00a0sdumitriu: I see 2.4.0 is out. Will try now  \n20:03\u00a0<@sdumitriu>\u00a0But there's no contradiction  \n20:04\u00a0<@sdumitriu>\u00a0vmassol: cjdelisle also fixed the assignment order, it's not an alternative to that  \n20:04\u00a0<vmassol>\u00a0ah ok\u2026 I asked him explicitely above\u2026. miscommunication it seems  \n20:04\u00a0<@cjdelisle>\u00a0I want to believe that there is no lazy loading going on but can you explain this? (XWikiHibernateStore.java:1388)  \n20:05\u00a0<@cjdelisle>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// TODO: understand why collections are lazy loaded  \n20:05\u00a0<@cjdelisle>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Let's force reading lists if there is a list  \n20:05\u00a0<@cjdelisle>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// This seems to be an issue since Hibernate 3.0  \n20:05\u00a0<@cjdelisle>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Without this test ViewEditTest.testUpdateAdvanceObjectProp fails  \n20:05\u00a0<@cjdelisle>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (property instanceof ListProperty) {  \n20:05\u00a0<@cjdelisle>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0((ListProperty) property).getList();  \n20:05\u00a0<@sdumitriu>\u00a0cjdelisle: that only applies to collections  \n20:06\u00a0<@sdumitriu>\u00a0There's no collection in the attachment content  \n20:06\u00a0<@cjdelisle>\u00a0Ok so there is no lazy loading ever with anything except collections yet we don't know the reason why collections are lazy loaded.  \n20:06\u00a0<vmassol>\u00a0still 2 request even with 2.4.0  \n20:06\u00a0<@sdumitriu>\u00a0cjdelisle: I'm not saying that we shouldn't use get instead of load, just that by itself it doesn't fix the problem, since the problem is the assignment of the object before it's loaded from the database  \n20:07\u00a0<@sdumitriu>\u00a0cjdelisle: There could be lazy loading if we change the mapping files to introduce them; it's just that we don't  \n20:07\u00a0<@cjdelisle>\u00a0ok  \n20:07\u00a0<@sdumitriu>\u00a0The bug with lazy loading is that we didn't specify that that collection should be lazy, yet it is  \n20:07\u00a0<vmassol>\u00a0sdumitriu: ok you can commit the fix  \n20:07\u00a0<@sdumitriu>\u00a0So it could be a change in the default values introduced in Hibernate 3.0  \n20:08\u00a0<@cjdelisle>\u00a0I don't care if you want to use my patch or just reverse the entries and set the filesize seperately as long as we all are on the same page about lazyness.  \n20:09\u00a0<vmassol>\u00a0sdumitriu: if you want you can upgrade hibernate too  \n20:09\u00a0<vmassol>\u00a0there's a newer version  \n20:09\u00a0<vmassol>\u00a0(not much has changed though but better upgrade)  \n20:09\u00a0<@sdumitriu>\u00a0vmassol: It seems that selenium is releasing very often lately  \n20:09\u00a0<vmassol>\u00a0yes  \n20:09\u00a0<vmassol>\u00a0they've changed their straegy  \n20:09\u00a0<@sdumitriu>\u00a0Good  \n20:10\u00a0<@sdumitriu>\u00a0cjdelisle: I'm hesitating about get() since I don't know what happens with blobs/clobs  \n20:10\u00a0<@cjdelisle>\u00a0varbinary is not the same as blob though.  \n20:10\u00a0<@sdumitriu>\u00a0In theory, it should be possible to do direct streaming from the database without loading them all in memory  \n20:11\u00a0<@sdumitriu>\u00a0We're not doing this yet  \n20:11\u00a0<@sdumitriu>\u00a0So it's something for the future  \n20:11\u00a0<@sdumitriu>\u00a0At the moment it shouldn't matter which one we use  \n20:11\u00a0<@cjdelisle>\u00a0It is (with \\*lob) but I looked in to \\*lob and it is a nightmare of api inconsistancy.  \n20:11\u00a0<@sdumitriu>\u00a0Just something to keep in mind for when we do dig in seriously into the storage engine  \n20:12\u00a0<@cjdelisle>\u00a0Even the Hibernate people told me I didn't want to deal with it unless I was willing to stick to one database engine.  \n20:12\u00a0<@sdumitriu>\u00a0And the safest thing to me seems to be load  \n20:12\u00a0<@sdumitriu>\u00a0Can you guarantee that get is the better choice?  \n20:13\u00a0<@cjdelisle>\u00a0haha I can't guarantee that I'll live to see tomorrow :P  \n20:13\u00a0<@sdumitriu>\u00a0I'll leave this decision to you: get or load  \n20:14\u00a0<@cjdelisle>\u00a0If load works, it's a smaller change (we both agree on that) and it's you think that it will never return a proxy then I'd say go for it.  \n20:14\u00a0<@sdumitriu>\u00a0OK, doing the change  \n20:14\u00a0<@sdumitriu>\u00a0Thanks  \n20:15\u00a0<@sdumitriu>\u00a0(when dealing with oldcore, I prefer to stay on the safe side and only do minor changes)  \n20:15\u00a0<@sdumitriu>\u00a0(especially with storage, we never know what might introduce a bug in rare situations and only on some databases...)  \n20:16\u00a0<@sdumitriu>\u00a0And load() seemed to work well so far  \n20:17\u00a0<vmassol>\u00a0fyi sel 2.4.0 supports FF 6.0  \n20:17\u00a0<@sdumitriu>\u00a0vmassol: Is there an issue for this?  \n20:17\u00a0<@sdumitriu>\u00a0Or should I create one?  \n20:17\u00a0<vmassol>\u00a0on their forum \"2.5 will be out soon, but 2.4 is on the download page already.\" ;)  \n20:17\u00a0<vmassol>\u00a0(from yesterday)  \n20:17\u00a0<vmassol>\u00a0sdumitriu: create one  \n20:18\u00a0<@sdumitriu>\u00a0K  \n20:18\u00a0<vmassol>\u00a0btw posted a question on https://groups.google.com/forum/#!topic/webdriver/tsuBgipwzRQ  \n20:19\u00a0<vmassol>\u00a0dinner time  \n20:24\u00a0<@sdumitriu>\u00a0vmassol: Fixed  \n20:25\u00a0<vmassol>\u00a0cool let's see if all the tests get fixed magially  \n20:25\u00a0<vmassol>\u00a0\\*magically  \n20:25\u00a0<@cjdelisle>\u00a0I have been chacing ImportTest for a while, the problem that's breaking it is a race condition but there's something else even when the test is delayed  \n20:26\u00a0<@sdumitriu>\u00a0cjdelisle: The delay doesn't matter  \n20:26\u00a0<@sdumitriu>\u00a0The race is triggered by one method: that click()  \n20:26\u00a0<@sdumitriu>\u00a0Since it fires two requests  \n20:26\u00a0<@cjdelisle>\u00a0ImportTest  \n20:27\u00a0<@sdumitriu>\u00a0Ah, that's a different test  \n20:28\u00a0<@sdumitriu>\u00a0vmassol: \" multiple elements in the DOM that match; some months/versions ago to be fair.\"  \n20:28\u00a0<@sdumitriu>\u00a0That is true, since the version number also matches  \n20:29\u00a0<vmassol>\u00a0ahah  \n20:29\u00a0<vmassol>\u00a0will check  \n20:29\u00a0<vmassol>\u00a0but dinner first  \n20:29\u00a0<@sdumitriu>\u00a0So, you can try to make the selector more specific  \n20:30\u00a0<vmassol>\u00a0yes  \n20:30\u00a0<@sdumitriu>\u00a0By.xpath(\"//div[@id='\\_attachments']//span[@class='name']/a[contains(@href, '\" + attachmentName + \"')]\"));  \n20:31\u00a0<@sdumitriu>\u00a0Lunch for me, so hungry  \n20:31\u00a0<@sdumitriu>\u00a0cjdelisle: By the way, I'm in Toronto for the following two years  \n20:31\u00a0<@cjdelisle>\u00a0Cool  \n20:31\u00a0<@sdumitriu>\u00a0Feel free to visit me  \n20:32\u00a0<@cjdelisle>\u00a0I don't move around a lot but if you swing by Massachusetts, feel free to stop by here.  \n20:32\u00a0<@cjdelisle>\u00a0What are you doing in Toronto?  \n20:36\u00a0<@sdumitriu>\u00a0Living  \n20:36\u00a0<@cjdelisle>\u00a0What do you think of it?  \n20:36\u00a0<@sdumitriu>\u00a0Moved with the wife, she's doing a postdoc at the university here  \n20:36\u00a0<@sdumitriu>\u00a0It's nice so far  \n20:37\u00a0<@cjdelisle>\u00a0I see  \n20:52\u00a0<vmassol>\u00a0cjdelisle: are you sure about \"Removed changes because the machine onwhich this was a problem has had it's /etc/hosts file edited and this should nolonger be an issue.\"  \n20:52\u00a0<vmassol>\u00a0what about any dev's machine?  \n20:52\u00a0<vmassol>\u00a0it shouldn't just work on jenkins agents  \n20:53\u00a0<@cjdelisle>\u00a0That was a mitigation because the system's hosts file was actually broken  \n20:53\u00a0<@cjdelisle>\u00a0it shouldn't be that way.  \n20:53\u00a0<vmassol>\u00a0ok  \n20:53\u00a0<@cjdelisle>\u00a0It was also partially a test because I couldn't really understand what was happening at the time.  \n20:55\u00a0<vmassol>\u00a0hmmm just checked my jetty request log and found this:  \n20:55\u00a0<vmassol>\u00a058.218.199.227 - \u00a0- \u00a0[18/Aug/2011:18:18:23 +0000] \"GET http://ppcfinder.net/judge.php HTTP/1.1\" 302 0  \n20:55\u00a0<vmassol>\u00a0sounds weird  \n20:56\u00a0<vmassol>\u00a0someone connection to my jetty from outside?  \n20:57\u00a0<@cjdelisle>\u00a0yeap  \n20:57\u00a0<@cjdelisle>\u00a0scanning is constant, if you don't firewall then you will get hit  \n20:58\u00a0<@cjdelisle>\u00a0I used to have an iptabels rule to log unsolicited traffic, I would see about 5 or 10 unique ip addresses scanning my stuff for vulnerabilities.  \n20:59\u00a0<@cjdelisle>\u00a0Once someone was actually scanning for openvpn UDP, that was o\\_O  \n20:59\u00a0<vmassol>\u00a0:)  \n20:59\u00a0<@cjdelisle>\u00a0If I had free time I would totally run a honeypot  \n20:59\u00a0<vmassol>\u00a0hehe  \n21:01\u00a0<@cjdelisle>\u00a0iptables -I INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT  \n21:01\u00a0<@cjdelisle>\u00a0iptables -A INPUT -i lo -j ACCEPT  \n21:01\u00a0<@cjdelisle>\u00a0iptables -A INPUT -j DROP  \n21:01\u00a0<@cjdelisle>\u00a0^keeps the riffraff out  \n21:04\u00a0<cmarcoin>\u00a0has joined #xwiki  \n21:18\u00a0<vmassol>\u00a0hmmm I still get 2 calls with  \n21:18\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return getDriver().findElement(  \n21:18\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0By.xpath(\"//div[@id='\\_attachments']//a[@title = 'Download this attachment' and contains(@href, '\"  \n21:18\u00a0<vmassol>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ attachmentName + \"')]\"));  \n21:19\u00a0<vmassol>\u00a0I'm 100% sure that matches only a single webelement  \n21:21\u00a0<cmarcoin>\u00a0has quit  \n21:23\u00a0<RenJuan>\u00a0has joined #xwiki  \n21:32\u00a0<rrodriguez>\u00a0has quit  \n21:38\u00a0<abusenius\\_>\u00a0has joined #xwiki  \n21:38\u00a0<abusenius>\u00a0has quit  \n21:38\u00a0<abusenius\\_>\u00a0is now known as <abusenius>  \n22:11\u00a0<vmassol>\u00a0cjdelisle: http://ci.xwiki.org/job/xwiki-enterprise-test-ui/org.xwiki.enterprise$xwiki-enterprise-test-ui/74/testReport/org.xwiki.test.ui.invitation/InvitationTest/testSpamReporting/ is failing now  \n22:12\u00a0<@cjdelisle>\u00a0thanks for pointing that out  \n22:15\u00a0<@cjdelisle>\u00a0\"Upgrade to Selenium 2.4.0\" guess I need to look over my method of picking out a message.  \n22:15\u00a0<vmassol>\u00a0they changed something?  \n22:15\u00a0<vmassol>\u00a0I thoguht it was because of the ipV4 setting you removed  \n22:16\u00a0<@cjdelisle>\u00a0Nope, the message comes through allright, it's just that it's not finding it correctly.  \n22:16\u00a0<@cjdelisle>\u00a0http://ci.xwiki.org/job/xwiki-enterprise-test-ui/org.xwiki.enterprise$xwiki-enterprise-test-ui/72/#showFailuresLink  \n22:17\u00a0<vmassol>\u00a0btw ImportTest isn't fixed by our fix for AttachmentTest\u2026. too bad  \n22:19\u00a0<@cjdelisle>\u00a0Yea, I have been picking away at it, not much luck at my end either. Just lots of hibernate failures.  \n22:19\u00a0<vmassol>\u00a0it could be related though  \n22:20\u00a0<vmassol>\u00a0maybe there's \u00a0a click() somewhere that does the same as for AttachmentTest  \n22:20\u00a0<@cjdelisle>\u00a0I think it is deleting an attachment that isn't there and it panics because the deletion doesn't affect any rows.  \n22:28\u00a0<vmassol>\u00a0cjdelisle: fyi found release notes for sel2 2.4.0: http://selenium.googlecode.com/svn/trunk/java/CHANGELOG  \n22:38\u00a0<@cjdelisle>\u00a0It was a bug in invitation, it apparently puts a space after the subject line which selenium didn't spot until now.  \n22:38\u00a0<vmassol>\u00a0ahah nice  \n22:50\u00a0<vmassol>\u00a0ok 3 more tests to fix and we're done! http://ci.xwiki.org/job/xwiki-enterprise-test-ui/org.xwiki.enterprise$xwiki-enterprise-test-ui/76/testReport/  \n22:51\u00a0<vmassol>\u00a0ah no, thought you had removed one but that was just a flicker\u2026.  \n22:51\u00a0<vmassol>\u00a0you haven't committed yet  \n22:53\u00a0<rrodriguez>\u00a0has joined #xwiki  \n23:08\u00a0<pturcotte>\u00a0has quit  \n23:44\u00a0<abusenius\\_>\u00a0has joined #xwiki  \n23:44\u00a0<abusenius>\u00a0has quit  \n23:44\u00a0<vmassol>\u00a0has quit  \n23:49\u00a0<abusenius\\_>\u00a0is now known as <abusenius>  \n23:49\u00a0<abusenius>\u00a0has quit  \n\n"}