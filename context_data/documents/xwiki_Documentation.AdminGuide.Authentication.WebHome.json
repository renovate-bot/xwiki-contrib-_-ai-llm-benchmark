{"id": "xwiki:Documentation.AdminGuide.Authentication.WebHome", "url": "https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/", "title": "User Authentication", "collection": ["Eval", "Eval-Large"], "mimetype": "text/markdown", "language": "en", "content": "\n**Contents*** [Choose the authenticator](https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/#HChoosetheauthenticator)\n* [Authentication Types](https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/#HAuthenticationTypes)\n\t+ [Form Authentication](https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/#HFormAuthentication)\n\t+ [Basic Authentication](https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/#HBasicAuthentication)\n\t+ [Container Authentication](https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/#HContainerAuthentication)\n\t+ [OpenId Connect Authentication](https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/#HOpenIdConnectAuthentication)\n\t+ [Active Directory](https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/#HActiveDirectory)\n\t+ [LDAP](https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/#HLDAP)\n\t+ [Custom Authentication](https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/#HCustomAuthentication)\n\t\t- [Custom Authentication using a Groovy script in a wiki page](https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/#HCustomAuthenticationusingaGroovyscriptinawikipage)\n* [Configuration](https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/#HConfiguration)\n\t+ [Authentication parameters](https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/#HAuthenticationparameters)\n\t+ [Security](https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/#HSecurity)\n* [Kerberos SSO Authentication](https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/#HKerberosSSOAuthentication)\n* [Mail Templates](https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/#HMailTemplates)\nXWiki supports several different authentication mechanisms for authenticating users.\n\nXWiki currently allows only one method of authentication to be enabled at a time. This will probably be improved in the future.\n\nAlso note that XWiki requires cookies to be enabled in order to track your session and to keep you logged in between pages.\n\n# Choose the authenticator\n\nHistorically, the authenticator to use in XWiki is controlled by the property xwiki.authentication.authclass in the xwiki.properties file.\n\nXWiki 15.3+\u00a0For authenticators which supports it, it's possible to choose the authenticator to use in the wiki administration.\n\n![authserviceadmin.png](https://www.xwiki.org/xwiki/bin/download/Documentation/AdminGuide/Authentication/WebHome/authserviceadmin.png?rev=1.1)\n\n\n\n# Authentication Types\n\n## Form Authentication\n\nForm authentication is the default way to get authenticated within a Wiki. It requires a user and a password.\n\n## Basic Authentication\n\nXWiki supports [basic access authentication](https://en.wikipedia.org/wiki/Basic_access_authentication), a method designed to allow a web browser or other client programs to provide credentials - in the form of a user name and password - when making a request. You can get authenticated against an XWiki server with the basic authentication protocol using the following URL scheme:\n\nhttps://username:password@mywiki.xwiki.com/xwiki/bin/view/Main/WebHome?basicauth=1  \nBe careful that if you use the HTTP protocol your password will be sent in clear over the network and is thus very unsafe. When using basic authentication you should make sure your wiki is configured to use HTTPS.\n\n## Container Authentication\n\nDelegates authentication to the Servlet Container. If it fails it falls back to the standard XWiki authentication.\n\nTo configure XWiki to use it, specify:\n\nxwiki.authentication.authclass=com.xpn.xwiki.user.impl.xwiki.AppServerTrustedAuthServiceImplFor users to be actually created and not just set as context user you must set in xwiki.cfg configuration file (if the property does not already exist, create it):\n\nxwiki.authentication.createuser=empty## OpenId Connect Authentication\n\nSee the [OpenId Connect Authenticator Extension](https://extensions.xwiki.org/xwiki/bin/view/Extension/OpenID%20Connect/OpenID%20Connect%20Authenticator/).\n\n## Active Directory\n\nIf you're looking to connect XWiki to an Active Directory server, you currently have 2 options:\n\n* Using the manual and generic approach using the [LDAP Authenticator extension](https://extensions.xwiki.org/xwiki/bin/view/Extension/LDAP/Authenticator/)\n* Using the dedicated [Active Directory Application](https://store.xwiki.com/xwiki/bin/view/Extension/ActiveDirectoryApplication) which is a paying application dedicated to simplifying the integration of Active Directory with XWiki. The Active Directory Application allows you to easily connect your Active Directory server to XWiki using a **visual editor**, update\u00a0**advanced configuration** settings without restarting the application server, **technical support** provided by [XWiki SAS](https://xwiki.com/), etc.\n\n## LDAP\n\nSee the [LDAP Authenticator extension](https://extensions.xwiki.org/xwiki/bin/view/Extension/LDAP/Authenticator/).\n\nThe deprecated LDAP core authenticator (for XWiki < 7.4) can be found on [OldLDAPAuthenticator](https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/OldLDAPAuthenticator/).\n\n## Custom Authentication\n\nYou can create your custom authentication by following [Create a Custom Authenticator](https://www.xwiki.org/xwiki/bin/view/Documentation/DevGuide/Tutorials/Create%20a%20Custom%20Authenticator/)\u00a0tutorial.\n\nNote that it's also possible to customize the right management system, see [Security Module](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module) for more details.\n\n### Custom Authentication using a Groovy script in a wiki page\n\nStart by specifying you want to use the Groovy Authenticator:\n\nxwiki.authentication.authclass = com.xpn.xwiki.user.impl.xwiki.GroovyAuthServiceImplThen add another configuration parameter to specify in which wiki page the authenticator is:\n\nxwiki.authentication.groovy.pagename = MySpace.MyPageThen put some Groovy code in a wiki page that returns a XWikiAuthService object.\n\n# Configuration\n\n## Authentication parameters\n\nYou can set each of these parameters by setting:\n\nxwiki.authentication.<param\\_name>=<param\\_value>\n\n| Name | Optional | Allowed values | Default value | Description |\n| --- | --- | --- | --- | --- |\n| encryptionKey | No(1)/XWiki 15.9+, 15.5.4+, 14.10.19+\u00a0Yes | ? | n/a | Set the Encryption Key used to create a secret key, the secret key is passed to the Cipher object to be used during encryption and decryption of cookie values. |\n| validationKey | No(2)/XWiki 15.9+, 15.5.4+, 14.10.19+\u00a0Yes | ? | n/a | Set the Validation Key used to generate hash value; the hash value is stored with the cookie and used to verify that the cookie has not been tampered with. |\n| cookiedomains | Yes | String | Server host name | Which host(s) should your cookies be sent to; use only if you want to share cookies across domains, otherwise should be commented out |\n| cookielife | Yes | Number | 14 | Number of days cookies take to expire |\n| cookiepath | Yes | String | / | The webapp path that XWiki cookies should be sent to; if you have anything else running on your web server, this should be set to */xwiki* |\n| default\\_page | Yes | String | /bin/view/ Main/WebHome | Page to redirect to if xredirect parameter is not set |\n| encryptionalgorithm | Yes | ? | ? | Set the Encryption Algorithm used to encrypt and decrypt cookies |\n| encryptionmode | Yes | ? | ? | Set the Encryption Mode used to encrypt and decrypt cookies |\n| encryptionpadding | Yes | ? | ? | Set the Encryption Padding used to encrypt and decrypt cookies |\n| errorpage | Yes | String | /bin/loginerror/ XWiki/XWikiLogin | Page to redirect to if there is an error logging in |\n| loginpage | Yes | String | /bin/login/ XWiki/XWikiLogin | Page to redirect to when not logged in |\n| loginsubmitpage | Yes | String | /loginsubmit/ XWiki/XWikiLogin | The URL where the username and password are posted to when logging in. |\n| logoutpage | Yes | String | /bin/logout/ XWiki/XWikiLogout | Page to redirect to after logged out |\n| realmname | Yes | String | XWiki | Sets the realm name |\n| protection | Yes | all, validation, encryption, none | all | Protection level for the \"remember me\" cookie functionality |\n| useip | Yes | true / false | true | Specify to use the IP address when encrypting the cookie data; if IP address changes will need to re-login. |\n\n1. Only required if protection = encryption or all (default)\n2. Only required if protection = validation or all (default)\n\n## Security\n\nStarting with XWiki 11.6RC1 we provide some authentication strategies that are triggered if a user fails several time in a row to login.  \nYou can configure those strategies and when they should be triggered in the Administration > Authentication page.\n\n![authentication-security-administration.png](https://www.xwiki.org/xwiki/bin/download/Documentation/AdminGuide/Authentication/WebHome/authentication-security-administration.png?rev=1.1)\n\nFor more information see the [Authencation Security Module documentation](https://extensions.xwiki.org/xwiki/bin/view/Extension/Authentication%20Security%20Module/).\n\n# Kerberos SSO Authentication\n\nThis implementation of SSO is currently under review see: <https://jira.xwiki.org/browse/XWIKI-2496> . The class which is described in this segment of documentation, AppServerTrustedKerberosAuthServiceImpl, is not part of the default XWiki distribution!\n\nThe following is an example of **mod\\_auth\\_kerb** for Apache being used to easily implement XWiki authentication of users via HTTP Negotiate on a linux server. This example assumes you already have a working Apache2 HTTPD and Apache Tomcat setup with mod\\_jk.\n\nFirst of all you need to create a principal and keytab for the webserver:\n\n# kadmin  \nkadmin> addprinc -randkey HTTP/wiki.example.com  \nkadmin> ktadd -k /etc/apache2/ssl/wiki.keytab HTTP/wiki.example.com  \nkadmin> quitMake sure the keytab has the right permissions and ownership:\n\nchown www-data:www-data /etc/apache2/ssl/wiki.keytab  \nchmod 400 /etc/apache2/ssl/wiki.keytabInstall **mod\\_auth\\_kerb** in your linux installation. On Debian or Ubuntu this would be achieved by running:\n\naptitude install libapache2-mod-auth-kerbOf course the installation procedure varies per Linux distribution.\n\nIf your xwiki installation is mounted in Apache HTTPD under /xwiki, add the following to the virtual host configuration:\n\n<Location \"/xwiki\">  \n\u00a0\u00a0AuthType Kerberos  \n\u00a0\u00a0AuthName \"Kerberos Login\"  \n\u00a0\u00a0KrbAuthRealms EXAMPLE.COM  \n\u00a0\u00a0Krb5Keytab \"/etc/apache2/ssl/wiki.keytab\"  \n\u00a0\u00a0KrbMethodK5Passwd off  \n\u00a0\u00a0KrbMethodNegotiate on  \n\u00a0\u00a0KrbSaveCredentials on  \n\u00a0\u00a0require valid-user  \n</Location>Make sure Apache Tomcat uses the authentication performed by Apache HTTPD with the \"tomcatAuthentication\" property in the connector description (which is in the **server.xml** file of Apache Tomcat):\n\n<Connector port=\"8009\" address=\"127.0.0.1\" enableLookups=\"false\" tomcatAuthentication=\"false\" redirectPort=\"8443\" protocol=\"AJP/1.3\" ></Connector>Place the **authkerb.jar** jar in the WEB-INF/lib directory of XWiki in Apache Tomcat.\n\nHave Xwiki use the authentication module by changing the \"xwiki.authentication.authclass\" property in the WEB-INF/lib/xwiki.cfg file.\n\nxwiki.authentication.authclass=com.xpn.xwiki.user.impl.xwiki.AppServerTrustedKerberosAuthServiceImplIf you use Firefox, do not forget to whitelist the xwiki URL for HTTP Negotiate in about:config with the \"network.negotiate-auth.trusted-uris\" property. Possible values for this property include: *https://* for all secured connections or **example.com** for all example.com subdomains.\n\nWhen I used JBoss SPNEGO (Kerberos in combination with LDAP) I changed the code of the **XWikiLDAPAuthServiceImpl** to be able to detect the sso user. The authenication already happend by using the SPNEGO module (JAAS). After that I'm using the ldap synchronisation feature to make sure that the user is up to date. The combination leads to an automatic login in XWiki and the user rights are controlled in the Active Directory server. I hope you can adopt this code or that you can use it for your own projects.\n\nThe configuration of ldap:\n\nxwiki.authentication.authclass=com.wiki.sso.SSOLdapAuthenicationImpl  \nxwiki.authentication.ldap=1  \nxwiki.authentication.ldap.server=<ad-server>  \nxwiki.authentication.ldap.port=389  \nxwiki.authentication.ldap.base\\_DN=<OU=Users,...............>  \n#use a fixed user to attach to the ldap database,  \n#the password is not provided with the SSOLdapAuthenicationImpl  \nxwiki.authentication.ldap.bind\\_DN=<domain>\\\\<user>  \nxwiki.authentication.ldap.bind\\_pass=<password>  \n#Microsoft AD configuration  \nxwiki.authentication.ldap.UID\\_attr=sAMAccountName  \nxwiki.authentication.ldap.fields\\_mapping=name=sAMAccountName,last\\_name=sn,first\\_name=givenName,fullname=displayName,mail=mail,ldap\\_dn=dn  \nxwiki.authentication.ldap.group\\_memberfields=member,uniqueMember  \n#LDAP group mapping  \nxwiki.authentication.ldap.group\\_mapping=XWiki.XWikiAdminGroup=CN=WIKI\\_Admin,............|\\  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0XWiki.XWikiAllGroup=CN=WIKI\\_User,...........The java code:\n\npackage com.wiki.sso;  \n  \n  \nimport org.apache.commons.logging.Log;  \nimport org.apache.commons.logging.LogFactory;  \n  \nimport com.xpn.xwiki.XWikiContext;  \nimport com.xpn.xwiki.XWikiException;  \nimport com.xpn.xwiki.user.api.XWikiUser;  \nimport com.xpn.xwiki.user.impl.LDAP.XWikiLDAPAuthServiceImpl;  \n  \nimport java.security.Principal;  \n  \npublic class SSOLdapAuthenicationImpl extends XWikiLDAPAuthServiceImpl {  \n \u00a0\u00a0\u00a0/\\*\\*  \n \u00a0\u00a0\u00a0\u00a0\\* Logging tool.  \n \u00a0\u00a0\u00a0\u00a0\\*/  \n\u00a0\u00a0\u00a0\u00a0private static final Log LOG = LogFactory.getLog(SSOLdapAuthenicationImpl.class);  \n  \n  \n\u00a0public XWikiUser checkAuth(XWikiContext context) throws XWikiException {  \n\u00a0\u00a0String user = getRemoteUser(context);  \n \u00a0if ((user != null) || !user.equals(\"\")) {  \n \u00a0\u00a0if (LOG.isInfoEnabled())  \n\u00a0\u00a0\u00a0\u00a0LOG.info(\"Launching create user for \" + user);  \n \u00a0\u00a0if ( authenticate(user, context) != null ) {  \n \u00a0\u00a0\u00a0if (LOG.isInfoEnabled())  \n\u00a0\u00a0\u00a0\u00a0\u00a0LOG.info(\"Create user done for \" + user);  \n\u00a0\u00a0\u00a0\u00a0user = \"XWiki.\" + user;  \n\u00a0\u00a0\u00a0\u00a0context.setUser(user);  \n\u00a0\u00a0\u00a0\u00a0System.out.println(\"User is set to:\" + user);  \n \u00a0\u00a0\u00a0return new XWikiUser(user);  \n\u00a0\u00a0\u00a0} else {  \n\u00a0\u00a0\u00a0\u00a0LOG.error( \"User \" + user + \" can't be authenticated against ldap\" );  \n\u00a0\u00a0\u00a0}  \n\u00a0\u00a0}  \n \u00a0return super.checkAuth(context);  \n\u00a0}  \n  \n /\\*\\*  \n \u00a0\\* We cannot authenticate locally since we need to trust the app server for  \n \u00a0\\* authentication  \n \u00a0\\*  \n \u00a0\\* @param username  \n \u00a0\\* @param password  \n \u00a0\\* @param context  \n \u00a0\\* @return  \n \u00a0\\* @throws XWikiException  \n \u00a0\\*/  \n\u00a0public XWikiUser checkAuth(String username, String password,  \n\u00a0\u00a0\u00a0String rememberme, XWikiContext context) throws XWikiException {  \n\u00a0\u00a0String user = getRemoteUser(context);  \n \u00a0if ((user == null) || user.equals(\"\")) {  \n \u00a0\u00a0return super.checkAuth(username, password, rememberme, context);  \n\u00a0\u00a0}  \n \u00a0return checkAuth(context);  \n\u00a0}  \n  \n\u00a0private String getRemoteUser(XWikiContext context) {  \n\u00a0\u00a0String userName = context.getRequest().getHttpServletRequest()  \n \u00a0\u00a0\u00a0.getRemoteUser();  \n \u00a0if (userName != null) {  \n \u00a0\u00a0// only take the front of the username@domain  \n\u00a0\u00a0\u00a0String[] elements = userName.split(\"@\", 2);  \n\u00a0\u00a0\u00a0userName = elements[0];  \n\u00a0\u00a0}  \n \u00a0return userName;  \n\u00a0}  \n  \n\u00a0\u00a0\u00a0\u00a0public Principal authenticate(String login, XWikiContext context) throws XWikiException  \n\u00a0\u00a0\u00a0\u00a0{  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (LOG.isTraceEnabled()) {  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LOG.trace(\"Starting LDAP authentication\");  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/\\*  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\\* TODO: Put the next 4 following \"if\" in common with XWikiAuthService to ensure coherence This method was  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\\* returning null on failure so I preserved that behaviour, while adding the exact error messages to the context  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\\* given as argument. However, the right way to do this would probably be to throw XWikiException-s.  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\\*/  \n  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (login == null) {  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// If we can't find the username field then we are probably on the login screen  \n  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (LOG.isDebugEnabled()) {  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LOG.debug(\"The provided user is null.\"  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \" We don't try to authenticate, it probably means the user is in non logged mode.\");  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return null;  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Check for empty usernames  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (login.equals(\"\")) {  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0context.put(\"message\", \"nousername\");  \n  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (LOG.isDebugEnabled()) {  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LOG.debug(\"LDAP authentication failed: login empty\");  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return null;  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// If we have the context then we are using direct mode  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// then we should specify the database  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// This is needed for virtual mode to work  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Principal principal = null;  \n  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Try authentication against ldap  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0principal = ldapAuthenticate(login, \"\", context);  \n  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (LOG.isDebugEnabled()) {  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (principal != null) {  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LOG.debug(\"LDAP authentication succeed with principal [\" + principal.getName() + \"]\");  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LOG.debug(\"LDAP authentication failed for user [\" + login + \"]\");  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n  \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return principal;  \n\u00a0\u00a0\u00a0\u00a0}  \n}# Mail Templates\n\nWhen [logging in](https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/Authentication#HLoggingin), you have the option of resetting your user's password if you forgot it, or to find your username based on your email address. When choosing these options, you'll be sent an email. It's possible to control the templates used for these emails and to customize them by editing the following pages in object mode:\n\n* XWiki.ResetPasswordMailContent\n* XWiki.ForgotUsernameMailContent\n\n\n"}