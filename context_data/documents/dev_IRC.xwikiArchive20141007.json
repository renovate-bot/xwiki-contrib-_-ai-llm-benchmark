{"id": "dev:IRC.xwikiArchive20141007", "url": "https://dev.xwiki.org/xwiki/bin/view/IRC/xwikiArchive20141007", "title": "IRC Archive for channel #xwiki on 07 October 2014 - XWiki", "collection": "Eval-Large", "mimetype": "text/markdown", "language": "en", "content": "\n<momomomomo>\u00a0has quit  \n00:20\u00a0<abusenius>\u00a0has quit  \n02:33\u00a0<D-Spair>\u00a0has quit  \n03:50\u00a0<Denis>\u00a0has joined #xwiki  \n04:04\u00a0<Denis>\u00a0has quit  \n07:18\u00a0<msmeria>\u00a0has joined #xwiki  \n08:03\u00a0<silverdrop>\u00a0has joined #xwiki  \n08:30\u00a0<gdelhumeau>\u00a0has joined #xwiki  \n08:36\u00a0<cjd>\u00a0has joined #xwiki  \n08:40\u00a0<vmassol>\u00a0has joined #xwiki  \n08:42\u00a0<KermitTheFragger>\u00a0has joined #xwiki  \n09:01\u00a0<Lyes>\u00a0has joined #xwiki  \n09:05\u00a0<silverdrop>\u00a0has quit  \n09:07\u00a0<Denis>\u00a0has joined #xwiki  \n09:10\u00a0<woshilapin>\u00a0has joined #xwiki  \n09:18\u00a0<tmortagne>\u00a0has joined #xwiki  \n09:20\u00a0<silverdrop>\u00a0has joined #xwiki  \n09:33\u00a0<DarkKnightCZ>\u00a0has joined #xwiki  \n09:35\u00a0<DarkKnightCZ>\u00a0has quit  \n09:36\u00a0<DarkKnightCZ>\u00a0has joined #xwiki  \n09:50\u00a0<mflorea>\u00a0has joined #xwiki  \n09:58\u00a0<tmortagne>\u00a0vmassol: Hi  \n09:58\u00a0<tmortagne>\u00a0not 100% sure how to answer http://extensions.xwiki.org/xwiki/bin/view/Extension/Git+Module?viewer=comments#xwikicomment\\_0  \n09:59\u00a0<tmortagne>\u00a0is that an old version of https://github.com/xwiki/xwiki-platform/tree/master/xwiki-platform-core/xwiki-platform-git ?  \n10:08\u00a0<Slashman>\u00a0has joined #xwiki  \n10:09\u00a0<vmassol>\u00a0hi tmortagne, reading  \n10:10\u00a0<vmassol>\u00a0fixing  \n10:11\u00a0<tmortagne>\u00a0vmassol: shouldn't it also be synchronized with maven ?  \n10:11\u00a0<vmassol>\u00a0yes doing it  \n10:44\u00a0<evalica>\u00a0has joined #xwiki  \n10:49\u00a0<Enygma`>\u00a0has joined #xwiki  \n11:13\u00a0<AFKGeek>\u00a0has joined #xwiki  \n11:36\u00a0<sdumitriu>\u00a0has quit  \n11:43\u00a0<Inge-\\_>\u00a0has joined #xwiki  \n11:45\u00a0<sdumitriu>\u00a0has joined #xwiki  \n11:47\u00a0<Inge->\u00a0has quit  \n11:47\u00a0<tekzilla>\u00a0has quit  \n11:50\u00a0<tekzilla>\u00a0has joined #xwiki  \n11:54\u00a0<sdumitriu>\u00a0has quit  \n11:59\u00a0<KermitTheFragger>\u00a0has quit  \n12:04\u00a0<sdumitriu>\u00a0has joined #xwiki  \n12:10\u00a0<Slashman>\u00a0has quit  \n12:54\u00a0<tekzilla>\u00a0has quit  \n12:57\u00a0<tmortagne>\u00a0has joined #xwiki  \n13:02\u00a0<Denis>\u00a0has quit  \n13:03\u00a0<tekzilla>\u00a0has joined #xwiki  \n13:24\u00a0<KermitTheFragger>\u00a0has joined #xwiki  \n13:53\u00a0<Denis>\u00a0has joined #xwiki  \n14:11\u00a0<mflorea>\u00a0vmassol: do you have a few minutes?  \n14:12\u00a0<vmassol>\u00a0mflorea: finish 2 hours of meeting otp, need to eat a bit after  \n14:12\u00a0<mflorea>\u00a0ok, np  \n14:12\u00a0<vmassol>\u00a0I'll be back in 10mn  \n14:27\u00a0<vmassol>\u00a0mflorea: shoot  \n14:29\u00a0<vmassol>\u00a0guys we need a RM for XWiki 6.3M1  \n14:29\u00a0<vmassol>\u00a0also the date of release is next Monday  \n14:29\u00a0<vmassol>\u00a0I'm proposing myself for 6.2.2  \n14:29\u00a0<vmassol>\u00a0:)  \n14:30\u00a0<vmassol>\u00a0so 6.2.2: the 15th  \n14:30\u00a0<vmassol>\u00a06.3M1: the 13th  \n14:32\u00a0<mflorea>\u00a0vmassol; I have to write a maven plugin for generating a webjar. I've done it without a plugin but I don't want to duplicate build config. It's a bit annoying to create a maven module for each js I have so I'd like to make it was simple as possible.  \n14:33\u00a0<mflorea>\u00a0I've found this https://github.com/TimMoore/mojo-executor which seems to allow me to easily call other maven plugins  \n14:33\u00a0<vmassol>\u00a0yes  \n14:33\u00a0<vmassol>\u00a0why do we need to create a webjar ourselves?  \n14:34\u00a0<mflorea>\u00a0wdym? who's going to create them for us?  \n14:34\u00a0<vmassol>\u00a0why do we want to expose our js as webjars?  \n14:34\u00a0<vmassol>\u00a0(just curious)  \n14:35\u00a0<vmassol>\u00a0you want to remove the js/ directory?  \n14:35\u00a0<mflorea>\u00a0to be able to declare dependencies? you seemed ok to pacakge the tree widget I worked on as webjar  \n14:35\u00a0<vmassol>\u00a0ok I probably misunderstood :)  \n14:35\u00a0<mflorea>\u00a0:|  \n14:36\u00a0<vmassol>\u00a0(when I replied)  \n14:36\u00a0<vmassol>\u00a0doesn't mean I don't agre :)  \n14:36\u00a0<vmassol>\u00a0\\*agree  \n14:36\u00a0<silverdrop>\u00a0has quit  \n14:36\u00a0<vmassol>\u00a0just need to think if that's something we want to do at large, or under some conditions only  \n14:36\u00a0<vmassol>\u00a0it costs a bit more in term of perf  \n14:37\u00a0<vmassol>\u00a0it costs more in term of xwiki startup actually too  \n14:37\u00a0<mflorea>\u00a0indeed, but you gain the fact that they can be installed and that you can declare them as deps  \n14:38\u00a0<vmassol>\u00a0for xwiki startup it's because most containers will scan the jars by default  \n14:38\u00a0<mflorea>\u00a0yes  \n14:38\u00a0<vmassol>\u00a0yes you gain the EM way of installing the  \n14:38\u00a0<vmassol>\u00a0them  \n14:38\u00a0<mflorea>\u00a0it makes editing js/css files harder  \n14:39\u00a0<mflorea>\u00a0you need server restart (or hot swap)  \n14:39\u00a0<vmassol>\u00a0having your app installable as an extension at runtime is pretty nice  \n14:39\u00a0<vmassol>\u00a0the real question  \n14:40\u00a0<vmassol>\u00a0is for us to decide what we consider core and we consider non core  \n14:41\u00a0<vmassol>\u00a0what we need is a strategy for deciding when some js are packaged as webjar and when they shouldn't  \n14:41\u00a0<vmassol>\u00a0but yes it makes sense to have some non core packaging of js as webjars  \n14:41\u00a0<vmassol>\u00a0so we need a build solution for those  \n14:41\u00a0<vmassol>\u00a0now I don't think we need anything specifyc  \n14:41\u00a0<mflorea>\u00a0I don't see how we could decide between core and not core  \n14:41\u00a0<vmassol>\u00a0just using the jar plugin should be eniugh  \n14:42\u00a0<vmassol>\u00a0\\*enough  \n14:42\u00a0<vmassol>\u00a0what's the problem?  \n14:42\u00a0<mflorea>\u00a0jar plugin is not enough, the version is in the webjar path  \n14:42\u00a0<vmassol>\u00a0so you're using the assembly plugin?  \n14:43\u00a0<vmassol>\u00a0actually  \n14:43\u00a0<mflorea>\u00a0no, I've used maven-resources-plugin (to copy the resources to the right path), yuicompressor to create the minified version (.min.js and .min.css) and then jar plugin  \n14:43\u00a0<vmassol>\u00a0the maven resource plugin might be ehguh  \n14:44\u00a0<vmassol>\u00a0\\*enough  \n14:44\u00a0<vmassol>\u00a0ah minification too  \n14:44\u00a0<mflorea>\u00a0yes, that's what I've used, but I don't want to duplicate this config on each webjar module  \n14:44\u00a0<vmassol>\u00a0ok so what we need is simply a new packaging maybe  \n14:44\u00a0<vmassol>\u00a0hmmm  \n14:44\u00a0<vmassol>\u00a0depends if you have config for the various plugins or not  \n14:45\u00a0<vmassol>\u00a0s/have/need  \n14:45\u00a0<tmortagne>\u00a0most webjars on maven central have been created by the same guys I think so there is probably something somewhere to do that  \n14:45\u00a0<mflorea>\u00a0I've looked into that, but I didn't see how you configure the plugins  \n14:45\u00a0<vmassol>\u00a0tmortagne: I checked and no  \n14:45\u00a0<mflorea>\u00a0tmortagne: http://www.webjars.org/contributing  \n14:45\u00a0<tmortagne>\u00a0ok, too bad  \n14:45\u00a0<mflorea>\u00a0he just used the pom you can find there  \n14:45\u00a0<tmortagne>\u00a0bu that's certainly something they would be interested in I guess  \n14:46\u00a0<tmortagne>\u00a0(or I hope they would be :))  \n14:46\u00a0<vmassol>\u00a0yes possibly indeed  \n14:46\u00a0<vmassol>\u00a0james ward right?  \n14:46\u00a0<mflorea>\u00a0there's a webjar plugin but it doesn't do what we need, https://github.com/webjars/webjars-maven-plugin  \n14:46\u00a0<mflorea>\u00a0only find and install, no package  \n14:47\u00a0<tmortagne>\u00a0yes this one seems to be to manage them, not create them  \n14:47\u00a0<tmortagne>\u00a0but we could maybe contribute a generate goal to it  \n14:47\u00a0<tmortagne>\u00a0unless it's dead  \n14:47\u00a0<vmassol>\u00a0mflorea: that said, it's a bit early to write such a plugin ourselves i think  \n14:47\u00a0<tmortagne>\u00a0actuallt the root is https://github.com/mwanji/webjars-maven-plugin  \n14:48\u00a0<vmassol>\u00a0it doesn't seem that hard to create the pom.xml for one  \n14:48\u00a0<vmassol>\u00a0we could also wait for mixing in maven 4.x ;)  \n14:48\u00a0<vmassol>\u00a0\\*mixins  \n14:48\u00a0<tmortagne>\u00a0yea mixins would be nice for many things  \n14:48\u00a0<mflorea>\u00a0the question is more if webjars are the way to go  \n14:49\u00a0<mflorea>\u00a0it add overhead, especially for small scripts  \n14:50\u00a0<mflorea>\u00a0I have a small \"jobRunner\" script that is used by the tree. I'm not sure what to do with it..  \n14:50\u00a0<silverdrop>\u00a0has joined #xwiki  \n14:50\u00a0<vmassol>\u00a0we could also put them all in xwiki-platform-webjars/ directory but it's not very \u00a0nice  \n14:50\u00a0<vmassol>\u00a0since we want them organized by business domains  \n14:50\u00a0<vmassol>\u00a0a webjar packaing is very easy to do  \n14:51\u00a0<vmassol>\u00a0but it won't bring much either  \n14:51\u00a0<vmassol>\u00a0it'll bring value only if there are no configs to the plugins  \n14:52\u00a0<vmassol>\u00a0I don't think you can put default config in new packaging but I need to check that  \n14:52\u00a0<vmassol>\u00a0I'm talking about https://github.com/xwiki/xwiki-commons/blob/master/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-handlers/src/main/resources/META-INF/plexus/components.xml  \n14:54\u00a0<tmortagne>\u00a0yes an extension is pretty easy to do and it's the cleanest IMO for plugins that are supposed to produce a special package  \n14:55\u00a0<vmassol>\u00a0some doc here btw: http://books.sonatype.com/mvnref-book/reference/writing-plugins-sect-plugins-lifecycle.html  \n14:56\u00a0<vmassol>\u00a0doesn't prevent also writing a new mojo calling the execute mojo  \n14:56\u00a0<vmassol>\u00a0mflorea: FYI I've used it in the xar format mojo  \n14:56\u00a0<vmassol>\u00a0to call the license plugin  \n14:57\u00a0<vmassol>\u00a0https://github.com/xwiki/xwiki-commons/blob/master/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/AbstractVerifyMojo.java  \n14:57\u00a0<vmassol>\u00a0in executeLicenseGoal  \n14:57\u00a0<tmortagne>\u00a0yes in our case i would probably be an extension calling itself for <package>  \n14:57\u00a0<tmortagne>\u00a0s/i/it/  \n15:01\u00a0<mflorea>\u00a0I'm not fully convinced by webjars. You can achieve almost the same with XAR packaging (using either attachments or jsx objects)  \n15:03\u00a0<tmortagne>\u00a0mflorea: maintaining fils js XAR attachment or object is a bit more painful from sources point of view  \n15:04\u00a0<tmortagne>\u00a0s/fils js/files in general/  \n15:04\u00a0<mflorea>\u00a0tmortagne: you attach the js file at build time  \n15:04\u00a0<mflorea>\u00a0so it's not different than webjar  \n15:05\u00a0<mflorea>\u00a0using xmldoc-update-plugin  \n15:05\u00a0<tmortagne>\u00a0except that you have to store it in a page that is a bit useless as a wiki page  \n15:07\u00a0<tmortagne>\u00a0I'm pretty sure loading a webjar is a lot better in term of performances that loading a file attached to a wiki page  \n15:08\u00a0<tmortagne>\u00a0and seems to me webjars is kind of because a standard for js packaging in Maven world, since we are using it already why not using it for our own js too  \n15:09\u00a0<vmassol>\u00a0yes attaching to wiki pages is not nice, takes up space too  \n15:09\u00a0<vmassol>\u00a0what we do need possibly  \n15:09\u00a0<tmortagne>\u00a0at extension level it makes more clear what is a js package and what is an actual set of pages that really need to be pages  \n15:09\u00a0<vmassol>\u00a0is a way for the EM to support resources natively  \n15:09\u00a0<vmassol>\u00a0FS resources that is  \n15:09\u00a0<tmortagne>\u00a0not sure it's really needed, webjar is fine already IMO  \n15:09\u00a0<vmassol>\u00a0(for example a filesystem skin)  \n15:11\u00a0<vmassol>\u00a0it could be an extension to the XAR format too  \n15:11\u00a0<mflorea>\u00a0webjars have some cons:  \n15:11\u00a0<mflorea>\u00a0it's hard to update the files (long dev/debug cycle)  \n15:11\u00a0<tekzilla>\u00a0has quit  \n15:11\u00a0<vmassol>\u00a0the version in the path is great actually  \n15:12\u00a0<vmassol>\u00a0it allows upgrading the libs without having browser cache issues :)  \n15:12\u00a0<tmortagne>\u00a0\"it's hard to update the files (long dev/debug cycle)\" it's also a good thing in some case to not be supposed to modify standard libraries  \n15:13\u00a0<tmortagne>\u00a0for the version I agree that it's a bit of a pain especially when you upgrade and that several extension use the same webjars but in different version  \n15:13\u00a0<AFKGeek>\u00a0has quit  \n15:14\u00a0<tmortagne>\u00a0there should be an API or something that allow you to not specify the version  \n15:14\u00a0<tmortagne>\u00a0i.e. \"just use whatever is the last version\"  \n15:14\u00a0<tmortagne>\u00a0s/last/current/  \n15:15\u00a0<tmortagne>\u00a0we are hiding it in javascript.vm for jquery but it's cheating because we expect that it's the version that will end up in the WAR  \n15:16\u00a0<mflorea>\u00a0vmassol: on the file manager whenever I upgrade a js lib I have to remember to modify bot the pom and the js code. I know there are pros for using the verison, but there are cons too  \n15:16\u00a0<vmassol>\u00a0if you remove the version you'll just need to invent some other id for refrshing cahces on upgrades  \n15:16\u00a0<vmassol>\u00a0I don't know any other solution  \n15:16\u00a0<tmortagne>\u00a0if any extension specify an exact version it will be broken as soon as the webjar is upgraded for any reason  \n15:17\u00a0<tekzilla>\u00a0has joined #xwiki  \n15:17\u00a0<tmortagne>\u00a0$services.webjars.url API could maybe check what is the available version  \n15:17\u00a0<vmassol>\u00a0yes we can provide an api  \n15:17\u00a0<vmassol>\u00a0as we do  \n15:17\u00a0<vmassol>\u00a0yes  \n15:17\u00a0<tmortagne>\u00a0and we could call $services.webjars.url(\"jquery\", \"jquery${jsExtension}\")  \n15:17\u00a0<tmortagne>\u00a0instead of $services.webjars.url(\"jquery/1.11.1/jquery${jsExtension}\")  \n15:18\u00a0<tmortagne>\u00a0would be safer IMO  \n15:18\u00a0<vmassol>\u00a0just need to find a way to discover the version  \n15:18\u00a0<vmassol>\u00a0can reflections fwk do this?  \n15:18\u00a0<tmortagne>\u00a0should be easy with reflections  \n15:18\u00a0<vmassol>\u00a0ok  \n15:20\u00a0<tmortagne>\u00a0actually probably not even, they could have a custom property indicate it's webjars and you would just have to look at extensions  \n15:21\u00a0<tmortagne>\u00a0it's would be even easier if they had a special <packaging> instead of jar  \n15:22\u00a0<vmassol>\u00a0you mean using the em module to access a custom property set in maven'ts pom.xml and representing the version right?  \n15:22\u00a0<tmortagne>\u00a0not the version  \n15:22\u00a0<tmortagne>\u00a0you have the version already  \n15:22\u00a0<tmortagne>\u00a0that's the version of the extension  \n15:22\u00a0<tmortagne>\u00a0just knowing that an extension is a webjar  \n15:23\u00a0<vmassol>\u00a0hmm but you don't have the name of the extension  \n15:23\u00a0<vmassol>\u00a0ah you pass it  \n15:23\u00a0<vmassol>\u00a0ok  \n15:23\u00a0<vmassol>\u00a0so we don't even need another property  \n15:23\u00a0<vmassol>\u00a0just get the extension version and add it to the path  \n15:23\u00a0<tmortagne>\u00a0but maybe just getting org.webjars:<id> is enough  \n15:23\u00a0<tmortagne>\u00a0asuing it's always org.webjar as group id basically  \n15:24\u00a0<vmassol>\u00a0or pass the full extension id in the getURL() call  \n15:24\u00a0<vmassol>\u00a0since I'm not sure if we want to package our webjar using org.webjar  \n15:24\u00a0<vmassol>\u00a0we probably want org.xwiki.\\*  \n15:24\u00a0<vmassol>\u00a0safer to pass the full id IMO  \n15:24\u00a0<tmortagne>\u00a0then directly take the full extension id in the API  \n15:24\u00a0<vmassol>\u00a0so is this fast?  \n15:25\u00a0<tmortagne>\u00a0probably the simplest  \n15:25\u00a0<vmassol>\u00a0finding the version using the em module at unrimte?  \n15:25\u00a0<vmassol>\u00a0\\*runtime  \n15:25\u00a0<vmassol>\u00a0all in memory right?  \n15:25\u00a0<tmortagne>\u00a0it's a Map#get  \n15:25\u00a0<vmassol>\u00a0ok  \n15:25\u00a0<tmortagne>\u00a0all extensions descriptors are in memory  \n15:26\u00a0<tmortagne>\u00a0the local repository is actually just remembering things between restarts  \n15:28\u00a0<tmortagne>\u00a0even webjars in the WAR are found as extensions (core extensions)  \n15:29\u00a0<tmortagne>\u00a0so it works for them too and we can could remove the version from javascript.vm  \n15:29\u00a0<tmortagne>\u00a0s/can/  \n15:29\u00a0<tmortagne>\u00a0is .min.js something standard in all webjars ?  \n15:30\u00a0<mflorea>\u00a0you can have both .js and .min.js  \n15:30\u00a0<mflorea>\u00a0it's a pretty standard naming convention  \n15:31\u00a0<mflorea>\u00a0what about the dev cycle? You have to copy the js file to resources/ (like now, in order to have the unminified version) but then you need to update the places where the file is loaded, to use a different path  \n15:31\u00a0<tmortagne>\u00a0I was thinking that we should probably also skip this part in $services.webjars.url(\"jquery\", \"jquery${jsExtension}\") and let the webjars service decide based on a configuration if it would ask for min or not  \n15:31\u00a0<mflorea>\u00a0you'd have to check if the unminified version is present. Some webjars package only the minified version  \n15:32\u00a0<tmortagne>\u00a0yes that's why I was asking if it was always present  \n15:32\u00a0<mflorea>\u00a0i.e. fallback on the minified version is the unminified is not present  \n15:32\u00a0<tmortagne>\u00a0if not then no  \n15:32\u00a0<tmortagne>\u00a0as for the dev cycle it's the same as the jar dev cycle  \n15:32\u00a0<mflorea>\u00a0jstree webjar doesn't pacakge the unminified version for instance. angular does  \n15:33\u00a0<tmortagne>\u00a0ok was just an idea if it was part of some webjar specs  \n15:33\u00a0<mflorea>\u00a0it's longer than java dev cycle  \n15:33\u00a0<mflorea>\u00a0you also need to modify the call that loads the resource  \n15:33\u00a0<tmortagne>\u00a0not if you don't provide the version  \n15:34\u00a0<mflorea>\u00a0ah, I see what you mean  \n15:34\u00a0<tmortagne>\u00a0unless you are talking about something else than the version  \n15:35\u00a0<tmortagne>\u00a0the main issue with providing the version is not even dev cycle for me, it makes writing an extension almost impossible since it will be broken when the webjar it's expecting is upgraded for any reason  \n15:35\u00a0<mflorea>\u00a0yes, if you use the java dev cycle you need a way to turn minification off (load the unminified versions)  \n15:36\u00a0<mflorea>\u00a0but I was thinking more of the pure js dev cycle where you just have to refresh the page  \n15:36\u00a0<tmortagne>\u00a0yes but we really need a conf to turn of minification in general during dev cycle since it's a pain right now  \n15:36\u00a0<mflorea>\u00a0I definitely wouldn't like to dev js as java  \n15:37\u00a0<tmortagne>\u00a0yes you need to restart with a jar  \n15:37\u00a0<mflorea>\u00a0yes  \n15:37\u00a0<tmortagne>\u00a0it not as nice as pure resource modification  \n15:37\u00a0<mflorea>\u00a0yes  \n15:37\u00a0<tmortagne>\u00a0but it's better that an attachment in a wiki page ;)  \n15:38\u00a0<mflorea>\u00a0yes, but not us good as a jsx  \n15:39\u00a0<vmassol>\u00a0we're not supposed to modify external libs so for them it's not an issue  \n15:39\u00a0<tmortagne>\u00a0now in practice with a bit of tooling the jar could be replacing at runtime without restarting if installed as extension  \n15:39\u00a0<vmassol>\u00a0it's more for the js we produce ourselves  \n15:39\u00a0<mflorea>\u00a0vmassol: yes, for code we develop  \n15:40\u00a0<tmortagne>\u00a0s/replacing/replaced/  \n15:40\u00a0<vmassol>\u00a0so a XAR format 2.0 that also supports resources exploded on the FS could be nice\u2026  \n15:40\u00a0<mflorea>\u00a0Ideally, I would like to have the js file in the maven module but the package to be xar and the js file copied in the jsx.  \n15:41\u00a0<vmassol>\u00a0a file on the FS shoud be good enough for the dev cycle no?  \n15:41\u00a0<vmassol>\u00a0(I don't think the jsx brings more)  \n15:41\u00a0<vmassol>\u00a0now we need to decide when it's good to use jsx and when it's not  \n15:41\u00a0<mflorea>\u00a0In other words: (1) I'd like to be able to edit the file on the file system using my IDE and also to be able to run js unit tests using tools like jasmine and (2) be able to edit the file from the wiki  \n15:41\u00a0<tmortagne>\u00a0not if you have to modify the file on fs and then package a XAR to import each time you want to test something  \n15:42\u00a0<vmassol>\u00a0right now we have both js on the FS and js in jsx  \n15:42\u00a0<tmortagne>\u00a0I think mflorea meant modifying the jsx and then copy past on fs when happy  \n15:42\u00a0<vmassol>\u00a0what's our rule for deciding where to put them? :)  \n15:42\u00a0<mflorea>\u00a0vmassol: I need jsx because I want to develop in the wiki. I need file system because I need to be able to run tools like unit test or js lint/minification/verification on the file system  \n15:43\u00a0<vmassol>\u00a0a page is not better  \n15:43\u00a0<vmassol>\u00a0since you export it to commit it  \n15:43\u00a0<vmassol>\u00a0it's worse actually ;)  \n15:43\u00a0<vmassol>\u00a0why do you want to develop in the wiki?  \n15:43\u00a0<vmassol>\u00a0if you have your IDE opened ona \u00a0FS file  \n15:43\u00a0<vmassol>\u00a0you just save and it works  \n15:44\u00a0<mflorea>\u00a0it's faster to develop in the wiki. For fs you don't edit the webapp, you edit the maven module, so you need to setup deployment  \n15:44\u00a0<mflorea>\u00a0or copy files manually  \n15:45\u00a0<vmassol>\u00a0when I work on a JS file  \n15:45\u00a0<vmassol>\u00a0I have my xwiki instance  \n15:45\u00a0<vmassol>\u00a0running  \n15:45\u00a0<vmassol>\u00a0and I edit , for example xwiki.js on the FS  \n15:45\u00a0<vmassol>\u00a0I make modifications to it  \n15:45\u00a0<vmassol>\u00a0save  \n15:45\u00a0<vmassol>\u00a0and refresh my browser  \n15:45\u00a0<vmassol>\u00a0when I'm happy I copy my modifications to the maven tree  \n15:46\u00a0<mflorea>\u00a0I do that too  \n15:46\u00a0<vmassol>\u00a0(for wiki pages I'd have to export the page and copy it)  \n15:46\u00a0<vmassol>\u00a0(ie 2 steps)  \n15:46\u00a0<vmassol>\u00a0not counting the unzip  \n15:46\u00a0<vmassol>\u00a03 steps  \n15:46\u00a0<mflorea>\u00a0how do you \"import\" xwiki.js in IDEA?  \n15:46\u00a0<tmortagne>\u00a0vmassol: this file is not in an extension so yes it's easy in this case  \n15:47\u00a0<vmassol>\u00a0I dont use IDEA for that but you can open it easily  \n15:47\u00a0<vmassol>\u00a0IDEA allows opening single files  \n15:47\u00a0<mflorea>\u00a0ok, I use gedit too  \n15:47\u00a0<tmortagne>\u00a0the issue is how to work on a resource that is not part of the standard WAR  \n15:47\u00a0<mflorea>\u00a0in any case, for js dev we need to be able to edit the file and refresh the browser page  \n15:47\u00a0<vmassol>\u00a0tmortagne: it's the same for me  \n15:47\u00a0<vmassol>\u00a0because  \n15:47\u00a0<vmassol>\u00a0if the EM knows about a resource type  \n15:48\u00a0<vmassol>\u00a0it'll explode it on the FS  \n15:48\u00a0<vmassol>\u00a0so from then on it's the same as for xwiki.js for ex  \n15:50\u00a0<tmortagne>\u00a0depends what you mean exactly by \"FS\", a webapp is usually not allowed to write in its WAR/folder  \n15:51\u00a0<vmassol>\u00a0can be anywhere  \n15:51\u00a0<vmassol>\u00a0could be in the data dir for ex  \n15:51\u00a0<vmassol>\u00a0since this is where we have extensions  \n15:53\u00a0<KermitTheFragger>\u00a0has quit  \n15:53\u00a0<tmortagne>\u00a0ok this folder is not really a EM feature, it's more some web resource manager system feature to which EM among other things can provide resources  \n15:55\u00a0<vmassol>\u00a0yes, actually we have Environment.getResource() already  \n15:55\u00a0<vmassol>\u00a0(which could be made to also look there)  \n15:55\u00a0<KermitTheFragger>\u00a0has joined #xwiki  \n15:55\u00a0<tmortagne>\u00a0pretty weird release note https://github.com/mockito/mockito/blob/master/doc/release-notes/official.md  \n15:56\u00a0<vmassol>\u00a0the bottom is more standard...  \n15:58\u00a0<tmortagne>\u00a0not sure what \"Mockito @Rule for JUnit\" means, searching if there is some doc since it sounds interesting  \n16:01\u00a0<tmortagne>\u00a0ok I see, could be nice  \n16:01\u00a0<tmortagne>\u00a0example on https://github.com/jerzykrlk/mockito/blob/b6fe6a1b6c6b03f350bf3fe6568c5ae512b4216a/src/org/mockito/rules/MockitoJUnitRule.java  \n16:02\u00a0<msmeria>\u00a0has quit  \n16:02\u00a0<tmortagne>\u00a0but I don't really understand why it needs to take this in parameter  \n16:08\u00a0<woshilapin>\u00a0has quit  \n16:09\u00a0<AFKGeek>\u00a0has joined #xwiki  \n16:16\u00a0<tmortagne>\u00a0did not notices we were using a version of Mockito that old  \n16:17\u00a0<tmortagne>\u00a0(2 years since 1.9.5)  \n16:18\u00a0<DarkKnightCZ>\u00a0has quit  \n16:21\u00a0<woshilapin>\u00a0has joined #xwiki  \n16:59\u00a0<AFKGeek>\u00a0has quit  \n17:04\u00a0<gdelhumeau>\u00a0has quit  \n17:11\u00a0<woshilapin>\u00a0has quit  \n17:13\u00a0<woshilapin>\u00a0has joined #xwiki  \n17:14\u00a0<silverdrop>\u00a0has quit  \n17:30\u00a0<momomomomo>\u00a0has joined #xwiki  \n17:32\u00a0<KermitTheFragger>\u00a0has quit  \n17:36\u00a0<silverdrop>\u00a0has joined #xwiki  \n17:38\u00a0<momomomomo>\u00a0has quit  \n17:48\u00a0<Slashman>\u00a0has joined #xwiki  \n17:51\u00a0<woshilapin>\u00a0has quit  \n18:01\u00a0<tmortagne>\u00a0has quit  \n18:07\u00a0<momomomomo>\u00a0has joined #xwiki  \n18:09\u00a0<cjd>\u00a0has quit  \n18:14\u00a0<momomomomo>\u00a0has quit  \n18:26\u00a0<Enygma`>\u00a0has quit  \n18:29\u00a0<woshilapin>\u00a0has joined #xwiki  \n18:45\u00a0<momomomomo>\u00a0has joined #xwiki  \n18:54\u00a0<momomomomo>\u00a0has quit  \n19:03\u00a0<andreeapopescu>\u00a0has joined #xwiki  \n19:09\u00a0<Lyes>\u00a0has quit  \n19:16\u00a0<Enygma`>\u00a0has joined #xwiki  \n19:17\u00a0<evalica>\u00a0has quit  \n19:17\u00a0<Enygma`>\u00a0has quit  \n19:21\u00a0<mflorea>\u00a0has quit  \n19:28\u00a0<abusenius>\u00a0has joined #xwiki  \n19:44\u00a0<Slashman>\u00a0has quit  \n19:48\u00a0<Denis>\u00a0has quit  \n19:49\u00a0<Guest1308>\u00a0has joined #xwiki  \n19:51\u00a0<Guest1308>\u00a0has quit  \n20:01\u00a0<Denis>\u00a0has joined #xwiki  \n20:07\u00a0<andreeapopescu>\u00a0has quit  \n20:23\u00a0<momomomomo>\u00a0has joined #xwiki  \n20:24\u00a0<tmortagne>\u00a0has joined #xwiki  \n20:24\u00a0<tmortagne>\u00a0has left #xwiki  \n20:44\u00a0<momomomomo>\u00a0has quit  \n20:47\u00a0<OSIMasson>\u00a0has left #xwiki  \n20:48\u00a0<woshilapin>\u00a0has quit  \n20:51\u00a0<momomomomo>\u00a0has joined #xwiki  \n21:00\u00a0<andreeapopescu>\u00a0has joined #xwiki  \n21:06\u00a0<silverdrop>\u00a0has quit  \n21:13\u00a0<andreeapopescu>\u00a0has quit  \n21:51\u00a0<andreeapopescu>\u00a0has joined #xwiki  \n21:53\u00a0<andreeapopescu>\u00a0has quit  \n22:09\u00a0<momomomomo>\u00a0has quit  \n22:21\u00a0<Denis>\u00a0has quit  \n22:24\u00a0<momomomomo>\u00a0has joined #xwiki  \n22:55\u00a0<abusenius>\u00a0has quit\n"}