{"id": "dev:IRC.xwikiArchive20150715", "url": "https://dev.xwiki.org/xwiki/bin/view/IRC/xwikiArchive20150715", "title": "IRC Archive for channel #xwiki on 15 July 2015 - XWiki", "collection": "Eval-Large", "mimetype": "text/markdown", "language": "en", "content": "\n<abusenius>\u00a0has quit  \n01:38\u00a0<ansuz>\u00a0has quit  \n01:38\u00a0<ansuz>\u00a0has joined #xwiki  \n02:59\u00a0<sdumitriu>\u00a0has quit  \n03:14\u00a0<sdumitriu>\u00a0has joined #xwiki  \n06:02\u00a0<Denis>\u00a0has joined #xwiki  \n06:03\u00a0<Denis1>\u00a0has quit  \n06:43\u00a0<mflorea>\u00a0has joined #xwiki  \n08:05\u00a0<vmassol>\u00a0has joined #xwiki  \n08:07\u00a0<Ramona2>\u00a0has joined #xwiki  \n08:12\u00a0<cjd>\u00a0has quit  \n08:27\u00a0<abusenius>\u00a0has joined #xwiki  \n08:40\u00a0<msmeria>\u00a0has joined #xwiki  \n08:45\u00a0<KermitTheFragger>\u00a0has joined #xwiki  \n08:49\u00a0<Pbas>\u00a0has joined #xwiki  \n08:52\u00a0<mflorea>\u00a0has quit  \n08:53\u00a0<lucaa>\u00a0has joined #xwiki  \n08:54\u00a0<cjd>\u00a0has joined #xwiki  \n09:04\u00a0<lucaa>\u00a0has quit  \n09:04\u00a0<lucaa1>\u00a0has joined #xwiki  \n09:23\u00a0<gsmeria>\u00a0has joined #xwiki  \n09:24\u00a0<gsmeria1>\u00a0has joined #xwiki  \n09:24\u00a0<gsmeria>\u00a0has quit  \n09:29\u00a0<mflorea>\u00a0has joined #xwiki  \n09:31\u00a0<gdelhumeau>\u00a0has joined #xwiki  \n09:37\u00a0<Slashman>\u00a0has joined #xwiki  \n09:38\u00a0<vmassol>\u00a0mflorea: do you know why line ednings have changed in http://www.xwiki.org/xwiki/bin/view/Main/Support?viewer=changes&rev1=30.1&rev2=30.4 ?  \n09:38\u00a0<vmassol>\u00a0doesn't look right  \n09:38\u00a0<mflorea>\u00a0let me see  \n09:39\u00a0<mflorea>\u00a0vmassol: probably because Windows vs. Linux editing  \n09:39\u00a0<vmassol>\u00a0yes but that doesn't look noemal  \n09:39\u00a0<vmassol>\u00a0\\*normal  \n09:40\u00a0<vmassol>\u00a0that would mean we don't normalize the content and all xobjects are saved again when yiu save  \n09:40\u00a0<vmassol>\u00a0\\*you  \n09:40\u00a0<mflorea>\u00a0I don't think we do this  \n09:40\u00a0<vmassol>\u00a0only the modified xobject should we modified in the DB  \n09:40\u00a0<vmassol>\u00a0not all comments  \n09:40\u00a0<vmassol>\u00a0s/should we/should be  \n09:41\u00a0<mflorea>\u00a0I think that in object editor all the objects are updated  \n09:41\u00a0<vmassol>\u00a0ok I'm opening a jira issue, we probably already have one though  \n09:41\u00a0<mflorea>\u00a0when you save, because the entire HTML form (with all the fields for each object) is submitted  \n09:41\u00a0<Trefex>\u00a0has joined #xwiki  \n09:42\u00a0<mflorea>\u00a0but from the diff it looks like the user only added some comments, so I doubt it was from object editor  \n09:42\u00a0<vmassol>\u00a0hmm  \n09:42\u00a0<vmassol>\u00a0I added 2 comments  \n09:42\u00a0<mflorea>\u00a0and the add comment form shouldn't affect existing comments  \n09:42\u00a0<vmassol>\u00a0and the link I gave you now doesn't show the issue anymore  \n09:43\u00a0<vmassol>\u00a0why is even more weird  \n09:44\u00a0<vmassol>\u00a0do you still have it open in ordder to take a screenshot for thr issue?  \n09:44\u00a0<vmassol>\u00a0:)  \n09:44\u00a0<mflorea>\u00a0yes  \n09:44\u00a0<vmassol>\u00a0cool  \n09:44\u00a0<vmassol>\u00a0starting issue creation  \n09:44\u00a0<vmassol>\u00a0and you can add it once I'm done  \n09:46\u00a0<mflorea>\u00a0yes, just give me the link  \n09:50\u00a0<vmassol>\u00a0mflorea: http://jira.xwiki.org/browse/XWIKI-12307# could you name your file diff1.png?  \n09:50\u00a0<mflorea>\u00a0sure  \n09:51\u00a0<mflorea>\u00a0done  \n09:51\u00a0<vmassol>\u00a0thx  \n09:53\u00a0<vmassol>\u00a0mflorea: 18 test failures at http://ci.xwiki.org/job/xwiki-enterprise-test-ui/lastCompletedBuild/testReport/ For example http://ci.xwiki.org/job/xwiki-enterprise-test-ui/lastCompletedBuild/org.xwiki.enterprise$xwiki-enterprise-test-ui/testReport/org.xwiki.test.ui/EditObjectsTest/testPropertyDisplayersForNewObjects/ doesn't seem related to the new script permissions, is it?  \n09:59\u00a0<gsmeria1>\u00a0has quit  \n10:00\u00a0<gsmeria>\u00a0has joined #xwiki  \n10:00\u00a0<mflorea>\u00a0vmassol: checking  \n10:55\u00a0<Trefex>\u00a0has quit  \n11:13\u00a0<gsmeria>\u00a0has quit  \n11:16\u00a0<ClemensR>\u00a0has joined #xwiki  \n11:30\u00a0<Enygma`>\u00a0has joined #xwiki  \n11:35\u00a0<spawn57>\u00a0has joined #xwiki  \n11:36\u00a0<spawn57>\u00a0Hi, For the share page by email feature. Is it possible to customise the email template?  \n11:39\u00a0<vmassol>\u00a0spawn57: yes  \n11:39\u00a0<vmassol>\u00a0it's located in XWiki.SharePage AFAIR  \n11:39\u00a0<vmassol>\u00a0yep that's it (just checked)  \n11:40\u00a0<vmassol>\u00a0so you edit that page using the object editor and you can customize the template  \n11:40\u00a0<spawn57>\u00a0thanks!  \n11:41\u00a0<vmassol>\u00a0added quickly here FYI: http://extensions.xwiki.org/xwiki/bin/view/Extension/Share+Page+Application#HConfiguretheMailTemplate  \n11:47\u00a0<Trefex>\u00a0has joined #xwiki  \n11:59\u00a0<evalica>\u00a0has joined #xwiki  \n12:03\u00a0<woshilapin>\u00a0Hi here, I will probably ask a dumb question but I'd like to understand anyway...  \n12:03\u00a0<woshilapin>\u00a0To Inject a component, I have 3 ways:  \n12:03\u00a0<woshilapin>\u00a0- @Inject  \n12:03\u00a0<woshilapin>\u00a0- Utils.getComponent  \n12:03\u00a0<woshilapin>\u00a0- Creating a provider  \n12:03\u00a0<woshilapin>\u00a0Right?  \n12:04\u00a0<woshilapin>\u00a0If yes, I'd like to understand the difference between the last 2  \n12:05\u00a0<woshilapin>\u00a0(because second is one-line, and for the third, you have to inject a provider, and then use it, so it's more 2 lines (3 with the @Inject))  \n12:10\u00a0<vmassol>\u00a0no  \n12:10\u00a0<vmassol>\u00a0well  \n12:10\u00a0<vmassol>\u00a0:)  \n12:10\u00a0<woshilapin>\u00a0:-)  \n12:10\u00a0<vmassol>\u00a0Utils is a hack  \n12:10\u00a0<vmassol>\u00a0to access components from a non component world  \n12:11\u00a0<woshilapin>\u00a0OK, so the nice way is the provider...  \n12:11\u00a0<vmassol>\u00a0provider is for factories  \n12:11\u00a0<woshilapin>\u00a0Yes, but I guess that if @Singleton...  \n12:11\u00a0<vmassol>\u00a0to inject a component there's only a single way  \n12:11\u00a0<vmassol>\u00a0@Inject  \n12:11\u00a0<woshilapin>\u00a0OK, let me explain my problem with @Inject  \n12:12\u00a0<vmassol>\u00a0actually there are 2 ways  \n12:12\u00a0<woshilapin>\u00a0(and be sure that architecture is probably not perfect)  \n12:12\u00a0<vmassol>\u00a0the second way is to sue the CM  \n12:12\u00a0<cjd>\u00a0If there are 2 ways to do something which are functionally equivilant, always prefer the one which requires typing more code  \n12:12\u00a0<cjd>\u00a0<trollface>  \n12:13\u00a0<woshilapin>\u00a0I inherit from a class that contains an attribute (and I want parent class to not depend on components which means annotations and stuff)  \n12:13\u00a0<vmassol>\u00a0woshilapin: you read http://extensions.xwiki.org/xwiki/bin/view/Extension/Component+Module right?  \n12:13\u00a0<woshilapin>\u00a0And in the child class, I'd like to inject this attribute, (potentially different hint in different implementations)  \n12:13\u00a0<vmassol>\u00a0BTW Provider \\*is\\* a component  \n12:14\u00a0<vmassol>\u00a0you also @Inject it  \n12:14\u00a0<woshilapin>\u00a0Yes, but that I would use in the child which is fine  \n12:14\u00a0<vmassol>\u00a0I think your question is whether we support constructor injection and the answer is no  \n12:15\u00a0<woshilapin>\u00a0Then I'll try to understand my question first :-P  \n12:15\u00a0<vmassol>\u00a0so you have to pass what you need to your POJO so that it can find other components  \n12:15\u00a0<vmassol>\u00a0either passing the components it needs in its constructor or passing the CM instance  \n12:15\u00a0<vmassol>\u00a0(if I understand your need ;))  \n12:16\u00a0<woshilapin>\u00a0Yes, call Utils.getComponent in the constructor would be my solution but as far as I understand, it doesn't work  \n12:17\u00a0<woshilapin>\u00a0(and then, I guess, I understand my question, right?)  \n12:17\u00a0<vmassol>\u00a0don't use Utils if you can avoid it  \n12:17\u00a0<vmassol>\u00a0just pass the component you need  \n12:17\u00a0<woshilapin>\u00a0(yes, it was shorter to write but I would use provider)  \n12:17\u00a0<cjd>\u00a0initialize() { super.setWhateverAttribute(this.injectedAttributeThingy); }  \n12:17\u00a0<vmassol>\u00a0inversion of control  \n12:17\u00a0<cjd>\u00a0initialize is called after injections are complet  \n12:17\u00a0<woshilapin>\u00a0Yes, that what Fabio suggested me, but I was trying to understand really the problem :-)  \n12:18\u00a0<woshilapin>\u00a0extends Initializable and then define initialize() method seems to be my solution then  \n12:18\u00a0<cjd>\u00a0the CM will create the object, then it will reflect the private fields and put the stuff in them according to the @Inject annoatations  \n12:18\u00a0<woshilapin>\u00a0(or implements Initializable...)  \n12:18\u00a0<cjd>\u00a0then it will look for an initialize() and call it if it exists  \n12:18\u00a0<vmassol>\u00a0so your use case is to provision a POJO, right?  \n12:19\u00a0<vmassol>\u00a0so indeed 2 choices:  \n12:19\u00a0<vmassol>\u00a01) Implement a Provider to return a provisioned POJO  \n12:19\u00a0<vmassol>\u00a02) Pass whatever the POJO needs in its constructor (ie all components it needs)  \n12:19\u00a0<cjd>\u00a0AFAICT he's trying to set some crap in the superclass  \n12:19\u00a0<vmassol>\u00a0but evenf or 1) you'll need to do 2) ;)  \n12:20\u00a0<vmassol>\u00a0cjd: I don't see what that has to do with components  \n12:20\u00a0<cjd>\u00a0The component is a subclass of something which needs some customization itself  \n12:21\u00a0<vmassol>\u00a0then yes Initializable is good for this  \n12:21\u00a0<cjd>\u00a0he's using the Object Inheritence antipattern so he has to use a hack here  \n12:21\u00a0<vmassol>\u00a0if you need to do that at init time and not in a lazy way  \n12:24\u00a0<woshilapin>\u00a0OK, thanks both of you  \n12:24\u00a0<woshilapin>\u00a0I think I'll sleep on that at lunch for now :-)  \n13:28\u00a0<Denis1>\u00a0has joined #xwiki  \n13:30\u00a0<lynxt\\_>\u00a0has joined #xwiki  \n13:31\u00a0<tillo\\_>\u00a0has joined #xwiki  \n13:37\u00a0<Denis>\u00a0has quit  \n13:37\u00a0<tillo>\u00a0has quit  \n13:37\u00a0<Pbas>\u00a0has quit  \n13:37\u00a0<Pbas>\u00a0has joined #xwiki  \n13:37\u00a0<tillo\\_>\u00a0is now known as <tillo>  \n14:09\u00a0<tmortagne>\u00a0has joined #xwiki  \n14:18\u00a0<OSIMasson>\u00a0has quit  \n14:36\u00a0<Ramona>\u00a0has joined #xwiki  \n15:13\u00a0<Ramona>\u00a0has quit  \n15:27\u00a0<OSIMasson>\u00a0has joined #xwiki  \n15:29\u00a0<OSIMasson>\u00a0has quit  \n15:33\u00a0<Denis1>\u00a0is now known as <Denis>  \n15:49\u00a0<Ramona>\u00a0has joined #xwiki  \n16:26\u00a0<OSIMasson>\u00a0has joined #xwiki  \n16:27\u00a0<Ramona>\u00a0has quit  \n16:28\u00a0<Denis>\u00a0has quit  \n16:28\u00a0<Denis1>\u00a0has joined #xwiki  \n16:31\u00a0<msmeria>\u00a0has quit  \n17:15\u00a0<OSIMasson>\u00a0has quit  \n17:15\u00a0<OSIMasson>\u00a0has joined #xwiki  \n17:30\u00a0<sdumitriu>\u00a0tmortagne: Question about GenericProvider https://github.com/xwiki/xwiki-commons/blob/master/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/src/main/java/org/xwiki/component/embed/GenericProvider.java  \n17:30\u00a0<tmortagne>\u00a0sdumitriu: shoot  \n17:30\u00a0<sdumitriu>\u00a0Any reason why it uses the root component manager, and not the default one?  \n17:31\u00a0<sdumitriu>\u00a0Wait  \n17:31\u00a0<sdumitriu>\u00a0By default, I mean \"context/root\"  \n17:32\u00a0<tmortagne>\u00a0on we don't have the same definition of root indeed :)  \n17:32\u00a0<tmortagne>\u00a0it's using the CM from which it come from  \n17:33\u00a0<tmortagne>\u00a0meaning that if a component installed in some wiki is responsible to asking this provider then the provider will see other components in the wiki  \n17:33\u00a0<tmortagne>\u00a0if we force the provider to use the root CM is will only see root component  \n17:33\u00a0<sdumitriu>\u00a0Which, for components initialized at startup, is the root component manager  \n17:33\u00a0<tmortagne>\u00a0yes  \n17:34\u00a0<tmortagne>\u00a0but only for them  \n17:34\u00a0<tmortagne>\u00a0there is no reason to force the provider wherever it come from to use the root CM  \n17:35\u00a0<tmortagne>\u00a0eventually it will end up in the root CM if it can't find anything in the current one so not sure hat is the issue exactly  \n17:35\u00a0<tmortagne>\u00a0s/hat/what/  \n17:35\u00a0<sdumitriu>\u00a0Here's my usecase:  \n17:35\u00a0<sdumitriu>\u00a0@Inject Provider<List<SomeComponent>>  \n17:35\u00a0<sdumitriu>\u00a0.get() doesn't give me components installed with the extension manager  \n17:36\u00a0<sdumitriu>\u00a0So I had to implement my own Provider, which uses @Inject @Named(\"wiki\") ComponentManager  \n17:37\u00a0<tmortagne>\u00a0actually you'd probably better use the context component manager  \n17:37\u00a0<sdumitriu>\u00a0The reason is that the component manager injected in the GenericProvider was the root one  \n17:37\u00a0<tmortagne>\u00a0which will give you the righ SomeComponent depending on the current wiki, user etc  \n17:37\u00a0<tmortagne>\u00a0s/SomeComponent/SomeComponents/  \n17:37\u00a0<sdumitriu>\u00a0I thought about that, but since I use that to get some authorization modules, I don't want to use the \"user\" and \"document\" component manager  \n17:38\u00a0<sdumitriu>\u00a0That would allow them to bypass authorization, if they're clever enough  \n17:38\u00a0<tmortagne>\u00a0you would need PR to inject this kind of component anyway but as you like, it's better for performances anyway if wiki is enought for you  \n17:41\u00a0<tmortagne>\u00a0so basically you initial question is why don't all Provider use the context CM or is it something else ?  \n17:42\u00a0<sdumitriu>\u00a0Yes  \n17:42\u00a0<tmortagne>\u00a0the exact answer would be that GenericProvider is older than the concept of context CM :) but \u00a0that would certainly cover some use cases that prevent from using Providers right now  \n17:44\u00a0<sdumitriu>\u00a0So that's something you'd consider a good improvement?  \n17:45\u00a0<tmortagne>\u00a0we could maybe imagine support something like  \n17:46\u00a0<tmortagne>\u00a0to be sure to not break some use case where the component really wanted the Provider to only search in its CM  \n17:46\u00a0<tmortagne>\u00a0it's certainly a nice tool  \n17:46\u00a0<sdumitriu>\u00a0The issue is that @Named applies to the component, not the provider  \n17:47\u00a0<tmortagne>\u00a0right now yes, but we can probably find something  \n17:48\u00a0<tmortagne>\u00a0either introduce a set a annotation to control GenericProvider which is too limited right now and would be nice for other use cases  \n17:48\u00a0<sdumitriu>\u00a0We can define a new javax.inject.Qualifier  \n17:49\u00a0<tmortagne>\u00a0javax.inject.Qualifier would be supposed to have the same logic than @Named wich is itself supposed to be just a javax.inject.Qualifier  \n17:49\u00a0<sdumitriu>\u00a0For example @Documented @Retention(RUNTIME) @Qualifier public @interface ProviderType  \n17:49\u00a0<tmortagne>\u00a0if we start supporting any javax.inject.Qualifier it's going to conflict  \n17:49\u00a0<sdumitriu>\u00a0And then we can use @ProviderType(\"context\")  \n17:50\u00a0<vmassol>\u00a0btw on a related topic, we should seriously consider moving to CDI 2.0 which now supports JSE (and it's probably possible to do some runtime registration of beans - this is the part that needs to be researched)  \n17:51\u00a0<tmortagne>\u00a0well we should consider moving it if there is runtime registration :)  \n17:51\u00a0<tmortagne>\u00a0s/it/to it/  \n17:51\u00a0<tmortagne>\u00a0without that it's pretty useless to us since we are doing that quite a lot  \n17:51\u00a0<vmassol>\u00a0it's not built by default but I think there are options in the extensions  \n17:52\u00a0<tmortagne>\u00a0in any case we can review CDI 2.0 annotation, there is probably some useful stuff for us we might want to support  \n17:52\u00a0<vmassol>\u00a0yes that's got me thinking about that  \n17:53\u00a0<tmortagne>\u00a0I remember talking about a more advanced provider with you  \n17:53\u00a0<vmassol>\u00a0we should align our usage of annotations to the max extent  \n17:53\u00a0<tmortagne>\u00a0(that was part of CDI)  \n17:54\u00a0<tmortagne>\u00a0there is many things I don't like much about Provider and that could benefit from a few improvements  \n17:54\u00a0<vmassol>\u00a0FTR https://issues.jboss.org/browse/CDI-114  \n18:22\u00a0<OSIMasson>\u00a0has quit  \n18:30\u00a0<OSIMasson>\u00a0has joined #xwiki  \n18:37\u00a0<cjd>\u00a0has quit  \n18:52\u00a0<ClemensR>\u00a0has quit  \n18:56\u00a0<OSIMasson>\u00a0has quit  \n19:02\u00a0<Trefex>\u00a0has quit  \n19:16\u00a0<mflorea>\u00a0has quit  \n19:18\u00a0<woshilapin>\u00a0has quit  \n19:18\u00a0<tmortagne>\u00a0has quit  \n19:19\u00a0<evalica>\u00a0has quit  \n19:20\u00a0<evalica>\u00a0has joined #xwiki  \n19:20\u00a0<Enygma`>\u00a0has quit  \n19:24\u00a0<sdumitriu1>\u00a0has quit  \n19:24\u00a0<sdumitriu1>\u00a0has joined #xwiki  \n19:24\u00a0<evalica>\u00a0has quit  \n19:28\u00a0<cjd>\u00a0has joined #xwiki  \n19:48\u00a0<gdelhumeau>\u00a0has quit  \n20:04\u00a0<Enygma`>\u00a0has joined #xwiki  \n20:20\u00a0<mflorea>\u00a0has joined #xwiki  \n20:20\u00a0<woshilapin>\u00a0has joined #xwiki  \n20:20\u00a0<Slashman>\u00a0has quit  \n20:21\u00a0<OSIMasson>\u00a0has joined #xwiki  \n20:48\u00a0<OSIMasson>\u00a0has quit  \n20:52\u00a0<OSIMasson>\u00a0has joined #xwiki  \n21:24\u00a0<risherry>\u00a0has joined #xwiki  \n21:56\u00a0<lucaa1>\u00a0has quit  \n22:03\u00a0<OSIMasson>\u00a0has quit  \n22:10\u00a0<woshilapin>\u00a0has quit  \n22:21\u00a0<lucaa>\u00a0has joined #xwiki  \n22:27\u00a0<OSIMasson>\u00a0has joined #xwiki  \n22:27\u00a0<KermitTheFragger>\u00a0has quit  \n22:37\u00a0<woshilapin>\u00a0has joined #xwiki  \n23:01\u00a0<lucaa>\u00a0has quit  \n23:01\u00a0<lucaa>\u00a0has joined #xwiki  \n23:23\u00a0<lynxt>\u00a0has quit  \n23:25\u00a0<lynxt>\u00a0has joined #xwiki  \n23:27\u00a0<lucaa>\u00a0has quit  \n23:28\u00a0<tillo>\u00a0has quit  \n23:29\u00a0<tillo>\u00a0has joined #xwiki  \n23:34\u00a0<risherry>\u00a0has quit  \n23:34\u00a0<mflorea>\u00a0has quit  \n23:55\u00a0<vmassol>\u00a0has quit\n"}