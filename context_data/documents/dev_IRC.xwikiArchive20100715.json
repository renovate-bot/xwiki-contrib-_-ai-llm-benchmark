{"id": "dev:IRC.xwikiArchive20100715", "url": "https://dev.xwiki.org/xwiki/bin/view/IRC/xwikiArchive20100715", "title": "IRC Archive for channel #xwiki - XWiki", "collection": "Eval-Large", "mimetype": "text/markdown", "language": "en", "content": "\nlpereira left at 00:06 (Quit: Leaving.  \nlucaa joined #xwiki at 00:19  \nflorinciu joined #xwiki at 00:19  \nDSpair joined #xwiki at 00:24  \nflorinciu left at 00:43 (Read error: Connection reset by peer  \nDSpair left at 01:52 (Quit: Leaving  \nCalebJamesDeLisl - (01:57): LadySerena: It sounds like you want to start at the component manager. What specifically do you want to get rid of and what do you want to keep?  \nLadySerena - (01:59): I want to keep documents, macros, formatting (xwiki/2, plain/1, etc...), versioning, and attachments  \nLadySerena - (02:00): and get rid of everything else (config, users, theming, etc...)  \nCalebJamesDeLisl - (02:00): So you'll need to keep the xwiki-core and it's database driver then.  \nCalebJamesDeLisl - (02:01): I assume you want the renderer, WYSIWYG as well?  \nLadySerena - (02:03): yar  \nCalebJamesDeLisl - (02:04): I think the best approach is to remove things which you don't need. What parts of your platform do you want to integrate?  \nLadySerena - (02:14): well, integrating XWiki into my platform  \nCalebJamesDeLisl - (02:16): I don't know anything about your platform, where do you intend to have the connection points? Will your platform act as hibernate and manage connection to the database? manage users like LDAP? etc.  \nLadySerena - (02:19): my platform uses LDAP authentication and does its own database management  \nCalebJamesDeLisl - (02:23): There is an LDAP plugin which will allow your users to become XWiki users. Getting underneath the database driver will be tougher.  \nCalebJamesDeLisl - (02:25): Probably the reasonable thing to do is let xwiki-core have it's own database and do integration on other places.  \nCalebJamesDeLisl - (02:28): If you want access to XWiki services from the outside such as the renderer, all you have to do is register a class with the component manager and declare rendering as a @Requirement.  \nLadySerena - (02:57): hmm  \nLadySerena - (02:57): also, the module interface I have is insanely simple: http://vocasystem.net/hudson/job/Rebirth/javadoc/com/varusonline/ext/interfaces/FaceModule.html  \nCalebJamesDeLisl - (03:06): That it is. I guess what you will need to do is write some sort of adapter between that and XWikiAction.  \nsdumitriu left at 03:06 (Quit: Leaving.  \nCalebJamesDeLisl - (03:08): This https://svn.xwiki.org/svnroot/xwiki/platform/core/trunk/xwiki-core/src/main/java/com/xpn/xwiki/web/XWikiAction.java  \nCalebJamesDeLisl - (03:09): takes a call from struts and outputs a rendered page. It looks like you want to refactor it to take a call from your system. Sound right?  \nLadySerena - (03:09): yar  \nLadySerena - (03:10): Rebirth handles requests in 3 steps: request configuration, request processing, content processing  \nLadySerena - (03:10): and the servlet (rbServlet) adds a 4th step: template processing  \npenyaskito left at 03:15 (Read error: Connection reset by peer  \nCalebJamesDeLisl - (03:15): what's the difference between request configuration and request processing?  \nmarta1 left at 03:15 (Ping timeout: 276 seconds  \nLadySerena - (03:17): in request configuration its making sure all the configuration properties for all the Rebirth plugins are loaded, and it sets the values of the ServiceContext vars  \nCalebJamesDeLisl - (03:23): A quick rundown of XWikiAction is as follows: set up a new XWikiContext, gets the requested page, does a permission check (slow), puts the page in the context, calls action() which is overridden in the subclass and if action returns true, it calls render in the subclass and takes the result, looks for a template by that name, and parses it.  \nCalebJamesDeLisl - (03:25): There is a lot of other stuff in there which I think you can safely ignore.  \nLadySerena - (03:25): so I can have the wrapper module just return raw HTML?  \nCalebJamesDeLisl - (03:26): sure, one way to do that would be to provide a subclass of the response and provide your own output stream.  \nLadySerena - (03:26): and I think permissions can be disabled, since Rebirth already handles that (and efficiently!)  \nCalebJamesDeLisl - (03:27): Not sure just how much you need but you might be able to get away with building the XWikiContext, getting the page and rendering the content.  \nLadySerena - (03:28): that would be perfect  \nCalebJamesDeLisl - (03:29): Everything you need is right in XWikiAction, you just want to gut most of the code and replace the struts based stuff with your won input.  \nCalebJamesDeLisl - (03:30): Unfortunately it's a rats nest. Probably the worst part of the old core.  \nCalebJamesDeLisl - (03:31): xwiki.prepareDocuments( \u00a0\u00a0<-- That's where the permission check happens.  \nCalebJamesDeLisl - (03:34): If you were to change the url scheme to site.com?page=Main.WebHome \u00a0then you could drop the entire url parsing code and use xwiki.getDocument(request.getParameter('page'))  \nCalebJamesDeLisl - (03:36): or use the url parsing scheme by calling xwiki.getDocument(xwiki.getDocumentReference(request, context));  \nCalebJamesDeLisl - (03:37): calling xwiki.prepareResources( is needed for the translations.  \nLadySerena - (04:01): O.o  \nCalebJamesDeLisl - (04:03): Maybe best to start at your end and work inward. Will you be providing a URL or getting the page name some other way?  \njfx left #xwiki at 05:32  \nLadySerena - (05:36): the platform provides the URL  \nCalebJamesDeLisl - (05:38): Grrr 15 years after Bernstein v USA, I still have to download a certificate in order to use pkcs12 with more than 7 character passwords.  \nLadySerena - (05:38): http://vocasystem.net/hudson/job/RebirthSP/javadoc/com/varusonline/context/ServiceContext.html \u00a0<-- it is easy to reconstruct the URL  \nCalebJamesDeLisl - (05:40): If you want to construct a URL then you can use the url parser, otherwise if you can get a space, page, language, and action some other way then it's easier to skip the URL step.  \nLadySerena - (05:44): ya, I have a way to get around that  \nCalebJamesDeLisl - (05:45): Hmm. Everything in java is hackable, I wonder if I can just extend/override/reflect the offending code? Couldn't ship it that way but it would be a fun exercise.  \nCalebJamesDeLisl - (05:45): (pkcs12 key)  \nLadySerena - (05:45): essentially, Rebirth separates the URL into nice little bite-size chunks, then each module/endpoint simply acts on one (or more) things  \nCalebJamesDeLisl - (05:45): So if you have your own URL parser then you should use it.  \nLadySerena - (05:46): well ya  \nCalebJamesDeLisl - (05:46): You need the page space, name, language (2 letter code), and the action.  \nLadySerena - (05:47): awesome  \npenyaskito joined #xwiki at 06:09  \nmflorea joined #xwiki at 07:09  \nmflorea left at 07:21 (Quit: Leaving.  \nsburjan` joined #xwiki at 07:23  \nasrfel joined #xwiki at 08:25  \nmflorea joined #xwiki at 08:27  \nsilviar joined #xwiki at 08:51  \narkub joined #xwiki at 09:23  \nsburjan joined #xwiki at 09:25  \nlpereira joined #xwiki at 09:33  \nlucaa left at 09:47 (Ping timeout: 240 seconds  \nKermitTheFragger joined #xwiki at 09:49  \nmarta1 joined #xwiki at 09:50  \nlucaa joined #xwiki at 10:08  \nabusenius joined #xwiki at 10:19  \nSvenDowideit\\_ joined #xwiki at 10:22  \nSvenDowideit left at 10:22 (Ping timeout: 265 seconds  \nSvenDowideit\\_ is now known as SvenDowideit ([[email\u00a0protected]](https://dev.xwiki.org/cdn-cgi/l/email-protection)  \ntmortagne joined #xwiki at 10:32  \ntmortagne left #xwiki at 10:32  \nEnygma` joined #xwiki at 10:57  \npenyaskito\\_ joined #xwiki at 11:06  \npenyaskito left at 11:07 (Read error: Connection reset by peer  \nSvenDowideit left at 11:12 (\\*.net \\*.split  \nlucaa left at 11:12 (\\*.net \\*.split  \nevalica joined #xwiki at 11:17  \nflorinciu joined #xwiki at 11:17  \nSvenDowideit joined #xwiki at 11:18  \nlucaa joined #xwiki at 11:18  \nsdumitriu joined #xwiki at 11:22  \ndfff joined #xwiki at 11:57  \ndfff - (11:59): hi. how can i display a value while editing inline as a dropdown. i already got the dropdown ready and could now ask for the valie via request.get. but $doc.setproperty wants a basevalue, not a string.  \nCalebJamesDeLisl - (12:05): Make an html macro and put the form select element in that?  \ndfff - (12:07): i got something like: #$doc.setProperty('codeSnippetsClass', 'lang', $request.lang) \u00a0\u00a0\u00a0\u00a0\u00a0where codeSnippetsClass is the classname, lang the name of the property and $request.lang the value of the selected dropdown  \nCalebJamesDeLisl - (12:11): And you want to display that back to the user?  \nvmassol joined #xwiki at 12:23  \ndfff - (12:42): CalebJamesDeLisl: eventually, i want to save the selected value from the dropdown as a property.  \nCalebJamesDeLisl - (12:49): I would use $doc.getObject('codeSnippetClass').set('lang', $request.getParameter('lang'))  \nCalebJamesDeLisl - (12:50): then $doc.save()  \nmarta1 is now known as marta\\_\\_ ([[email\u00a0protected]](https://dev.xwiki.org/cdn-cgi/l/email-protection)  \ndfff - (12:54): does $request.parameter work? because there is in 1 document: \u00a0\u00a0{{html}} listcode {{/html}} \u00a0and following after that: $request.parameter. \u00a0\u00a0\u00a0\u00a0the value hasnt been send when the velocity code already asks for the $request.parameter  \nflorinciu1 joined #xwiki at 12:57  \ndfff - (12:58): http://pastie.org/1045457  \ndfff - (12:58): its the part at the end  \nCalebJamesDeLisl - (13:01): Yes, if there is no field by the name, velocity will try calling get<name>  \nsdumitriu - (13:01): Nobody available to release 2.4?  \nCalebJamesDeLisl - (13:02): If get<name> doesn't exist, velocity tries get('<name>')  \nCalebJamesDeLisl - (13:03): I prefer using getParameter('name') because it's more precise.  \ndfff - (13:07): CalebJamesDeLisl: \u00a0\u00a0could the code above work? \u00a0it doent ge parsed, it just prints out 'as is'  \nCalebJamesDeLisl - (13:09): Hmm, i must have made a mistake. What I do when that happens is try just the first part eg: \u00a0$doc.getObject('codeSnippetClass')  \nCalebJamesDeLisl - (13:09): it should output Object@12345ABC  \ndfff - (13:11): nope, still the sourcecode. but the classname is written correctly  \nCalebJamesDeLisl - (13:16): try with the space name too: \u00a0\u00a0$doc.getObject('Main.codeSnippetClass') \u00a0\u00a0or whatever.  \ndfff - (13:17): thats it  \nsdumitriu left at 13:19 (Ping timeout: 264 seconds  \nabusenius left at 13:54 (Ping timeout: 245 seconds  \nabusenius joined #xwiki at 13:57  \nsdumitriu joined #xwiki at 14:03  \nsburjan - (14:07): sdumitriu, : are you around ?  \nCalebJamesDeLisl - (14:08): abusenius: I got PKCS12 export working for keys hosted on the server, the problem is (you're not going to believe this) passwords longer than 7 characters throw an error because keys over a certain size are banned in some localities.  \nsdumitriu - (14:11): sburjan: Yes  \nabusenius - (14:17): CalebJamesDeLisl: hm, I wonder how we can disable this stupid limitation  \njvelo joined #xwiki at 14:18  \nCalebJamesDeLisl - (14:18): Well you can install this \"Unlimited Strength jurisdiction file  \nCalebJamesDeLisl - (14:19): \"  \nabusenius - (14:19): have you tried that?  \nabusenius - (14:20): are you allowed to use it in US? :)  \nCalebJamesDeLisl - (14:21): haha, USA allows any encryption. It used to be that we couldn't export it to you but since Bernstine v USA that has been removed.  \nabusenius - (14:22): maybe explicitely using BC will help too  \nCalebJamesDeLisl - (14:22): I have been playing with that. I hit a wall with package private, but I know if I break out reflection, all walls fall down.  \nabusenius - (14:23): but in principle, if it works with a normal jce policy, then we should leave it like this otherwise using xwiki in a country with strange laws will be illegal  \nCalebJamesDeLisl - (14:24): The question is do we want to ship something which \\_might\\_ be unallowable in certain countries?  \nCalebJamesDeLisl - (14:24): Yea that.  \nabusenius - (14:24): we should have a configuration setting for certificate key length because of that I guess  \nabusenius - (14:25): limited RSA key length is 768 afaik  \nCalebJamesDeLisl - (14:25): No RSA can be 2048 and that's basically unbreakable.  \nCalebJamesDeLisl - (14:26): I think they recognized that it would be too much of a pain if they limited RSA.  \nCalebJamesDeLisl - (14:26): This is triple-des which is limited to 64!  \nCalebJamesDeLisl - (14:27): So if I can find a way to get longer passwords and it's not an obvious workaround of the block then that's an option.  \nCalebJamesDeLisl - (14:28): Another option is looking for a different cypher since PKCS12 supports a bunch.  \nCalebJamesDeLisl - (14:29): A third option is to mangle the password because searching for a 7 byte key is hard while looking for a 7 character password is easy.  \nCalebJamesDeLisl - (14:29): option 3 means export to browser wouldn't work (but why would you do that?)  \nCalebJamesDeLisl - (14:29): Also #3 sort of breaks the PKCS12 standard.  \nabusenius - (14:29): mangling does not really matter, just mangle your keys while brute-forcing  \nabusenius - (14:30): I'd rather stick to strong crypto by default (like AES)  \nabusenius - (14:30): and provide an option to obey strong laws  \nCalebJamesDeLisl - (14:30): If we don't care about following PKCS12 then we could do something really good like a Snuffle implementation.  \nsdumitriu left at 14:31 (Quit: Leaving.  \nCalebJamesDeLisl - (14:32): re laws: Explicitly bypassing the limit is not really an option, but using something like curve25519 is more of a grey area.  \nabusenius - (14:34): if there is a limit on key size, there is not much we can do using other algorithms  \nabusenius - (14:34): good ones are all over the limit :)  \nCalebJamesDeLisl - (14:35): No a really good algorithm means shorter keys are stronger.  \nCalebJamesDeLisl - (14:35): Also the limit is on only a few algorithms.  \nCalebJamesDeLisl - (14:35): DES 64  \nCalebJamesDeLisl - (14:35): DESede \\*  \nCalebJamesDeLisl - (14:35): RC2 128  \nCalebJamesDeLisl - (14:35): RC4 128  \nCalebJamesDeLisl - (14:35): RC5 128  \nCalebJamesDeLisl - (14:35): RSA 2048  \nCalebJamesDeLisl - (14:35): \\* (all others) 128  \nabusenius - (14:38): what if some other country has other limits?  \nCalebJamesDeLisl - (14:39): They have to change them if they want to allow java in that contry.  \nCalebJamesDeLisl - (14:40): \\*country.  \nabusenius - (14:40): they have a custom policy for java vm I guess  \nabusenius - (14:41): (trying to find some overview about limitations)  \nCalebJamesDeLisl - (14:56): curve25519 uses 256 bit keys but this is a requirement for the standard so I think it would be looked on differently than bypassing a limitation in java.  \nCalebJamesDeLisl - (14:56): And according to djb, curve25519 is equivalent to RSA 3000 bit keys.  \nabusenius - (14:59): lets not dig too deep into this, IMO this problem is not worth spending too much time on  \nabusenius - (15:00): we are safe using strong crypto, and java will throw errors if the current policy is strange  \nCalebJamesDeLisl - (15:01): Yea, I'm not going to the trouble of implementing 25519 for this (it's not part of BC) the interface is a bunch of functions which take and output byte arrays.  \nCalebJamesDeLisl - (15:01): I don't care about using 7 byte keys, 7 byte triple des is fine with me, 7 character passwords are very dangerous though.  \nabusenius - (15:02): I need to test if I can use longer keys  \nabusenius - (15:02): (I have unlimited policy installed)  \nCalebJamesDeLisl - (15:03): ahh, I should push the changes then.  \nCalebJamesDeLisl - (15:04): do you care if I remove signedscripts? I broke it implementing pkcs12 and I have been building with it removed.  \nCalebJamesDeLisl - (15:05): IMO it doesn't belong in the crypto module anyway.  \nabusenius - (15:05): dont remove them  \nabusenius - (15:05): I'll move them to another component  \nCalebJamesDeLisl - (15:06): They'll still be in the history.  \nCalebJamesDeLisl - (15:06): you can svn up the old revision and then copy them over.  \nabusenius - (15:06): its easier to move them then to revert  \nabusenius - (15:06): (I don't use svn directly)  \nCalebJamesDeLisl - (15:07): Ok, when you're done I'll commit my latest changes (with the test)  \nabusenius - (15:07): I fixed some problems since he last time you committed btw  \nabusenius - (15:07): \\*the  \nCalebJamesDeLisl - (15:07): Hmm, I might have to merge then.  \nsburjan - (15:07): does anyone have any idea where can I get the html code of the javascript notifier when saving/deleteing a comment or attachment ? i need it for automated testing to verifiy the success orfailure of a operation  \nsburjan - (15:08): Firebug doesnthelp much, because the notifier dissapears too quickly  \nCalebJamesDeLisl - (15:09): There are tests which use it. You can look at those.  \nsburjan - (15:10): hmm .. wasn't able to find one .. at least not in the ui-tests  \nCalebJamesDeLisl - (15:11): Here's the controller for the action buttons: http://svn.xwiki.org/svnroot/xwiki/platform/web/trunk/standard/src/main/webapp/resources/js/xwiki/actionbuttons/actionButtons.js  \nfmancinelli joined #xwiki at 15:15  \nabusenius - (15:17): CalebJamesDeLisl: moved them  \nCalebJamesDeLisl - (15:18): I'm trying out 128 bit rc4  \nCalebJamesDeLisl - (15:20): Nope it's the password size which seems to have no relation to the key size specified in the cipher  \njvelo - (15:21): sburjan check notification.js or confirmationBox.js  \nsburjan - (15:22): thanks  \nCalebJamesDeLisl - (15:23): Committed, it's pretty dirty and you can see my attempt at bypassing the limit ;)  \ndfff left at 15:29 (Quit: Page closed  \nabusenius - (16:10): CalebJamesDeLisl, you said you've added a test, where is it?  \nCalebJamesDeLisl - (16:11): right: I added a test but I didn't svn add it.  \nCalebJamesDeLisl - (16:11): fixed.  \nasrfel left at 16:13 (Quit: Leaving.  \nabusenius - (16:17): does this test allready thows an exception about too long key?  \nCalebJamesDeLisl - (16:17): It does on my machine.  \nabusenius - (16:18): it works fine for me  \nabusenius - (16:18): so unlimited jce profile seems to do the trick  \nCalebJamesDeLisl - (16:19): Yea but will people install it?  \nabusenius - (16:19): well, if they don'T , they will not be able to use strong crypto in any other java program  \nCalebJamesDeLisl - (16:20): Most of the time it doesn't matter. Somebody showed a test program which says that RSA keys are unlimited.  \nabusenius - (16:21): I'd say mention this in install docs should be sufficient  \nCalebJamesDeLisl - (16:22): What do you expect people to use for the password?  \nabusenius - (16:23): their weak user password  \nabusenius - (16:23): :)  \nabusenius - (16:24): this limitation is something admins using tomcat etc should be aware of  \nCalebJamesDeLisl - (16:24): meaning the first 7 characters of the password?  \nCalebJamesDeLisl - (16:25): Or do you plan to write applications which will blow up unless people install the exception.  \nabusenius - (16:25): tomcat will not be able to use strong crypto in TLS without proper policy for example  \nabusenius - (16:25): maybe we can check if it is installed?  \nabusenius - (16:26): and show a big phat warning that we default to first 7 characters?  \nCalebJamesDeLisl - (16:27): No tomcat will appear to work fine because it will just use RSA-1024/2048+AES128  \nCalebJamesDeLisl - (16:27): I'd bet most installations are using just that.  \nabusenius - (16:27): yea, may happen  \nabusenius - (16:28): unless they use a non-US distro which has it installed by default  \nabusenius - (16:29): you are using openjdk right?  \nCalebJamesDeLisl - (16:30): US doesn't really care that much unless you're exporting it. Ironically most of the countries which are against encryption don't have the power to break a 40 bit rsa.  \nCalebJamesDeLisl - (16:30): Yes OpenJDK.  \nsilviar left at 16:31 (Quit: Leaving.  \nabusenius - (16:32): well, if you are an US-organization and let people download an .iso, technically you export it  \nCalebJamesDeLisl - (16:37): Yes and in the old days software (netscape) used to make you promise not to export it. DJ Bernstein created a strong cipher using only a hash function (which had no export regulation) which created a bunch of drama and the government basically gave up.  \nCalebJamesDeLisl - (16:38): http://en.wikipedia.org/wiki/Snuffle  \nsburjan left at 17:19 (Remote host closed the connection  \nmflorea left at 17:25 (Quit: Leaving.  \nlpereira left at 17:27 (Ping timeout: 260 seconds  \nmarta\\_\\_ left at 17:37 (Ping timeout: 252 seconds  \nmarta1 joined #xwiki at 17:39  \nabusenius - (18:11): CalebJamesDeLisl, have you forgot to svn add implementation of UserDocumentUtils? :)  \nCalebJamesDeLisl - (18:11): hmm probably.  \nCalebJamesDeLisl - (18:12): thanks, fixed.  \nabusenius - (18:12): great :)  \nCalebJamesDeLisl - (18:14): So what do you want to do with pkcs12? the password space is 16 bytes, but because java uses UTF-16, that = 8 characters.  \nCalebJamesDeLisl - (18:14): We could truncate the password (bad)  \nCalebJamesDeLisl - (18:15): we could mangle it so we get 16 meaningful bytes.  \nCalebJamesDeLisl - (18:15): (not exportable)  \nCalebJamesDeLisl - (18:16): I guess it doesn't matter much at my end, you're implementing the server side stuff.  \nCalebJamesDeLisl - (18:17): We could add another method of storing the private key. No reason to remove pkcs12, it will just be limited.  \nabusenius - (18:17): I think using something like md5(pass) is the best  \nCalebJamesDeLisl - (18:17): That actually makes some sense.  \nCalebJamesDeLisl - (18:18): md5 is bad.  \nCalebJamesDeLisl - (18:18): Did you read about snuffle?  \nabusenius - (18:18): jes  \nabusenius - (18:18): yes  \nabusenius - (18:19): but md5 is 128 bit :) we can truncate sha1 to 128 bit  \nCalebJamesDeLisl - (18:19): It looks easy to implement, the only problem is how fast the hash should roll to keep enough randomness.  \nabusenius - (18:19): whatever we use, it is better than .toBytes()  \nCalebJamesDeLisl - (18:21): MD5 can be used to cool stuff.... \u00a0When other people use it ;) http://www.phreedom.org/research/rogue-ca/  \nfmancinelli left at 18:21 (Ping timeout: 258 seconds  \nCalebJamesDeLisl - (18:22): Check you r certificate store, I had that cert on my computer and have no idea where it came from.  \nabusenius - (18:22): and since someone who wants the secret key by bruteforcing would bruteforce the password and not the hash of it, it really does not matter that much  \nabusenius - (18:22): I know this one :)  \nCalebJamesDeLisl - (18:23): The only advantage of hashing the password is you can take bytes from the hash and it will take more of the 16 byte space.  \nabusenius - (18:23): https://i.broke.the.internet.and.all.i.got.was.this.t-shirt.phreedom.org/  \nabusenius - (18:24): yes, and it can take a password of any length  \nCalebJamesDeLisl - (18:24): Yup. when I went there, perspectives had to load the cert because they made their CA expire real quick.  \nCalebJamesDeLisl - (18:25): should have published the private key ;) that would have gotten the CAs to get their act together.  \nabusenius - (18:25): and bring them to jail :)  \nCalebJamesDeLisl - (18:25): tor  \nCalebJamesDeLisl - (18:26): Yea nothing real funny happens because people want to give peaches and get jobs...  \nCalebJamesDeLisl - (18:26): s  \nCalebJamesDeLisl - (18:27): Actually probably not jail unless conspiracy to commit a crime can be proven.  \nCalebJamesDeLisl - (18:27): Anyway...  \nabusenius - (18:28): anyway, so since the limitation comes from pkcs12 there is not much we can do  \nCalebJamesDeLisl - (18:28): Maybe the best thing to do is to have 2 ways of storing keys.  \nabusenius - (18:28): in principle we could use something else  \nCalebJamesDeLisl - (18:28): We have pkcs12 and it works with web browsers and other stuff.  \nabusenius - (18:29): unless we want to export keys  \nabusenius - (18:29): yes, thats the advantage  \nlpereira joined #xwiki at 18:29  \nCalebJamesDeLisl - (18:29): We could add another way which stores the key as base64 and uses encryption which we define.  \nCalebJamesDeLisl - (18:30): And still retain pkcs12.  \nabusenius - (18:30): would it work with browsers etc?  \nCalebJamesDeLisl - (18:30): pkcs12 would but we'd have to warn the user that their password might be trunkated.  \nabusenius - (18:31): hm, wayt, jce policy still affects the limitiation  \nabusenius - (18:31): so the problem is really the configuration  \nCalebJamesDeLisl - (18:31): rsa-4096 ;)  \nCalebJamesDeLisl - (18:32): Or a snuffle implementation.  \nabusenius - (18:32): no  \nabusenius - (18:32): standard, known crypto  \nabusenius - (18:32): = AES  \nCalebJamesDeLisl - (18:33): http://ykyuen.wordpress.com/2010/04/22/java-cryptography-extension-check-maximum-allowed-key-size/  \nCalebJamesDeLisl - (18:33): That guy shows key size limits for different algorithms.  \nCalebJamesDeLisl - (18:34): triple-des with the key size limit is fine with me, it's the password size limit which is such a pain.  \nabusenius - (18:35): AES \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: 2147483647bit  \nabusenius - (18:35): DES \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: 2147483647bit  \nabusenius - (18:35): DESEDEWRAP \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: 2147483647bit  \nabusenius - (18:35): PBEWITHSHA1ANDRC2\\_40 \u00a0: 2147483647bit  \nabusenius - (18:35): :)  \nCalebJamesDeLisl - (18:36): Hmm, I should try running that to see what I get..  \nabusenius - (18:36): install sane jce policy and forget about it  \nCalebJamesDeLisl - (18:37): nobody will do that. it's harder than installing a browser cert.  \nabusenius - (18:37): using a limited java version I get the same results as on the page  \nabusenius - (18:37): well, too bad  \nabusenius - (18:38): if the person who runs the server does not want security, nobody can help him  \nabusenius - (18:38): does this affect the key size in client certificates?  \nabusenius - (18:39): (assuming the client has installed the policy)?  \nabusenius - (18:39): probably no right, RSA seems to be not affected  \nCalebJamesDeLisl - (18:40): No, firefox generates a 2048 bit RSA key. Because it's RSA, java has no problem signing it.  \nabusenius - (18:40): so it is just storing the certificates  \nCalebJamesDeLisl - (18:41): It signs the cert and stores it. It also generates another key to sign with.  \nabusenius - (18:41): I'd say we should document it rather that inventing wworkarounds, especially since in some countries, even using strong crypto is not allowed  \nabusenius - (18:42): hm, I wonder if BC also implements this limitation  \nCalebJamesDeLisl - (18:42): Actually the funny thing is I didn't see any country on the list which made those distinctions, they either allow crypto or they ban/license it.  \nCalebJamesDeLisl - (18:43): re workarounds: 128 bit 3des (the actual limit) is fine, what bothers me is 7 character passwords.  \nabusenius - (18:45): why not 128 bit aes?  \nabusenius - (18:46): it is faster and less broken  \nCalebJamesDeLisl - (18:46): slow has it's advantages, less broken you say? has des been broken?  \nEnygma` left at 18:47 (Quit: Leaving.  \nabusenius - (18:47): yes  \nabusenius - (18:47): (partially)  \nabusenius - (18:48): and aes is really better  \nCalebJamesDeLisl - (18:48): It seems that the internet agrees.  \nabusenius - (18:48): with BC all symmetric ciphers are limited to 128 bit  \nabusenius - (18:49): (w/o policy)  \nabusenius - (18:49): which is quite good actually  \nevalica left at 18:50 (Quit: Leaving.  \nCalebJamesDeLisl - (18:50): Of course anyone could just create 2 keys and encrypt with one then the other. not quite 256 but a definite improvement.  \nCalebJamesDeLisl - (18:51): But it's true for symmetric cyphers, 128 is quite adequate.  \nCalebJamesDeLisl - (18:53): Hmm. xwikisas.com uses aes-256. Figures...  \nCalebJamesDeLisl - (18:53): Google uses rc4-128  \nabusenius - (18:54): probably because it's faster :)  \nabusenius - (18:54): and I think this is the default TLS cipher, which has to be supported by everyone  \nabusenius - (18:55): ok, need to go home, see ya later  \nCalebJamesDeLisl - (18:55): see ya.  \nabusenius left at 19:06 (Ping timeout: 240 seconds  \nflorinciu left at 19:06 (Read error: Connection reset by peer  \nKermitTheFragger left at 20:03 (Quit: Leaving  \nabusenius joined #xwiki at 20:14  \nCalebJamesDeLisl - (20:31): abusenius: Do you want to implement a password mangling function? It could detect the limit and the long password and then just sha1 it.  \nCalebJamesDeLisl - (20:48): I'm going to bed, see you tomorrow.  \njvelo left at 20:57 (Ping timeout: 245 seconds  \nflorinciu1 left at 21:07 (Quit: Leaving.  \nmflorea joined #xwiki at 21:08  \nflorinciu joined #xwiki at 21:18  \ntmortagne joined #xwiki at 21:18  \ntmortagne left #xwiki at 21:19  \nmarta1 left #xwiki at 21:39  \nmflorea left at 22:02 (Quit: Leaving.  \nfmancinelli joined #xwiki at 22:21  \nflorinciu left at 22:25 (Quit: Leaving.  \nlucaa left at 23:01 (Ping timeout: 260 seconds  \nlucaa joined #xwiki at 23:19  \nfmancinelli left at 23:28 (Ping timeout: 276 seconds  \n\n"}