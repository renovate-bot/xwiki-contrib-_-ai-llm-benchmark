{"id": "dev:IRC.xwikiArchive20100730", "url": "https://dev.xwiki.org/xwiki/bin/view/IRC/xwikiArchive20100730", "title": "IRC Archive for channel #xwiki - XWiki", "collection": "Eval-Large", "mimetype": "text/markdown", "language": "en", "content": "\nflorinciu joined #xwiki at 00:03  \ntemporalfox left at 00:29 (Quit: temporalfox  \narkub left at 00:37 (Ping timeout: 258 seconds  \nflorinciu left at 02:01 (Read error: Connection reset by peer  \ntsziklay left at 02:53 (Quit: ChatZilla 0.9.86 [Firefox 3.6.8/20100722155716]  \nvmassol joined #xwiki at 02:53  \nabusenius left at 03:13 (Ping timeout: 240 seconds  \nvmassol left at 03:31 (Quit: Leaving.  \ntsziklay joined #xwiki at 06:18  \ntsziklay left at 06:19 (Client Quit  \nflorinciu joined #xwiki at 07:38  \nflorinciu left at 07:58 (Quit: Leaving.  \nflorinciu joined #xwiki at 08:02  \nmflorea joined #xwiki at 08:13  \ntemporalfox joined #xwiki at 08:53  \nflorinciu left at 09:04 (Quit: Leaving.  \nflorinciu joined #xwiki at 09:06  \ntemporalfox\\_ joined #xwiki at 09:15  \ntemporalfox left at 09:15 (Read error: Connection reset by peer  \ntemporalfox\\_ is now known as temporalfox ([[email\u00a0protected]](https://dev.xwiki.org/cdn-cgi/l/email-protection)  \nlpereira joined #xwiki at 09:15  \nKermitTheFragger joined #xwiki at 09:51  \narkub joined #xwiki at 09:55  \nflorinciu left at 10:09 (Read error: Connection reset by peer  \nabusenius joined #xwiki at 10:20  \nCalebJamesDeLisl - (10:29): Were you planning for the escaping test to be in enterprise/trunk/distribution-test/escaping-tests/?  \nasrfel joined #xwiki at 10:33  \nflorinciu joined #xwiki at 10:42  \nasrfel left at 10:55 (Ping timeout: 265 seconds  \nasrfel joined #xwiki at 10:55  \nabusenius - (11:02): yes  \nCalebJamesDeLisl - (11:04): Ok, also I disagree with the FIXME which says only the cert fingerprint should be returned.  \nCalebJamesDeLisl - (11:05): If the entire cert is in the signature I would need to see proof that there will never be a need for the cert before agreeing to not return all information which is available.  \nCalebJamesDeLisl - (11:06): Suppose we received a signature from another wiki, wouldn't it be nice to make a \"holding place\" user page for the signer even if the signature doesn't confer any permissions.  \nCalebJamesDeLisl - (11:07): ?  \nabusenius - (11:07): where is this fixme?  \nCalebJamesDeLisl - (11:07): X509SignatureService  \nCalebJamesDeLisl - (11:07): \"FIXME I don't really need the certificate here, fingerprint would suffice\"  \nCalebJamesDeLisl - (11:08): I can remove it, I just wanted us to be on the same page.  \nabusenius - (11:10): hmm, yea, this is kind of outdated fixme  \nabusenius - (11:10): in a previous version there was another cert I was comparing with, and now I do it on the caller side  \nabusenius - (11:10): feel free to delete it  \nCalebJamesDeLisl - (11:10): Ok. AFAIK the only remaining thing to do is make X509KeyPair encrypt the private key using passwd.  \nabusenius - (11:11): yes, that should be easy to do  \nCalebJamesDeLisl - (11:11): I'm thinking the part about placing the cert in the user's page does not belong in crypto.  \nabusenius - (11:12): I have done it in my local branch  \nabusenius - (11:12): I store the certs and generated keys in the user page  \nabusenius - (11:12): and there is one global page where the list of registered \"trusted\" certs is stored  \nabusenius - (11:13): but I need the methods I proposed on the list :)  \nCalebJamesDeLisl - (11:13): IMO documents should only really be manipulated by script.  \nabusenius - (11:13): well, how (and where) am I spposed to store stuff then?  \nCalebJamesDeLisl - (11:14): The question is where should the code which stores it reside.  \nabusenius - (11:15): I'm against doing it in scripts  \nCalebJamesDeLisl - (11:15): IMO this is the pinnacle of horrors:  \nCalebJamesDeLisl - (11:15): .getDocument(skin, context).getStringValue(\"XWiki.XWikiSkins\", prefname);  \nCalebJamesDeLisl - (11:15): (From XWiki.java)  \nabusenius - (11:15): skin is different  \nabusenius - (11:15): it is gui  \nabusenius - (11:16): I'd store the certs deep in the DB if it would be an option  \nCalebJamesDeLisl - (11:16): I agree this case is more of a grey area but still I still think the job should be done by script.  \nCalebJamesDeLisl - (11:16): s/still//  \nabusenius - (11:16): it would make it harder to use from non-scripts  \nabusenius - (11:17): and it is allready done :)  \nCalebJamesDeLisl - (11:17): Where is this going to go?  \nabusenius - (11:18): signedscripts component  \nabusenius - (11:18): if you want a cert, ask it, it shouldn't matter where it is really stored  \nCalebJamesDeLisl - (11:18): What information do you give it when you ask?  \nabusenius - (11:19): depends, usually user name  \nabusenius - (11:20): and once you knw fingerprint, you can get certificate  \nabusenius - (11:20): or get the cert right away  \nCalebJamesDeLisl - (11:20): Ok, you give it the user name, it goes in the user document and gets a certificate object?  \nabusenius - (11:20): yes  \nCalebJamesDeLisl - (11:20): What is the class of the cert object?  \nabusenius - (11:20): XWiki.XWikiX509Certificate  \nabusenius - (11:20): (new)  \nCalebJamesDeLisl - (11:20): Where is this defined?  \nabusenius - (11:21): well, it is new  \nabusenius - (11:21): should be with xwiki by default  \nflorinciu left at 11:21 (Quit: Leaving.  \ntemporalfox left at 11:23 (Ping timeout: 240 seconds  \nCalebJamesDeLisl - (11:23): How does signedscripts determine what the name of the class is?  \nabusenius - (11:23): what I'm not sure is what component should handle the code that can store/load certificates from documents, xwiki-crypto seems to be a good place too, because all the certs are defined there  \nabusenius - (11:23): for the moment it is a constant  \nCalebJamesDeLisl - (11:23): -1  \nabusenius - (11:24): for placing stuff in crypo?  \nabusenius - (11:24): or constant?  \nCalebJamesDeLisl - (11:24): For constant definitions of document names in .java code.  \nabusenius - (11:25): it could be a configuration option, as long as I know it, I don't really care  \nabusenius - (11:25): where would you put it?  \nCalebJamesDeLisl - (11:25): For putting it in xwiki-crypto, I would have to see the proposal for the api which it would back.  \nCalebJamesDeLisl - (11:26): I would write script in the XWiki.X509CertificateClass document.  \nabusenius - (11:27): add/remove a cert/key by user name  \nabusenius - (11:28): get cert/key by user name and fingerprint  \nabusenius - (11:28): list all cert/key fingerprints for user  \nCalebJamesDeLisl - (11:28): Sure, you could define velocity macros or xwiki macros.  \nabusenius - (11:29): and use velocity macros from java code?  \nCalebJamesDeLisl - (11:29): What java code needs access to this?  \nabusenius - (11:29): the signed script macro  \nabusenius - (11:30): it uses the signed scripts component to verify scripts  \nCalebJamesDeLisl - (11:30): How exactly does {{signed}} work?  \nCalebJamesDeLisl - (11:31): When you invoke the macro what happens?  \nCalebJamesDeLisl - (11:31): Do you invoke the macro with the signature?  \nabusenius - (11:31): it parses the content using the signedscripts component  \nabusenius - (11:31): and verifies the signature  \nCalebJamesDeLisl - (11:32): Ok so it's only verifying signatures, not creating them.  \nabusenius - (11:32): the tricky part will be actually making protected api work only in the signed code  \nabusenius - (11:32): I will need to be in java to o that  \nabusenius - (11:32): \\*do  \nCalebJamesDeLisl - (11:32): That's easy, just switch the user in the context.  \nCalebJamesDeLisl - (11:33): Ah yes, indeed you will.  \nabusenius - (11:33): can I set up a velocity context that can use protected api and let the nested macros use it?  \nabusenius - (11:34): but not the code afterwards  \nCalebJamesDeLisl - (11:34): No, velocity macros (only) have the permission of their caller.  \nabusenius - (11:35): creating signatures will indeed happen in scripts, but I'm -1 for splitting verifying and signing into java and scritps  \nabusenius - (11:35): it should be in one place  \nabusenius - (11:35): i.e. in java, providing api for scritps  \nCalebJamesDeLisl - (11:36): the java code needs to be able to prove that the signer of the script is the user which the cert points to.  \nabusenius - (11:36): it would be much better to have a nice working xwiki-model to acces xobjects though  \nCalebJamesDeLisl - (11:36): Don't hold your breath.  \nabusenius - (11:36): well, that user will provide the password, is it not enough?  \nCalebJamesDeLisl - (11:38): I'm thinking from the point of view that you get a signature, extract the cert and need to prove that the cert belongs to a user in the wiki.  \nabusenius - (11:38): (for the key)  \nCalebJamesDeLisl - (11:38): While avoiding the rat's nest dependency model ;)\\_  \nabusenius - (11:39): the cert will have the user id. so you know which one it is, and from its fingerprint you know this cert or not  \nabusenius - (11:39): \\*you know whether you know  \nCalebJamesDeLisl - (11:40): I can create a cert with openssl and put anyone's name on it so you need to verify that the cert belongs to the user.  \nabusenius - (11:40): yes, users can store many fingerprints for various purposes in their profile  \nabusenius - (11:40): but what counts if it is registered or not  \nCalebJamesDeLisl - (11:41): Why not store the entire cert in the user page?  \nabusenius - (11:41): s/fingerprints/certs/  \nCalebJamesDeLisl - (11:41): Then we have the (old) problem that I might create a cert and somehow add it to your user page.  \nabusenius - (11:42): the list of trusted certs would not be in the user's page  \nCalebJamesDeLisl - (11:42): Where would you put that?  \nabusenius - (11:42): but in a dedicated one, with restricted access  \nabusenius - (11:42): i called it XWiki.TrustedCertificates for now  \nCalebJamesDeLisl - (11:43): How does java know the name of the document ;)  \nabusenius - (11:43): :)  \nabusenius - (11:43): well, it should know it  \nabusenius - (11:43): it is like storing right objects  \nCalebJamesDeLisl - (11:43): Which is also a mess.  \nabusenius - (11:44): yes, but thats the way it is designed  \nabusenius - (11:44): totally flexible, there is no difference between a password and a comment :)  \nabusenius - (11:44): except for the xclass  \nCalebJamesDeLisl - (11:45): I imagine in the future, any java object will be able to be serialized into an XObject.  \nCalebJamesDeLisl - (11:45): \\*any Serializable java object.  \nCalebJamesDeLisl - (11:45): + we hack java.lang.Class and make it Serializable.  \nCalebJamesDeLisl - (11:47): Back to your problem, I don't think you want to go the TrustedCertificates route.  \nabusenius - (11:47): hey, we will be able to import eclipse into wiki :)  \nflorinciu joined #xwiki at 11:47  \nabusenius - (11:47): no, I want to store it in the DB directly :)  \nCalebJamesDeLisl - (11:47): how does java know the name of the table ;)  \nabusenius - (11:48): it is hardcoded there :)  \nabusenius - (11:48): and will never change. ever.  \nabusenius - (11:48): where do you propose to store it?  \nabusenius - (11:49): and how would java know this place? :)  \nCalebJamesDeLisl - (11:49): I have voiced favor for the idea of moving all of these incontinent constants to a config file, but others have said that XWiki should run with no configuration which is also admirable.  \nCalebJamesDeLisl - (11:50): I think the only reasonable place to put it is in the user document. The user document is named in the cert so the only check needed is that the cert is indeed in the user document.  \nabusenius - (11:50): I don't see why \\*every\\* constant should be in a configuration file, some of them don't and shouln't change  \nCalebJamesDeLisl - (11:51): Agreed, this is only for those constants which make the dependency tree into a wreath and make my stomach turn.  \nabusenius - (11:51): wait, I need to distinguish between the certs that the user put there and the once I give PR to  \nCalebJamesDeLisl - (11:52): Currently PR is given to a user, not a cert.  \nabusenius - (11:52): so I would instead check if the user that has the cert has PR?  \nCalebJamesDeLisl - (11:53): If you are just giving PR to a cert then it's easy, just write a note saying the cert has pr and sign it.  \nabusenius - (11:53): sounds reasonable  \nCalebJamesDeLisl - (11:54): Then you only to be able to load a single root cert.  \nabusenius - (11:54): but I actually want to give PR to the secret key (owner)  \nCalebJamesDeLisl - (11:54): Why the private key?  \nabusenius - (11:54): where the secret key might be stored in the browser  \nabusenius - (11:55): because this is what signs  \nCalebJamesDeLisl - (11:56): But when it signs, it puts the \u00a0cert in the signature.  \nabusenius - (11:56): I ginve PR to a user, and the way he proves his identity is that he knows the secret key, and I can verify it using a cert  \nCalebJamesDeLisl - (11:57): So you would have to add an object to his userpage (?) which says you haz PR [signed me]  \nabusenius - (11:58): yes  \nabusenius - (11:58): I start to like the idea of giving PR to the user in this way  \nCalebJamesDeLisl - (11:59): Now we have the cert because it's in the signature, but now we need the pr note from the user page :)  \nabusenius - (11:59): this pr note would replace the old programming right object  \nCalebJamesDeLisl - (12:00): There was a PR object?  \nabusenius - (12:00): well, rights object  \nabusenius - (12:00): that says you have pr  \nabusenius - (12:00): I mean, currently, programming right is just another right  \nCalebJamesDeLisl - (12:00): Well we can at least take this opertunity to correct the semantics. Rights are intrinsic, \\_Permissions\\_ are granted and revoked.  \nabusenius - (12:01): yep  \nCalebJamesDeLisl - (12:01): I imagine the word is the same in French so it's only an English (an Germain?) thing.  \nCalebJamesDeLisl - (12:02): \\*German  \nabusenius - (12:02): is it? I don' know french  \nCalebJamesDeLisl - (12:02): \\*and  \nabusenius - (12:03): would be strange  \nCalebJamesDeLisl - (12:03): I don't know it either although I'm starting to learn a little at a time.  \nCalebJamesDeLisl - (12:03): I really like the Scandinavian languages because those i \\_really\\_ don't know.  \nabusenius - (12:03): I have learned it at school 7 years ago :)  \nabusenius - (12:04): I'd like to know many languages, but I hate learning them ^^  \nCalebJamesDeLisl - (12:06): I think you really have to get dumped in a country where it's spoken all the time.  \nabusenius - (12:06): definitely, and people there should not know any other language you know  \nabusenius - (12:07): talking from experience :)  \nabusenius - (12:08): btw. you removed asymmetric encryption, it could be used in mail plugin/invitation to send encrypted mails  \nCalebJamesDeLisl - (12:08): Yea, I don't see a use at the moment, pkcs7 is pretty much dead, long live PGP.  \nabusenius - (12:09): right, most of the times this means pgp  \nabusenius - (12:09): but pkcs#7 is used afaik if you get a cert from a certification company  \nCalebJamesDeLisl - (12:10): I'm fine to add it back in but I imagined it sitting there getting no use.  \nCalebJamesDeLisl - (12:11): I sort of want to see somebody who wants to use it first.  \nCalebJamesDeLisl - (12:11): And I'd have to write it ;)  \nabusenius - (12:11): yea, I doubt it will be used any time soon  \nCalebJamesDeLisl - (12:11): I am thinking PGP for the future though.  \nCalebJamesDeLisl - (12:12): Another of my fantasies is daily emails going out with the changes for the day so wikiB can track wikiA.  \nCalebJamesDeLisl - (12:12): Those would obviously have to be signed.  \nCalebJamesDeLisl - (12:13): Emails seem so nice because backups are basically done for you, just subscribe to the mailing list which tracks the wiki and the wiki self backs up to your hard disk.  \nabusenius - (12:14): in any case, we have the framework there  \nCalebJamesDeLisl - (12:16): So the problem at hand is we need to load the permission object from the user page...  \nabusenius - (12:17): this would mean a big change in the old rights manager btw  \nCalebJamesDeLisl - (12:18): It would be much faster though, the permissions would be loaded from the user page rather than from each page the user views, it's space.WebPreferences page and XWiki.XWikiPreferences page.  \nCalebJamesDeLisl - (12:19): Each user page would end up in the cache instead of every \\*preferences page.  \ntemporalfox joined #xwiki at 12:19  \nEnygma` joined #xwiki at 12:19  \nCalebJamesDeLisl - (12:20): I think it's better to get crypto all finished and in the tree, then we can start looking at the permissions manager of the future.  \nabusenius - (12:21): +1  \nabusenius - (12:22): but I would like to have signed script there too asap  \nCalebJamesDeLisl - (12:22): Another argument for tree dependency structure is depending on as little as possible means you don't have the rewrite the whole application.  \nabusenius - (12:22): they could use the \"old\" way of checking if the user has pr for now  \nabusenius - (12:22): and we could update the api to check something else without changing the scritps  \nabusenius - (12:23): (the rights api)  \nCalebJamesDeLisl - (12:23): IMO the answer is come up with the api of the future, then write a bridge implementation.  \nabusenius - (12:23): have you looked at the rights component proposed some time ago?  \nabusenius - (12:23): wdyt about it?  \nCalebJamesDeLisl - (12:23): andreasjonsson's?  \nabusenius - (12:24): yep  \nCalebJamesDeLisl - (12:24): My first reaction was it was big and thus would be hard to certify it's security.  \nabusenius - (12:24): my too :)  \nCalebJamesDeLisl - (12:25): We have had just about enough drama from the current implementation, I'm for <1000 lines if at all possible.  \nabusenius - (12:25): for example I don't see why he put the complicated cache there  \nCalebJamesDeLisl - (12:26): Also there has been discussion of adding new types of permissions. IMO this is indicative of not enough objects to have permissions for.  \nCalebJamesDeLisl - (12:26): In a computer system all you can really do is read and write.  \nabusenius - (12:27): the thing is, if we change something in the rights manager, we should replace it completely  \nCalebJamesDeLisl - (12:27): And it leads to silly things like a register pr programming permission for some document.  \nCalebJamesDeLisl - (12:27): s/pr/or/  \nabusenius - (12:28): we will probably always have this problem because user is a document too  \nCalebJamesDeLisl - (12:28): That is the most difficult thing, how do we take one step at a time?  \nabusenius - (12:29): one step has to be big - replacing the current implementation  \nabusenius - (12:29): but maybe a bridge can help  \nabusenius - (12:30): we will not be able to emulate the old implementation in all its bugs though  \nCalebJamesDeLisl - (12:30): sendmail clone? ;)  \nabusenius - (12:30): :)  \nabusenius - (12:31): some things will/should work as they used to, e.g. view permissions  \nabusenius - (12:31): pr has to change drasticlly  \nCalebJamesDeLisl - (12:31): I don't see why we shouldn't allow a permissions to be granted on objects in a document, maybe it would never be used, maybe it would.  \nabusenius - (12:32): KISS?  \nCalebJamesDeLisl - (12:32): How many extra lines of code?  \nabusenius - (12:32): I don't know  \nCalebJamesDeLisl - (12:33): If EntityReferences had been made so they could be serialized to a byte[] then we could issue permissions on them.  \nCalebJamesDeLisl - (12:35): Of course if ER's could be serialized to a fixed length byte[] then they could be used as a key to load a document from the db.  \nabusenius - (12:38): hm, well, they can be serialized to string  \nabusenius - (12:38): (in a totally overcomplicated way, but hey)  \nCalebJamesDeLisl - (12:39): Ok, I'm writing down these questions: Why is the default doc reference anemic? Why is DocumentReference not an interface? Why not hashable to fixed length byte[].  \nCalebJamesDeLisl - (12:40): Asking questions about ER's is a grand tradition in the making.  \nabusenius - (12:41): why are they called references at all? they are names  \nabusenius - (12:41): (because they cannot be de-referenced)  \nCalebJamesDeLisl - (12:41): \\*why doesn't abusenus have commit access yet ;)  \nabusenius - (12:41): :D  \nCalebJamesDeLisl - (12:42): DocumentName was the last attempt ;)  \nabusenius - (12:43): ah, so you guys just run out of names :)  \nabusenius - (12:46): ok, got to go and eat something, bbl  \nCalebJamesDeLisl - (12:46): see ya  \nabusenius left at 13:09 (Ping timeout: 276 seconds  \nmflorea left at 13:10 (Ping timeout: 260 seconds  \nsylviarusu joined #xwiki at 13:18  \nmflorea joined #xwiki at 13:24  \nabusenius joined #xwiki at 13:32  \nCalebJamesDeLisl - (13:39): that privacy is dead video is awesome.  \nabusenius - (13:39): definitely  \nabusenius - (13:39): was watching it yesterday until 2am ^^  \nflorinciu left at 13:46 (Quit: Leaving.  \nflorinciu joined #xwiki at 13:50  \nmflorea left at 13:51 (Quit: Leaving.  \nasrfel1 joined #xwiki at 14:34  \nflorinciu1 joined #xwiki at 14:34  \nsylviarusu1 joined #xwiki at 14:34  \nEnygma`1 joined #xwiki at 14:35  \nasrfel left at 14:36 (Ping timeout: 240 seconds  \nsburjan joined #xwiki at 14:37  \nsylviarusu left at 14:37 (Ping timeout: 260 seconds  \nflorinciu left at 14:37 (Ping timeout: 260 seconds  \nEnygma` left at 14:37 (Ping timeout: 260 seconds  \nmflorea joined #xwiki at 14:41  \noanat joined #xwiki at 15:27  \nsburjan left at 15:34 (Ping timeout: 265 seconds  \nEnygma`1 left at 15:41 (Ping timeout: 265 seconds  \nsylviarusu1 left at 16:16 (Read error: Connection reset by peer  \noanat left at 16:22 (Quit: Leaving.  \nsburjan joined #xwiki at 16:49  \nlpereira left at 16:57 (Quit: Leaving.  \nsburjan left at 17:00 (Read error: Connection reset by peer  \nasrfel1 left at 17:02 (Quit: Leaving.  \nsburjan joined #xwiki at 17:07  \nsburjan left at 17:13 (Ping timeout: 258 seconds  \nEnygma` joined #xwiki at 17:19  \nproyvind left at 17:52 (Changing host  \nproyvind joined #xwiki at 17:52  \nflorinciu1 left at 17:59 (Read error: Connection reset by peer  \nabusenius left at 18:11 (Ping timeout: 240 seconds  \nlpereira joined #xwiki at 18:14  \nvmassol joined #xwiki at 18:21  \nvmassol left at 18:26 (Quit: Leaving.  \nKermitTheFragger left at 19:17 (Quit: Leaving  \ntemporalfox left at 19:17 (Ping timeout: 260 seconds  \nmflorea left at 20:05 (Quit: Leaving.  \narkub left at 20:07 (Ping timeout: 240 seconds  \nflorinciu joined #xwiki at 20:09  \nEnygma` left at 20:35 (Quit: Leaving.  \narkub joined #xwiki at 23:03  \narkub left at 23:47 (Quit: Leaving  \n\n"}