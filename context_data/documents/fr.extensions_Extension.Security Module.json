{
  "id": "extensions:Extension.Security Module",
  "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module",
  "title": "Authorization API",
  "collection": "Eval_fr",
  "mimetype": "text/markdown",
  "language": "fr",
  "content": "Sure, here is the translation of the provided text into French:\n\n---\n\n|  |  |\n| --- | --- |\n| cog | **Contrôle les permissions de tous les éléments du wiki** |\n\n|  |  |\n| --- | --- |\n| Type | JAR |\n| Catégorie |  |\n| Développé par | [Équipe de développement XWiki](https://xwiki.org/xwiki/bin/view/XWiki/XWikiTeam) |\n| Note |\n\n* \n* [1](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module \"Médiocre\")\n* [2](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module \"Satisfaisant\")\n* [3](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module \"Bon\")\n* [4](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module \"Très bon\")\n* [5](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module \"Excellent\")\n\n0 Votes\n\n| Licence | GNU Lesser General Public License 2.1 |\n\n|  |  |\n| --- | --- |\n| Inclus avec | XWiki Standard |\n\n**Installable avec le Gestionnaire d'Extensions**\n\n[Télécharger v16.3.1](https://extensions.xwiki.org/xwiki/rest/repository/extensions/org.xwiki.platform%3Axwiki-platform-security-authorization-api/versions/16.3.1/file?rid=maven-xwiki)[Sources](https://github.com/xwiki/xwiki-platform/tree/master/xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authorization/xwiki-platform-security-authorization-api/)[Problèmes](https://jira.xwiki.org/browse/XWIKI)\n\nTable des matières\n\n* [Description](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module#HDescription)\n* [API d'autorisation de sécurité](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module#HSecurityAuthorizationAPI)\n\t+ [Interface API générale](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module#HGeneralAPIinterface)\n\t+ [Interface API contextuelle (depuis 6.1RC1)](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module#HContextualAPIinterface28since6.1RC129)\n\t+ [Changer l'auteur actuel (depuis 8.3RC1)](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module#HChangecurrentauthor28since8.3RC129)\n\t+ [API de script (depuis 6.1RC1)](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module#HScriptingAPI28since6.1RC129)\n\t+ [Utilisation de checkAccess() versus hasAccess()](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module#HcheckAccess2829versushasAccess2829usage)\n\t+ [Quelques définitions vues par ce module](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module#HSomedefinitionsasseenbythismodule)\n\t+ [Décisions sur les droits et l'accès](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module#HRightsandaccessdecisions)\n\t\t- [Définitions des droits](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module#HRightdefinitions)\n\t\t- [Droits par défaut prédéfinis](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module#HDefaultrightsbeingpredefined)\n\t\t- [Politiques supplémentaires du règlement des droits par défaut](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module#HDefaultrightsettleradditionalpolicies)\n\t\t- [Limitations](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module#HLimitations)\n\t+ [API et pont](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module#HAPIandbridge)\n\t\t- [Références de sécurité](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module#HSecurityReferences)\n\t\t- [Interface de pont public](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module#HPublicbridgeinterface)\n\t+ [Événements](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module#HEvents)\n\t+ [Cache](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module#HCache)\n* [API d'authentification de sécurité](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module#HSecurityAuthenticationAPI)\n* [API URL de sécurité](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module#HSecurityURLAPI)\n* [Prérequis et instructions d'installation](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module#HPrerequisites26InstallationInstructions)\n* [Dépendances](https://extensions.xwiki.org/xwiki/bin/view/Extension/Security%20Module#HDependencies)\n# Description\n\nCe module est chargé de l'authentification des utilisateurs, de l'autorisation d'accès et de la sécurité contextuelle. État actuel :\n\n* L'API d'autorisation est implémentée en fournissant un pont vers les anciennes API RightService (voir [$xwiki.hasAccessLevel()](https://xwiki.org/xwiki/bin/view/ScriptingDocumentation/?api=xwiki&xpage=embed)). Ce pont est utilisé par défaut depuis la version 5.0M2. Ce module est disponible depuis la version 4.0M1, mais il ne doit être considéré comme stable que depuis la version 5.0.\n* L'API d'authentification n'est pas encore implémentée (le [vieux code de base](http://www.github.com/xwiki/xwiki-platform/tree/master/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/user/impl/xwiki) est actuellement utilisé et [documenté](https://xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Authentication/)). Cependant, certaines API liées à l'authentification ont été introduites (voir ci-dessous).\n\n# API d'autorisation de sécurité\n\nPour garantir l'efficacité, ce module utilise des techniques de mise en cache pour stocker à la fois les règles d'accès et les décisions d'accès résultantes prises par le règlement des autorisations. Vérifier plusieurs fois l'accès au même objet (ou à un objet de la même hiérarchie n'ayant pas d'accès spécial) pour le même utilisateur nécessite uniquement des recherches de cache très rapides. La version pontée de l'ancien com.xpn.xwiki.user.impl.xwiki.XWikiRightServiceImpl est donc appelée org.xwiki.security.authorization.internal.XWikiCachingRightService. Elle ne doit être utilisée que lorsque la nouvelle API ne répond pas à vos besoins.\n\nÉtant donné que l'aspect contextuel du module n'est pas encore disponible, ce module ne fournit pas de réponses contextuelles et ne fournit que des réponses d'accès basées sur des règles d'accès statiques (pendant une requête). (c'est-à-dire que DropPermission n'est pris en charge que par le pont XWikiCachingRightService.)\n\n## Interface API générale\n\nFournie par le rôle org.xwiki.security.authorization.AuthorizationManager :\n\n    /**\n     * Vérifie si l'utilisateur identifié par {@code userReference} a l'accès identifié par {@code right} sur l'entité identifiée par {@code entityReference}.\n     * Cette fonction doit être utilisée au point de contrôle de sécurité.\n     */\n    void checkAccess(Right right, DocumentReference userReference, EntityReference entityReference)\n        throws AccessDeniedException;\n\n    /**\n     * Vérifie si l'utilisateur identifié par {@code userReference} a l'accès identifié par {@code right} sur l'entité identifiée par {@code entityReference}.\n     * Cette fonction doit être utilisée pour des questions d'interface, utilisez {@link #checkAccess} aux points de contrôle de sécurité.\n     */\n    boolean hasAccess(Right right, DocumentReference userReference, EntityReference entityReference);\n\n    /**\n     * Enregistre un nouveau {@link Right} personnalisé.\n     */\n    Right register(RightDescription rightDescription) throws UnableToRegisterRightException;\n\n    /**\n     * Enregistre un nouveau {@link Right} personnalisé et l'ajoute en tant que droit implicite au jeu de droits donné.\n     *\n     * @param rightDescription la description complète du nouveau {@link Right}\n     * @param impliedByRights les droits qui devraient impliquer le nouveau droit.\n     * @return le {@link Right} créé\n     * @throws UnableToRegisterRightException si une erreur empêche la création du nouveau droit. Enregistrer exactement le même droit ne cause pas d'exception et retourne le droit existant.\n     * @since 12.6\n     */\n    Right register(RightDescription rightDescription, Set<Right> impliedByRights) throws UnableToRegisterRightException;\n\n    /**\n     * Désenregistre le {@link Right} personnalisé donné.\n     *\n     * @param right le droit personnalisé à désenregistrer.\n     * @throws AuthorizationException si le droit n'est pas personnalisé.\n     * @since 13.5RC1\n     */\n    void unregister(Right right) throws AuthorizationException;\n\n## Interface API contextuelle (depuis 6.1RC1)\n\nFournie par le rôle org.xwiki.security.authorization.ContextualAuthorizationManager :\n\n    /**\n     * Vérifie si l'accès identifié par {@code right} sur l'entité actuelle est autorisé dans le contexte actuel.\n     * Cette fonction doit être utilisée au point de contrôle de sécurité.\n     *\n     * @param right le droit nécessaire pour l'exécution de l'action\n     * @throws AccessDeniedException si l'action doit être refusée, ce qui peut également se produire en cas d'erreur\n     */\n    void checkAccess(Right right) throws AccessDeniedException;\n\n    /**\n     * Vérifie si l'accès identifié par {@code right} sur l'entité actuelle serait autorisé dans le contexte actuel.\n     * Cette fonction doit être utilisée pour des questions d'interface, utilisez {@link #checkAccess} aux points de contrôle de sécurité.\n     *\n     * @param right le droit à vérifier.\n     * @return {@code true} si l'utilisateur a le droit spécifié sur l'entité, {@code false} sinon\n     */\n    boolean hasAccess(Right right);\n\n    /**\n     * Vérifie si l'accès identifié par {@code right} sur l'entité donnée est autorisé dans le contexte actuel.\n     * Cette fonction doit être utilisée au point de contrôle de sécurité.\n     *\n     * @param right le droit nécessaire pour l'exécution de l'action\n     * @param entityReference l'entité sur laquelle vérifier le droit\n     * @throws AccessDeniedException si l'action doit être refusée, ce qui peut également se produire en cas d'erreur\n     */\n    void checkAccess(Right right, EntityReference entityReference) throws AccessDeniedException;\n\n    /**\n     * Vérifie si l'accès identifié par {@code right} sur l'entité donnée serait autorisé dans le contexte actuel.\n     * Cette fonction doit être utilisée pour des questions d'interface, utilisez {@link #checkAccess} aux points de contrôle de sécurité.\n     *\n     * @param right le droit à vérifier.\n     * @param entityReference l'entité sur laquelle vérifier le droit\n     * @return {@code true} si l'utilisateur a le droit spécifié sur l'entité, {@code false} sinon\n     */\n    boolean hasAccess(Right right, EntityReference entityReference);\n\nLe contexte inclut des informations telles que l'utilisateur authentifié, la macro actuelle en cours d'exécution, la restriction du contexte de rendu, la suppression des droits par macro, etc.\nSi vous doutez de l'API à utiliser, vous devriez probablement utiliser celle contextuelle, sauf si vous vérifiez vraiment les droits hors contexte.\n\n## Changer l'auteur actuel (depuis 8.3RC1)\n\nFournie par le rôle org.xwiki.security.authorization.AuthorExecutor :\n\n    /**\n     * Exécute le {@link Callable} passé avec les droits de l'utilisateur passé.\n     *\n     * @param callable la tâche à exécuter\n     * @param authorReference l'utilisateur sur lequel vérifier les droits\n     * @return le résultat calculé\n     * @throws Exception si le calcul d'un résultat échoue\n     * @param <V> le type de résultat de la méthode <tt>call</tt>\n     */\n    <V> V call(Callable<V> callable, DocumentReference authorReference) throws Exception;\n\n    /**\n     * Configure le contexte de sorte que le code suivant soit exécuté avec les droits de l'utilisateur fourni.\n     *\n     * <pre>\n     * {@code\n     * try (AutoCloseable context = this.executor.before(author)) {\n     *   ...\n     * }\n     * }\n     * </pre>\n     *\n     * @param authorReference l'utilisateur sur lequel vérifier les droits\n     * @return le contexte à restaurer\n     * @see #after(AutoCloseable)\n     */\n    AutoCloseable before(DocumentReference authorReference);\n\n    /**\n     * Restaure le contexte à son état précédent tel que défini par le {@link AutoCloseable} fourni.\n     *\n     * @param context le contexte à restaurer\n     * @see #before(DocumentReference)\n     */\n    void after(AutoCloseable context);\n\n## API de script (depuis 6.1RC1)\n\nFournit l'accès à l'API générale et contextuelle depuis les services de script.\nVoici quelques exemples de codes :\n\n#if ($services.security.authorization.hasAccess('edit'))\n... afficher une interface utilisateur nécessitant un accès en édition sur le document actuel par l'utilisateur actuel ...\n#end\n#if ($services.security.authorization.hasAccess('edit', 'xwiki:Sandbox.TestPage1'))\n... afficher une interface utilisateur nécessitant un accès en édition sur le document Sandbox.TestPage1 par l'utilisateur actuel ...\n#end\n#if ($services.security.authorization.hasAccess('edit', 'xwiki:XWiki.User1', 'xwiki:Sandbox.TestPage1'))\n... afficher une interface utilisateur nécessitant un accès en édition sur le document Sandbox.TestPage1 par XWiki.User1 ...\n#end\n$services.security.authorization.checkAccess('edit')\n... effectuer une tâche nécessitant un accès en édition ...\n\n## Utilisation de checkAccess() versus hasAccess()\n\nLes deux fonctions fournissent la même vérification d'accès, mais diffèrent dans la manière dont le résultat est rapporté. Alors que la méthode hasAccess() fournira simplement une réponse true/false, la méthode checkAccess() n'a pas besoin de vérifier la valeur de retour, car elle lancera une AccessDeniedException si l'accès résultant a été refusé.\n\nDans l'ancien service de droits, il n'y avait pas de distinction entre la vérification d'accès pour des questions d'interface utilisateur et la vérification d'accès pour réellement procéder à l'action. Seule la méthode hasAccess() était fournie. Manquer cette distinction n'est pas bon car :\n\n* cela ne permet pas de trouver facilement tous les points de contrôle d'accès critiques où l'accès est vérifié pour assurer la sécurité.\n* cela laisse la responsabilité de vérifier correctement les valeurs de retour par l'appelant à ces points de contrôle de sécurité.\n* cela laisse le fardeau de gérer la situation d'accès refusé individuellement dans tous ces points de contrôle de sécurité par l'appelant.\n\nPar conséquent, vous êtes fortement encouragé à utiliser la nouvelle méthode checkAccess() partout où vous vérifiez un accès avant une action. Et vous devriez vous abstenir de capturer l'exception résultante, cela devrait être fait à un niveau supérieur, par l'interface utilisateur qui pourra ainsi centraliser toutes les violations de contrôle d'accès. (Évidemment, c'est un travail en cours que nous commençons maintenant et qui ne fonctionnera correctement que lorsque la migration complète de l'ancien service sera terminée). Notez également que les violations d'accès effectuées pendant checkAccess() sont enregistrées. Dans la plupart des situations, cela ne devrait pas se produire, car l'interface utilisateur ou le code précédent ont déjà vérifié la possibilité d'accès et ne fournissent pas de chemin vers l'action interdite. Rappelez-vous également que vérifier le même accès plusieurs fois n'est pas plus coûteux, donc vérifier l'accès très près de l'action (même si vous pensez qu'il n'y a aucune raison pour qu'il soit refusé) est une bonne mesure de sécurité pour prévenir les bogues de sécurité. C'est clairement le but de la méthode checkAccess().\n\n## Quelques définitions vues par ce module\n\nEntité\nUne *entité* est un objet sur lequel certaines actions peuvent être réalisées. Cela peut être un document, un wiki, un espace, ou même un objet ou des propriétés xwiki. Elle peut, selon sa nature, contenir d'autres *entités*. Toutes les entités référencées par une EntityReference sont prises en charge. Les références à ces entités sont implémentées sous forme de SecurityReference (voir ci-dessous).\n\nUtilisateur\nUn *utilisateur* est représenté par un document *entité* et peut agir sur des *entités*. Les références aux utilisateurs sont implémentées sous forme de UserSecurityReference.\n\nGroupe\nUn *groupe* est un *utilisateur* qui représente un groupe d'*utilisateurs*. Un *utilisateur* est considéré comme recevant les droits de tous les *groupes* auxquels il appartient, ainsi que de tous les *groupes* auxquels ce *groupe* appartient et cela de manière récursive. Les références aux groupes sont implémentées sous forme de GroupSecurityReference.\n\nWiki\nUn wiki est une *entité* qui est une racine pour contenir d'autres *entités* (sauf *wiki*). Sauf pour les *utilisateurs/groupes globaux* (voir ci-dessous), toutes les informations de sécurité n'interagissent pas en dehors d'un *wiki*. (c'est-à-dire qu'un utilisateur d'un *wiki* ne peut pas avoir accès à une *entité* d'un autre wiki, ou être membre d'un *groupe* d'un autre wiki).\n\nWiki principal\nLe wiki principal est le premier *wiki* créé. Il peut contenir des sous-*wikis*. L'accès fourni au niveau du wiki, sur le *wiki principal* est hérité par tous les sous-*wikis*. Voir SecurityReference ci-dessous pour plus d'informations.\n\nUtilisateur/groupe global\nUn *utilisateur* ou *groupe* défini dans le *wiki principal*. Un tel *utilisateur* peut recevoir un accès aux *entités* des sous-*wikis* et être membre de *groupes* dans les sous-*wikis*. C'est le seul *wiki* qui interagit avec d'autres *wikis*.\n\nAction\nTout ce que vous pouvez coder qui agit sur une *entité* (l'action générale agit sur le *wiki* dans son ensemble) et que vous souhaitez sécuriser.\n\nDroit\nC'est une représentation symbolique d'une autorisation de réaliser des *actions* sur une *entité*. Plusieurs"
}