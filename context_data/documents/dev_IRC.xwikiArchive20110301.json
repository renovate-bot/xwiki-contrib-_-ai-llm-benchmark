{"id": "dev:IRC.xwikiArchive20110301", "url": "https://dev.xwiki.org/xwiki/bin/view/IRC/xwikiArchive20110301", "title": "IRC Archive for channel #xwiki - XWiki", "collection": "Eval-Large", "mimetype": "text/markdown", "language": "en", "content": "\n16:38\u00a0<jstoldt>\u00a0O\\_o can't access http://dev.xwiki.org/xwiki/bin/view/IRC/xwikiArchive20110228  \n16:39\u00a0<@cjdelisle>\u00a0Note the [?]'s in the quick links. Something is causing cache corruption.  \n16:48\u00a0<jstoldt>\u00a0yeah, i noticed the ? a while back already  \n16:49\u00a0<jstoldt>\u00a0and vmassol confirmed it  \n16:49\u00a0<jstoldt>\u00a0but it disappeared after a few minutes  \n16:49\u00a0<jstoldt>\u00a0now it works again :-S  \n16:50\u00a0<@cjdelisle>\u00a0When I get a chance I'll start tracing that problem. I'm 99% it's an issue with multiple wikis. It may even be a problem with how jbosscache maps keys to values.  \n16:51\u00a0<@cjdelisle>\u00a0>>todo  \n16:51\u00a0<jstoldt>\u00a0i see  \n16:52\u00a0<jstoldt>\u00a0different topic, what's the progress on the FS attachment storage?  \n16:53\u00a0<@cjdelisle>\u00a0almost done with the garbage bin part. Everything else works well enough that I don't notice any issues on my desktop installation.  \n16:53\u00a0<jstoldt>\u00a0so it's gonna make it for 3.0 for sure?  \n16:53\u00a0<@cjdelisle>\u00a0If there aren't any major surprises.  \n16:54\u00a0<evalica>\u00a0has quit  \n16:54\u00a0<jstoldt>\u00a0and what about some move files from DB to FS code? have you worked on that, yet?  \n16:54\u00a0<@cjdelisle>\u00a0at this stage, surprise means bug.  \n16:54\u00a0<jstoldt>\u00a0sure  \n16:55\u00a0<@cjdelisle>\u00a0attachments fail over to the db on load. Attachment archives and deleted attachments are as yet unhandled.  \n16:55\u00a0<@cjdelisle>\u00a0Should be easy enough with a groovy script though.  \n16:56\u00a0<@cjdelisle>\u00a0Utils.getComponent(AttachmentVersioningStore.class, \"default\")  \n16:56\u00a0<@cjdelisle>\u00a0Utils.getComponent(AttachmentVersioningStore.class, \"file\")  \n16:56\u00a0<@cjdelisle>\u00a0get, put...  \n16:56\u00a0<@cjdelisle>\u00a0For a big system that makes sense.  \n16:56\u00a0<jstoldt>\u00a0no, i meant what about some code that would download the files from DB to FS and remove them from DB  \n16:56\u00a0<@cjdelisle>\u00a0^^  \n16:57\u00a0<@cjdelisle>\u00a0That's about all you need.  \n16:57\u00a0<jstoldt>\u00a0ah, okay... no hash comparison, though, right?  \n16:58\u00a0<@cjdelisle>\u00a0get, feed input stream through hash function, put, get from file, feed stream through hash function again.  \n16:58\u00a0<@cjdelisle>\u00a0Not that difficult.  \n16:58\u00a0<jstoldt>\u00a0okay, i see :)  \n16:58\u00a0<@cjdelisle>\u00a0Can be done in a groovy script as well.  \n16:58\u00a0<jstoldt>\u00a0very nice  \n16:59\u00a0<@cjdelisle>\u00a0For a small system or a new system it might make more sense to just leave it alone.  \n16:59\u00a0<jstoldt>\u00a0true  \n17:00\u00a0<jstoldt>\u00a0i think the major improvement lies with being able to store large files more effectively, anyway, right?  \n17:00\u00a0<@cjdelisle>\u00a0In a new system it will never store in the db, in a small system it will migrate on it's own (if I add failover to the archive and deleted attachment store.)  \n17:00\u00a0<@cjdelisle>\u00a0being able to store large files.  \n17:00\u00a0<@cjdelisle>\u00a0It limited out at ~40MB for a 1024MB system.  \n17:01\u00a0<@cjdelisle>\u00a0+abused the database  \n17:02\u00a0<jstoldt>\u00a0but that is no more a problem with the FS storage, right?  \n17:03\u00a0<jstoldt>\u00a0nice :)  \n17:05\u00a0<@cjdelisle>\u00a0lols is make a page which sends 1GBof.nulls.gz and set http header Content-Encoding: gzip  \n17:05\u00a0<@cjdelisle>\u00a0poor firefox downloads a 1MB file which decompresses to 1GB  \n17:06\u00a0<@cjdelisle>\u00a0\"I told you not to wander around on my webserver\"  \n17:08\u00a0<jstoldt>\u00a0lol  \n17:37\u00a0<+tmortagne>\u00a0cjdelisle: there is something very weird with https://svn.xwiki.org/svnroot/xwiki/platform/core/trunk/xwiki-store/xwiki-store-serialization/src/test/java/org/xwiki/store/serialization/internel/AbstractXMLSerializerTest.java  \n17:37\u00a0<+tmortagne>\u00a0it's in a wrong folder  \n17:37\u00a0<+tmortagne>\u00a0i don't understand how it can build  \n17:37\u00a0<+tmortagne>\u00a0java is supposed to not like much this  \n17:37\u00a0<+tmortagne>\u00a0unless it's only Eclipse  \n17:38\u00a0<+tmortagne>\u00a0wrong folder=folder names is not the same as package name  \n17:38\u00a0<@cjdelisle>\u00a0Ahh, I moved a bunch of stuff around and I must have missed one.  \n17:39\u00a0<@cjdelisle>\u00a0It is definitely just eclipse because I had a whole bunch of them in the wrong places on local for a while.  \n17:39\u00a0<@cjdelisle>\u00a0Thanks for pointing that out.  \n17:39\u00a0<+tmortagne>\u00a0yep just tested, looks like it's a Eclipse only thing  \n17:41\u00a0<@cjdelisle>\u00a0As soon as I get a chance to switch the XMLWriter used in the core to the one in Serialization, documents will be tabbed in 1 space per element.  \n17:42\u00a0<@cjdelisle>\u00a0Probably ought to rename it XMLStreamWriter since it shares a name with the class it extends.  \n17:42\u00a0<+tmortagne>\u00a0no need to change tthe XMLWriter for that  \n17:42\u00a0<+tmortagne>\u00a0it's just a configuration in the current one  \n17:42\u00a0<@cjdelisle>\u00a0Yes but we made some changes which caused bugs.  \n17:43\u00a0<+tmortagne>\u00a0ok  \n17:43\u00a0<@cjdelisle>\u00a0writeOpen() and writeClose() were not really supposed to be used externally but they are needed for streaming.  \n17:44\u00a0<@cjdelisle>\u00a0Anyway it's all fixed and tested well so as soon as I get a chance we'll have pretty xml exports.  \n17:44\u00a0<+tmortagne>\u00a0note that at first it was on purpose that the XML output was on one line (less chars etc...) AFAIK  \n17:45\u00a0<+tmortagne>\u00a0but I agree it's not very nice looking xhtml pages  \n17:46\u00a0<@cjdelisle>\u00a0Yea, I thought about that but if we really wanted small size then xml is not the way to go in general.  \n17:47\u00a0<@cjdelisle>\u00a0XML is readable so we might as well make it truely readable.  \n18:09\u00a0<abusenius>\u00a0has quit  \n18:22\u00a0<tmortagne>\u00a0has quit  \n18:27\u00a0<fmancinelli>\u00a0has joined #xwiki  \n18:28\u00a0<fmancinelli>\u00a0Hi all, I am experiencing building problems (tried with Maven 3 and 2). The problem is in module \"XWiki Platform - Core - Extension - Handler - XAR\" : http://pastebin.com/mTtMnXSp . Do you have the same issue?  \n18:48\u00a0<sburjan`>\u00a0has joined #xwiki  \n18:54\u00a0<fmancinelli>\u00a0Update: I removed the ~/.m2/repository/com/xpn tree and the missing dependency problem is gone. However now the build fails for other reasons: http://pastebin.com/a2k0GbU4  \n18:56\u00a0<+sburjan`>\u00a0did we start the release of M3 ?  \n19:03\u00a0<arkub>\u00a0has quit  \n19:12\u00a0<abusenius>\u00a0has joined #xwiki  \n19:14\u00a0<Enygma`>\u00a0has quit  \n19:21\u00a0<fmancinelli>\u00a0has quit  \n19:25\u00a0<mflorea>\u00a0has quit  \n19:44\u00a0<jvdrean1>\u00a0has quit  \n20:51\u00a0<qwebirc99341>\u00a0has joined #xwiki  \n20:51\u00a0<qwebirc99341>\u00a0has left #xwiki  \n20:57\u00a0<mflorea>\u00a0has joined #xwiki  \n21:01\u00a0<@cjdelisle>\u00a0I was thinking maybe EntiryReference should be EntityReference<T> where T is the thing which the reference points to, that way we won't have such a proliferation of references for all different things.  \n21:04\u00a0<@cjdelisle>\u00a0That way we could have storage methods like: \u00a0T getEntity(EntityReference<T> reference)  \n21:45\u00a0<abusenius>\u00a0has quit  \n22:00\u00a0<abusenius\\_>\u00a0has joined #xwiki  \n22:02\u00a0<abusenius\\_>\u00a0is now known as <abusenius>  \n22:12\u00a0<vmassol>\u00a0has joined #xwiki  \n22:16\u00a0<vmassol>\u00a0has quit  \n23:20\u00a0<mflorea>\u00a0has quit  \n23:35\u00a0<mflorea>\u00a0has joined #xwiki  \n\n"}