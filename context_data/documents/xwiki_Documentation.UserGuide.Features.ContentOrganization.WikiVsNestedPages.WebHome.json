{"id": "xwiki:Documentation.UserGuide.Features.ContentOrganization.WikiVsNestedPages.WebHome", "url": "https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/ContentOrganization/WikiVsNestedPages/", "title": "Wiki vs Nested Pages", "collection": ["Eval", "Eval-Large"], "mimetype": "text/markdown", "language": "en", "content": "\nXWiki 7.2 has introduced the concept of Nested Spaces. With this new concept it's legitimate to ask oneself what are the differences between using a (sub)wiki or using Nested Pages.\n\n# Summary\n\nThere are 2 main use cases when you'd use a Wiki instead of Nested Pages:\n\n* You want to provide custom Applications/Extensions to a group of users of your wiki\n* You want to implement an XWiki Farm where each wiki is seen as an island (own users, etc)\n\n# Features\n\n\n\n| Feature | Supported by Wiki? | Supported by Nested Pages? | Notes/Ideas |\n| --- | --- | --- | --- |\n| Set a custom Skin/Color Theme/Icon Theme | accept | accept |  |\n| Set custom Panels | accept | accept |  |\n| Delegate Administration/Right Management | accept | accept\\* | In 7.2, an Admin can decide that such user or group has Admin rights on a Page and its children. [\\*] It's much harder to implement the rights for a Farm Mode when using Nested Pages than when using a Wiki, but it's possible. |\n| Dedicated Users and Groups | accept | cancel | Provides isolation, both in term of visibility and security. |\n| Notion of Owner | accept | cancel | The Owner has all permissions in a wiki |\n| Ability to install JAR Extensions | accept | cancel | Right now when installing with the EM UI, you cannot decide to install an Extension only for a Nested Page even though this is supported in the Core |\n| Ability to install Applications/Flavors | accept | cancel | Right now when Importing or using the EM UI to install an Application (XAR), it's not possible to root it under a certain Nested Page (i.e have it install itself relatively to a Nested Page). It's also not possible to install a Flavor in a Nested Page. |\n| Ability to have a dedicated domain name/Clean URL scheme and Breadcrumb | accept | error\\* | [\\*] Possible but with some configuration: Apache-level config or URLRewriteFilter config |\n| Ability to maintain the database easily | accept | cancel | Subwiki use different schemas and this makes it very easy to maintain per wiki (for Farm use cases for ex). Database backups and restores can be done on a per-wiki basis. A wiki can be moved independently to another server (some links may be broken, depends on usage), providing solution to scalability issues. Extensions can create special tables in the schema of a given wiki (still needs some manual configuration). Schemas can also be optimized for specific purposes such as custom mapping. |\n| Ability to easily query data across instances | cancel\\* | accept | [\\*] Because wikis are stored in independent schemas, you cannot perform a single DB query across multiple schema. However you can query content using the Solr syntax of the Query Manager which works across schemas. Nested Pages, on the other side, are within the same wiki, so within the same schema; it is possible to cover data stored in multiple Nested Pages with a single database query. For example displaying data coming different wikis inside a LiveTable is not easy and requires writing some custom JSON. |\n| Ability to search in multiple instances | accept | accept | Solr indexes data independently from the database storage, so searching works across both wikis and Nested Pages. |\n| Ability to create based on a Template with several Pages | accept | cancel | Page Templates are currently only a single Page. |\n| Creation/Deletion of Wiki or Nested Page | accept\\* | accept | [\\*] Deleting a Nested Page will warn about broken links which is not the case when deleting a wiki. Also, you cannot rollback a deleted wiki, so unless you have a backup you've lost your data. You can't restore a deleted Page with a single click from the UI either, but at least you can restore each children Page under a Nested Page from the UI, or use a script. In other words, there's no Recycle bin for wikis. |\n| Renaming of Wiki or Page | cancel | accept | Page Rename updates backlinks automatically |\n| Invite Users | accept | cancel | You cannot invite users only for a Page |\n| Implement a \"playground\" | accept | cancel | Nested Page share the XClasses. If you modify one XClass (e.g. XWiki.JavaScriptExtension) you affect all the Pages that use it. Wikis have to duplicate the XClasses, but this means the modifications are isolated. As a consequence, it's much harder (ifnot impossible) to implement a \"playground\" using a Nested Page than using a wiki. |\n| Easiness of upgrades | cancel | accept | Harder to upgrade XWiki: each wiki needs to be upgraded individually, even if it's only 1 click in the UI. Also it's slower to upgrade multiple wikis (e.g. when running database migrations since each wiki is a database). |\n\n\n"}