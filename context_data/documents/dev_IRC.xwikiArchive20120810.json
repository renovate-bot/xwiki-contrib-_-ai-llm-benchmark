{"id": "dev:IRC.xwikiArchive20120810", "url": "https://dev.xwiki.org/xwiki/bin/view/IRC/xwikiArchive20120810", "title": "IRC Archive for channel #xwiki on 10 August 2012 - XWiki", "collection": "Eval-Large", "mimetype": "text/markdown", "language": "en", "content": "\n00:55\u00a0<polx>\u00a0has quit  \n01:16\u00a0<CIA-114>\u00a0Denis Gervalle\u000f master\u000f \\* rde3c8c0\u000f https://github.com/xwiki/xwiki-platform/commit/de3c8c0c4949d891bd385a4fecb1408616fcd9d1 \u000f/ xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/store/migration/hibernate/R40000XWIKI6990DataMigration.java :\u000f XWIKI-8126: Better error reporting when proper hibernate mapping is not found during R40000XWIKI6990 - http://git.io/qwZ-mw  \n01:18\u00a0<CIA-114>\u00a0Denis Gervalle\u000f stable-4.1.x\u000f \\* rb51311e\u000f https://github.com/xwiki/xwiki-platform/commit/b51311efea9da3feb87856b2af3582ee7d66362f \u000f/ xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/store/migration/hibernate/R40000XWIKI6990DataMigration.java :\u000f XWIKI-8126: Better error reporting when proper hibernate mapping is not found during R40000XWIKI6990 - http://git.io/EKfFOQ  \n02:09\u00a0<@sdumitriu>\u00a0cjd: Ping again  \n02:09\u00a0<@cjd>\u00a0pong  \n02:10\u00a0<@sdumitriu>\u00a0Good, now let me remember what I was pinging you about...  \n02:10\u00a0<tekzilla>\u00a0has quit  \n02:10\u00a0<@sdumitriu>\u00a0I think it was about the attachment stuff  \n02:10\u00a0<@sdumitriu>\u00a0From what I see in https://github.com/cjdelisle/xwiki-newstore/blob/master/xwiki-platform-store-datanucleus/xwiki-platform-store-datanucleus-blob/src/main/java/org/xwiki/store/blob/datanucleus/internal/BlobSaveTransactionRunnable.java  \n02:11\u00a0<@sdumitriu>\u00a0I gather that you're splitting the content into small chunks (BlobChunk) that you store individually  \n02:12\u00a0<@cjd>\u00a0yes  \n02:12\u00a0<@sdumitriu>\u00a0I don't get who's actually going to push this stuff into the store  \n02:12\u00a0<@sdumitriu>\u00a0I mean, what's happening behind PersistenceManager.makePersistent  \n02:12\u00a0<@cjd>\u00a0At that point it's JDO which is equivilant to Session.save()  \n02:13\u00a0<@cjd>\u00a0did I answer the right question?  \n02:13\u00a0<@sdumitriu>\u00a0So when it sees  \n02:13\u00a0<@sdumitriu>\u00a0@PersistenceCapable(table = \"BlobChunk\")  \n02:13\u00a0<@sdumitriu>\u00a0It's going to call getContent() and setContent(byte[])?  \n02:14\u00a0<@cjd>\u00a0It adds setters and getters during the build process  \n02:14\u00a0<@cjd>\u00a0so there is something hidden in there like \u00a0\u00a0jdoGetField(int fieldIndex)  \n02:14\u00a0<@cjd>\u00a0there's a bytecode mangler which reads those annotations and adds the necessary methods  \n02:14\u00a0<@cjd>\u00a0which I have come to really like since it keeps stuff clean on my end  \n02:15\u00a0<@sdumitriu>\u00a0Yep  \n02:15\u00a0<@sdumitriu>\u00a0Hibernate should also be used using annotations  \n02:15\u00a0<@sdumitriu>\u00a0Using a mapping file is kind of deprecated  \n02:15\u00a0<@cjd>\u00a0I think it can but it still needs the setters and getters  \n02:16\u00a0<@cjd>\u00a0with jdo you write your class as you want it and then it fixes it so that it can handle it </ad>  \n02:16\u00a0<tekzilla>\u00a0has joined #xwiki  \n02:16\u00a0<@sdumitriu>\u00a0Yep  \n02:16\u00a0<@sdumitriu>\u00a0Hibernate doesn't do that, but you can combine it with another tool that adds getters and setters  \n02:16\u00a0<@sdumitriu>\u00a0There are several that do that  \n02:17\u00a0<@cjd>\u00a0hmm interesting  \n02:17\u00a0<@sdumitriu>\u00a0And you can even let Hibernate use reflection to access private fields without getters and setters  \n02:18\u00a0<@sdumitriu>\u00a0I can't remember their names  \n02:18\u00a0<@cjd>\u00a0yeah, the only annoying thing is it breaks any hope of running under a security manager  \n02:18\u00a0<@sdumitriu>\u00a0Yep  \n02:18\u00a0<@sdumitriu>\u00a0OK, let's get back to our code  \n02:18\u00a0<@sdumitriu>\u00a0So  \n02:18\u00a0<@cjd>\u00a0also IIRC there is one configuration which has performance problems, I can't remember what it is  \n02:19\u00a0<@sdumitriu>\u00a0I guess that you need the output stream for this line:  \n02:19\u00a0<@sdumitriu>\u00a0https://github.com/cjdelisle/xwiki-newstore/blob/master/xwiki-platform-store-datanucleus/xwiki-platform-store-datanucleus-blob/src/main/java/org/xwiki/store/blob/datanucleus/internal/BlobLoadTransactionRunnable.java#L55  \n02:19\u00a0<@cjd>\u00a0https://github.com/cjdelisle/xwiki-newstore/blob/master/xwiki-platform-store-datanucleus/xwiki-platform-store-datanucleus-attachments/src/main/java/org/xwiki/store/attachments/datanucleus/internal/DataNucleusAttachmentContentStore.java <-- here's the inter-thread communication mess which makes it work, I'd like to merge the patch and scrap this since it just reaks of fragility  \n02:19\u00a0<@cjd>\u00a0yes, that's the one  \n02:21\u00a0<@sdumitriu>\u00a0I'm trying to find a way to make it work with an InputStream instead of an OutputStream  \n02:22\u00a0<@cjd>\u00a0I suppose it would be possible to implement a state machine but that would be fragile and unmaintainable  \n02:23\u00a0<@cjd>\u00a0and reading from it outside of a transaction would make it just blow up  \n02:23\u00a0<@sdumitriu>\u00a0Nope, I'm thinking more like a funnel  \n02:23\u00a0<@cjd>\u00a0so you'd have a magic InputStream which worked sometimes  \n02:23\u00a0<@sdumitriu>\u00a0Like have an intermediary pipe  \n02:23\u00a0<@sdumitriu>\u00a0You write into it from your loader code  \n02:23\u00a0<@sdumitriu>\u00a0And you read from it in the attachment  \n02:24\u00a0<@sdumitriu>\u00a0And it will read with hops  \n02:24\u00a0<@cjd>\u00a02 threads?  \n02:24\u00a0<@sdumitriu>\u00a0Yes  \n02:24\u00a0<@cjd>\u00a0that's what I have now  \n02:24\u00a0<@cjd>\u00a0https://github.com/cjdelisle/xwiki-newstore/blob/master/xwiki-platform-store-datanucleus/xwiki-platform-store-datanucleus-attachments/src/main/java/org/xwiki/store/attachments/datanucleus/internal/DataNucleusAttachmentContentStore.java  \n02:24\u00a0<@cjd>\u00a0I don't like it, IMO it's way too fragile  \n02:24\u00a0<@sdumitriu>\u00a0Yes, I've seen that code  \n02:25\u00a0<@cjd>\u00a0and I don't like spawning a thread without a good reason.  \n02:25\u00a0<@sdumitriu>\u00a0Right, I missed the attachment.setContent(pis);  \n02:25\u00a0<@sdumitriu>\u00a0Right, now that I read it again, it's exactly what I was thinking of  \n02:26\u00a0<@sdumitriu>\u00a0But I think I'd do the threads differently  \n02:27\u00a0<@sdumitriu>\u00a0The part that's gathering data and is writing should be in a side thread  \n02:27\u00a0<@sdumitriu>\u00a0And the main thread should block on reading the data  \n02:27\u00a0<@sdumitriu>\u00a0Actually, I'm not even sure it's needed  \n02:27\u00a0<@sdumitriu>\u00a0Is it?  \n02:28\u00a0<@sdumitriu>\u00a0Hm...  \n02:28\u00a0<@cjd>\u00a0Is what needed?  \n02:28\u00a0<@cjd>\u00a0I really don't like that code, if we were to merge that into the platform, we are almost guaranteed to get funny race conditions and magic on various different systems  \n02:28\u00a0<@sdumitriu>\u00a0Since setContent(inputstream) \u00a0doesn't actually block on setting the content, you'll actually hang when trying to read the attachment content later on  \n02:29\u00a0<@cjd>\u00a0no, it does  \n02:29\u00a0<@sdumitriu>\u00a0And any call on getContent() will wait until the database reading thread calls stream.close()  \n02:29\u00a0<@cjd>\u00a0no, setContent copies the content into a FileItem  \n02:30\u00a0<@sdumitriu>\u00a0It does?  \n02:30\u00a0<@sdumitriu>\u00a0Let me check  \n02:30\u00a0<@sdumitriu>\u00a0Right, it does  \n02:30\u00a0<@sdumitriu>\u00a0So it will block until it can read all the data from the InputStream  \n02:31\u00a0<@sdumitriu>\u00a0So, to sum up  \n02:32\u00a0<@sdumitriu>\u00a0You have a thread that's waiting for chunks of data to come from the distributed cassandra store  \n02:32\u00a0<@sdumitriu>\u00a0And that thread writes this data into an output stream  \n02:32\u00a0<@cjd>\u00a0A thread loading them and handing them through the pipe and another thread waiting for them in a blocked read call  \n02:32\u00a0<@sdumitriu>\u00a0On the other side, there's an attachment content that's trying to copy this data into a file item  \n02:33\u00a0<@cjd>\u00a0yeap  \n02:33\u00a0<@sdumitriu>\u00a0And it will block until it gets a close() on that stream  \n02:33\u00a0<@cjd>\u00a0or unti it gets interrupted, or until the magic thread gremlins show up and cause problems  \n02:33\u00a0<@cjd>\u00a0IMO my code there is not stable  \n02:34\u00a0<@sdumitriu>\u00a0If you move the copy to a side thread, it is indeed unstable  \n02:34\u00a0<@sdumitriu>\u00a0At least one of the two branches has to block the main call  \n02:35\u00a0<@cjd>\u00a0A single thread doing a load/write loop is pretty stable but that requires access to the OutputStream in XAC  \n02:35\u00a0<@sdumitriu>\u00a0You moved the copy code in a side thread, but I would do it the other way  \n02:35\u00a0<@sdumitriu>\u00a0Since Cassandra is more asynchronous IMO than XWiki  \n02:35\u00a0<@cjd>\u00a0PersistenceManager.getObject() is synchronous  \n02:36\u00a0<@cjd>\u00a0sadly  \n02:36\u00a0<@sdumitriu>\u00a0Yes, removing the pipe would remove the need for two threads  \n02:38\u00a0<@cjd>\u00a0Actually I think if it came down to it, it would be better to read all of the content out to a temp file and write it back. It's double buffering but at least it is not threading magic.  \n02:38\u00a0<@cjd>\u00a0But IMO the best solution it the OutputStream  \n02:42\u00a0<@sdumitriu>\u00a0I for one don't like that you're loading the chunks one by one  \n02:42\u00a0<@sdumitriu>\u00a0It's going to be slow  \n02:42\u00a0<@sdumitriu>\u00a0Well, normally we won't have huge attachments  \n02:43\u00a0<@cjd>\u00a01MB chunks  \n02:43\u00a0<@sdumitriu>\u00a0But still, that's a perfect target for parallelization  \n02:43\u00a0<@cjd>\u00a0You can only pull so much from the disk at a time  \n02:43\u00a0<@sdumitriu>\u00a0Load all the chunks in parallel, asynchronously, and then combine them in a temporary file  \n02:44\u00a0<@sdumitriu>\u00a0But that's outside the scope of this discussion  \n02:44\u00a0<@sdumitriu>\u00a0OK, so let's say that I see why you need the output stream now  \n02:45\u00a0<@sdumitriu>\u00a0There are ways around it, but it would be simpler to have it  \n02:45\u00a0<@cjd>\u00a0That's my thinking.  \n02:45\u00a0<@sdumitriu>\u00a0I'll send a +1 vote after supper  \n02:45\u00a0<@cjd>\u00a0Thanks a lot  \n02:46\u00a0<@cjd>\u00a0Note that re the slow loading, another optimization target is to cache attachments by their sha1 on the filesystem and load them from the cache if possible  \n02:46\u00a0<@cjd>\u00a0so the slow database load is only the first load of the dat  \n02:46\u00a0<@cjd>\u00a0\\*day  \n02:47\u00a0<@cjd>\u00a0right now we do almost that well since they are cached until the XWikiDoc is garbage collected  \n02:55\u00a0<Denis>\u00a0has quit  \n03:09\u00a0<ssavi>\u00a0has quit  \n03:57\u00a0<ssavi>\u00a0has joined #xwiki  \n05:03\u00a0<CIA-114>\u00a0Caleb James DeLisle\u000f master\u000f \\* rf1bdd33\u000f https://github.com/xwiki/xwiki-platform/commit/f1bdd33ee3d6f069699fd2405b77c996f668268c \u000f/ (2 files in 2 dirs):\u000f XWIKI-8121: XWikiAttachmentContent should have a way to set the content by writing to a provided OutputStream. - http://git.io/yL8KxQ  \n05:03\u00a0<CIA-114>\u00a0Caleb James DeLisle\u000f master\u000f \\* r9452ee7\u000f https://github.com/xwiki/xwiki-platform/commit/9452ee7ad0a42e9036fb5e3508a0a5216ac016be \u000f/ xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/doc/XWikiAttachmentContent.java :\u000f XWIKI-8121: XWikiAttachmentContent should have a way to set the content by writing to a provided OutputStream. - http://git.io/zCaWpw  \n05:03\u00a0<CIA-114>\u00a0Caleb James DeLisle\u000f master\u000f \\* r724202d\u000f https://github.com/xwiki/xwiki-platform/commit/724202d64fed533b705a57197b91064b8d9f27e6 \u000f/ (2 files in 2 dirs):\u000f XWIKI-8121: XWikiAttachmentContent should have a way to set the content by writing to a provided OutputStream. - http://git.io/cpgCRw  \n05:06\u00a0<ssavi>\u00a0has quit  \n05:39\u00a0<ssavi>\u00a0has joined #xwiki  \n05:41\u00a0<ssavi\\_>\u00a0has joined #xwiki  \n05:43\u00a0<ssavi>\u00a0has quit  \n05:43\u00a0<ssavi\\_>\u00a0is now known as <ssavi>  \n05:56\u00a0<ssavi\\_>\u00a0has joined #xwiki  \n05:59\u00a0<ssavi>\u00a0has quit  \n06:01\u00a0<ssavi\\_>\u00a0has quit  \n07:22\u00a0<SvenDowideit>\u00a0has joined #xwiki  \n08:00\u00a0<Denis>\u00a0has joined #xwiki  \n08:54\u00a0<tmortagne>\u00a0has joined #xwiki  \n09:13\u00a0<polx>\u00a0has joined #xwiki  \n09:19\u00a0<vmassol>\u00a0has joined #xwiki  \n09:29\u00a0<Denis>\u00a0has quit  \n11:03\u00a0<Denis>\u00a0has joined #xwiki  \n11:17\u00a0<vmassol>\u00a0has quit  \n11:24\u00a0<tmortagne>\u00a0has quit  \n11:28\u00a0<mflorea>\u00a0has joined #xwiki  \n11:39\u00a0<mflorea>\u00a0has quit  \n12:24\u00a0<Helge>\u00a0has joined #xwiki  \n12:26\u00a0<Helge>\u00a0Hi, short question: Change of Rights to a page is currently a minor edit. Can that be configured to be a majjor edit? Thanks for advise.  \n12:46\u00a0<polx>\u00a0has quit  \n12:55\u00a0<+Denis>\u00a0Helge: no, it is not. A partial solution would be to change the interface used for setting rights, but it will not capture all cases. Why do you want those edit to be major ?  \n12:59\u00a0<sburjan`>\u00a0has quit  \n13:05\u00a0<CIA-114>\u00a0Denis Gervalle\u000f master\u000f \\* rd863d0a\u000f https://github.com/xwiki/xwiki-platform/commit/d863d0a7a81b210943f733e972f97354d6c91fcd \u000f/ xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/store/migration/hibernate/R40000XWIKI6990DataMigration.java :\u000f XWIKI-8126: Better error reporting when proper hibernate mapping is not found during R40000XWIKI6990 - http://git.io/xGqxLA  \n13:07\u00a0<CIA-114>\u00a0Denis Gervalle\u000f stable-4.1.x\u000f \\* r92ccbce\u000f https://github.com/xwiki/xwiki-platform/commit/92ccbcefc6f6e69c04918266df0e66cc7abbf485 \u000f/ xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/store/migration/hibernate/R40000XWIKI6990DataMigration.java :\u000f XWIKI-8126: Better error reporting when proper hibernate mapping is not found during R40000XWIKI6990 - http://git.io/isbWKw  \n13:15\u00a0<vmassol>\u00a0has joined #xwiki  \n13:19\u00a0<vmassol>\u00a0has quit  \n13:20\u00a0<mflorea>\u00a0has joined #xwiki  \n13:29\u00a0<CIA-114>\u00a0Denis Gervalle\u000f master\u000f \\* rde245de\u000f https://github.com/xwiki/xwiki-platform/commit/de245de5221ebd0df84636b40b163ae3a5609198 \u000f/ xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/store/migration/hibernate/R40000XWIKI6990DataMigration.java :\u000f XWIKI-8125: Add support of Microsoft SQL Server databases in R40000XWIKI6990 migration - http://git.io/qpp2QQ  \n13:31\u00a0<CIA-114>\u00a0Denis Gervalle\u000f stable-4.1.x\u000f \\* rd80e96a\u000f https://github.com/xwiki/xwiki-platform/commit/d80e96a7dfd3768d54ff8ce66f8a4c79545426cd \u000f/ xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/store/migration/hibernate/R40000XWIKI6990DataMigration.java :\u000f XWIKI-8125: Add support of Microsoft SQL Server databases in R40000XWIKI6990 migration - http://git.io/VTTEcw  \n13:50\u00a0<vmassol>\u00a0has joined #xwiki  \n13:53\u00a0<+Denis>\u00a0vmassol: Hi, I have found an issue with custom mapped class that I am puzzle with, maybe you can provide some insight on how I should fix it ?  \n13:54\u00a0<vmassol>\u00a0Denis: hi\u2026 Sorry I'm still on holidays, was just connecting for a few seconds to get my mails\u2026 ;) I'm back on Monday though  \n13:54\u00a0<+Denis>\u00a0anyone else on this ?  \n13:54\u00a0<vmassol>\u00a0has quit  \n14:01\u00a0<@sdumitriu>\u00a0Denis: Shoot, maybe I can help  \n14:01\u00a0<+Denis>\u00a0sdumitriu: When you made a copy of a document containing a custom mapped class, a new custom mapped class is created by the exact copy of the original document class definition, but the custom mapping for this copied class is probably incorrect or not available.  \n14:02\u00a0<+Denis>\u00a0For exemple, if you made a copy of\u00a0XWiki.XWikiPreferences, you get a new class that has an internal mapping, but since the .xbm is unchanged, there is probably no chance that the newly defined class has a mapped entity in the hibernate mapping  \n14:02\u00a0<+Denis>\u00a0This cause the migration to fail to migrate a database that contains a copy of XWiki.XWikiPreferences  \n14:03\u00a0<+Denis>\u00a0Note that the copied document contains an unusable class.  \n14:03\u00a0<@sdumitriu>\u00a0OK, I see  \n14:05\u00a0<+Denis>\u00a0I really do not know what to do with that, IMO there is 2 issue, how we handle copy of document with custom mapped classes, and how we handle the past during migration  \n14:06\u00a0<+Denis>\u00a0Not that dynamically custom mapped class could do something even worse, since it will map both class the same way  \n14:07\u00a0<+Denis>\u00a0WDYT ?  \n14:08\u00a0<@sdumitriu>\u00a0IMO, the root of the problem is that when cloning BaseClass, we copy the customMapping field  \n14:09\u00a0<@sdumitriu>\u00a0So in XWikiDocument.cloneInternal we should call doc.getXClass().setCustomMapping(false)  \n14:09\u00a0<@sdumitriu>\u00a0(after cloning the XClass)  \n14:09\u00a0<@sdumitriu>\u00a0WDYT?  \n14:09\u00a0<@sdumitriu>\u00a0Hm...  \n14:09\u00a0<@sdumitriu>\u00a0Actually that's not good  \n14:09\u00a0<@sdumitriu>\u00a0Since we might just clone the same document  \n14:10\u00a0<@sdumitriu>\u00a0hasCustomMapping shouldn't be something that the BaseClass stores in a field...  \n14:11\u00a0<@sdumitriu>\u00a0That's what the storage should handle on the fly  \n14:12\u00a0<+Denis>\u00a0hasCustomMapping is not stored  \n14:12\u00a0<+Denis>\u00a0the custom mapping is, and could either contains \"internal\" or an XML mapping  \n14:13\u00a0<+Denis>\u00a0I also see another tricky situation, the renaming of a document containing a custom mapped class  \n14:13\u00a0<+Denis>\u00a0which is a copy/delete, and maybe this one should keep the mapping  \n14:15\u00a0<+Denis>\u00a0I agree that generaly we should drop the custom mapping, but this will not fix existing copies  \n14:16\u00a0<+Denis>\u00a0should I relax my current throw during migration, into a warning, and risk to reach a migration success while there is a potential failure ?  \n14:16\u00a0<@sdumitriu>\u00a0The only one that truly knows how custom mappings should work is Ludovic...  \n14:17\u00a0<+Denis>\u00a0I know how it works, this is more how a copied class should work that have been overlooked  \n14:19\u00a0<+Denis>\u00a0In the case of Jeremie, who raise the issue, he made a backup copy of its preferences, and was unable to migrate its database afterwards, which is really annoying and could repeat over time. Should even a custom mapped class be copied ?  \n14:26\u00a0<+Denis>\u00a0sdumitriu: I see your puzzle like me, I have sent a mail on the ML  \n14:26\u00a0<@sdumitriu>\u00a0I asked Ludo  \n14:26\u00a0<@sdumitriu>\u00a0I for one am in favor of dropping the custom mapping on clone  \n14:30\u00a0<mflorea>\u00a0has quit  \n14:40\u00a0<+Denis>\u00a0could we base that on cloneInternal()'s keepsIdentity arguments ?  \n14:41\u00a0<@sdumitriu>\u00a0Yes  \n14:43\u00a0<mflorea>\u00a0has joined #xwiki  \n14:43\u00a0<mflorea>\u00a0has quit  \n14:43\u00a0<mflorea1>\u00a0has joined #xwiki  \n14:44\u00a0<+Denis>\u00a0sdumitriu: could I cleanup the xClassXML, or should I update it ?  \n14:44\u00a0<@sdumitriu>\u00a0Just cleanup  \n14:53\u00a0<+Denis>\u00a0sdumitriu: http://pastebin.com/uuL753Pm  \n14:56\u00a0<@sdumitriu>\u00a0Sounds good  \n14:56\u00a0<@sdumitriu>\u00a0com.xpn.xwiki.store.XWikiHibernateStore.saveXWikiDoc(XWikiDocument, XWikiContext, boolean) will recreate the XML  \n14:56\u00a0<+Denis>\u00a0yes  \n14:58\u00a0<+Denis>\u00a0however, this does not fix existing copies, wdyt ?  \n15:00\u00a0<@sdumitriu>\u00a0Relax the precondition on the migrator  \n15:00\u00a0<@sdumitriu>\u00a0Just warn  \n15:01\u00a0<@sdumitriu>\u00a0For the rest...  \n15:01\u00a0<@sdumitriu>\u00a0I don't know, let's leave it to someone else to fix it :D  \n15:02\u00a0<+Denis>\u00a0so you think that we may risk the migrator to success in rare cases when it should have failed, and that the resulting db could be unusable  \n15:06\u00a0<qwebirc23723>\u00a0has joined #xwiki  \n15:07\u00a0<Helge>\u00a0has quit  \n15:07\u00a0<qwebirc23723>\u00a0+Denis: Thanks for the reply. I have documents which shall be \"approved\" by a user and be read only after approval. The act of approval should be visible in the history but it disappears if the subsequent edit rights is a minor edit (the \"approval\" edit is onlly listed when you click \"show minor edits\"). It would be visible if the rights edit was major.  \n15:17\u00a0<qwebirc23723>\u00a0+Denis: In other words, I want the version previous to the right edit to be listed in the history. That's only the case when rights edit is major. Regards.  \n15:36\u00a0<mflorea1>\u00a0has quit  \n15:36\u00a0<mflorea>\u00a0has joined #xwiki  \n15:49\u00a0<jvelo>\u00a0has joined #xwiki  \n16:12\u00a0<polx>\u00a0has joined #xwiki  \n16:19\u00a0<polx>\u00a0has quit  \n16:22\u00a0<polx>\u00a0has joined #xwiki  \n16:28\u00a0<jvelo>\u00a0has quit  \n16:45\u00a0<polx>\u00a0has quit  \n17:03\u00a0<jvelo>\u00a0has joined #xwiki  \n17:15\u00a0<polx>\u00a0has joined #xwiki  \n17:37\u00a0<CIA-114>\u00a0Sergiu Dumitriu\u000f feature-portlet\u000f \\* r52a9ab2\u000f https://github.com/xwiki/xwiki-platform/commit/52a9ab25294c4d405299f89f43dec27b581804b3 \u000f/ pom.xml :\u000f [release] Preparing release xwiki-platform-3.5.1 - http://git.io/pp7GAw  \n17:37\u00a0<CIA-114>\u00a0Sergiu Dumitriu\u000f feature-portlet\u000f \\* r3102478\u000f https://github.com/xwiki/xwiki-platform/commit/31024788158cc45879bf15832fa38c4834d434df \u000f/ (205 files in 205 dirs):\u000f [maven-release-plugin] prepare release xwiki-platform-3.5.1 - http://git.io/UNzAUw  \n17:38\u00a0<vdox2>\u00a0has left #xwiki  \n17:42\u00a0<polx>\u00a0has quit  \n17:56\u00a0<qwebirc23723>\u00a0has quit  \n18:03\u00a0<CIA-114>\u00a0Marius Dumitru Florea\u000f feature-portlet\u000f \\* r85d1eed\u000f https://github.com/xwiki/xwiki-platform/commit/85d1eed331c62e3efb03cdfb15b0928a45cc43e2 \u000f/ (2 files in 2 dirs):\u000f Make the AJAX behaviour of comments work in portlet mode (work in progress). (+6 more commits...) - http://git.io/WDeLcQ  \n18:16\u00a0<jvelo>\u00a0has quit  \n18:26\u00a0<mflorea>\u00a0has quit  \n18:41\u00a0<jvelo>\u00a0has joined #xwiki  \n18:48\u00a0<polx>\u00a0has joined #xwiki  \n18:58\u00a0<Denis>\u00a0has quit  \n19:13\u00a0<Denis>\u00a0has joined #xwiki  \n20:04\u00a0<polx>\u00a0has quit  \n20:17\u00a0<polx>\u00a0has joined #xwiki  \n20:28\u00a0<pgmjsd>\u00a0has quit  \n20:52\u00a0<Denis>\u00a0has quit  \n21:02\u00a0<pgmjsd>\u00a0has joined #xwiki  \n21:17\u00a0<Denis>\u00a0has joined #xwiki  \n21:34\u00a0<abusenius>\u00a0has joined #xwiki  \n22:12\u00a0<CIA-114>\u00a0Denis Gervalle\u000f master\u000f \\* re01a2b2\u000f https://github.com/xwiki/xwiki-platform/commit/e01a2b29a8469a39c86ed5f08b689974dac31786 \u000f/ (2 files in 2 dirs):\u000f XWIKI-8130: copyDocument should not copy the custom mapping of the document xClass - http://git.io/MFjqTw  \n22:14\u00a0<CIA-114>\u00a0Denis Gervalle\u000f stable-4.1.x\u000f \\* r1e64133\u000f https://github.com/xwiki/xwiki-platform/commit/1e64133958914c7b70e50ce16e999dd34485a11a \u000f/ (2 files in 2 dirs):\u000f XWIKI-8130: copyDocument should not copy the custom mapping of the document xClass - http://git.io/QMUKog  \n22:46\u00a0<abusenius>\u00a0has quit  \n23:48\u00a0<Denis>\u00a0has quit  \n\n"}