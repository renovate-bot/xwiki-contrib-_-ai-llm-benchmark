{"id": "dev:IRC.xwikiArchive20100717", "url": "https://dev.xwiki.org/xwiki/bin/view/IRC/xwikiArchive20100717", "title": "IRC Archive for channel #xwiki - XWiki", "collection": "Eval-Large", "mimetype": "text/markdown", "language": "en", "content": "\nlucaa left at 00:32 (Read error: Connection reset by peer  \nlucaa joined #xwiki at 00:32  \nabusenius left at 00:39 (Quit: Konversation terminated!  \narkub left at 01:18 (Ping timeout: 252 seconds  \nlucaa left at 01:55 (\\*.net \\*.split  \nCalebJamesDeLisl left at 01:55 (\\*.net \\*.split  \nlucaa joined #xwiki at 01:59  \nCalebJamesDeLisl joined #xwiki at 01:59  \nsdumitriu left at 02:18 (Quit: Leaving.  \nmarta\\_\\_ left at 02:52 (Ping timeout: 260 seconds  \nflorinciu joined #xwiki at 08:29  \narkub joined #xwiki at 08:39  \nlpereira joined #xwiki at 09:20  \ntmortagne joined #xwiki at 09:22  \ntmortagne left #xwiki at 09:23  \narkub left at 09:34 (Quit: Leaving  \nfmancinelli joined #xwiki at 09:49  \nfmancinelli left at 10:03 (Ping timeout: 265 seconds  \nCalebJamesDeLisl - (11:58): haha busted http://download.oracle.com/docs/cd/E17476\\_01/javase/1.5.0/docs/api/java/lang/System.html?PHPSESSID=938f2a....  \nlucaa left at 12:16 (Quit: Leaving.  \nmarta1 joined #xwiki at 12:25  \nmarta1 is now known as marta\\_\\_ ([[email\u00a0protected]](https://dev.xwiki.org/cdn-cgi/l/email-protection)  \nlucaa joined #xwiki at 12:51  \nsdumitriu joined #xwiki at 13:07  \nlucaa left at 14:08 (Quit: Leaving.  \nsdumitriu left at 14:38 (Ping timeout: 240 seconds  \nsdumitriu joined #xwiki at 14:40  \nlucaa joined #xwiki at 15:02  \nSvenDowideit\\_ joined #xwiki at 15:23  \nSvenDowideit left at 15:24 (Ping timeout: 264 seconds  \nSvenDowideit\\_ is now known as SvenDowideit ([[email\u00a0protected]](https://dev.xwiki.org/cdn-cgi/l/email-protection)  \nnuvolari left at 15:48 (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.  \nnuvolari joined #xwiki at 15:48  \nnuvolari left at 15:49 (Changing host  \nnuvolari joined #xwiki at 15:49  \nflorinciu1 joined #xwiki at 16:09  \nlucaa left at 16:33 (Ping timeout: 265 seconds  \nflorinciu1 left at 17:16 (Quit: Leaving.  \nflorinciu1 joined #xwiki at 17:31  \nKermitTheFragger joined #xwiki at 17:50  \nabusenius joined #xwiki at 18:12  \nxipe left at 18:19 (Read error: Operation timed out  \nKermitTheFragger left at 18:20 (Quit: gone for food  \nxipe joined #xwiki at 18:29  \nCalebJamesDeLisl - (19:12): Just added password based encryption to xwiki-crypto it uses CAST-5-CBC with Whirlpool and 20 byte salts.  \nabusenius - (19:24): why something strange and unknown rather than known standard?  \nCalebJamesDeLisl - (19:24): Which is unknown? CAST5 is what PGP uses.  \nCalebJamesDeLisl - (19:25): Whirlpool is one of the options in truecrypt.  \nabusenius - (19:26): which doesn't mean its the best  \nabusenius - (19:27): AES has won the competition for a reason  \nabusenius - (19:27): (Rijndael it is)  \nCalebJamesDeLisl - (19:28): There are a lot of ciphers to chose from, most of them are not really breakable so it's a matter of putting all of your eggs in one basket.  \nCalebJamesDeLisl - (19:29): Also PGP is well known for being paranoid --> CAST5  \nabusenius - (19:29): it might be just because PGP is older than AES  \nCalebJamesDeLisl - (19:30): No they used to use IDEA but the dropped it because of patents.  \nabusenius - (19:30): and if you have no strong reason to use a specific algorithm, use AES, because all known algorithms at that time were reviewed by many people and rijndael won  \nCalebJamesDeLisl - (19:32): So use aes everywhere?  \nabusenius - (19:33): yes, it is the recommended choice, why not use it?  \nCalebJamesDeLisl - (19:33): Because it's used everywhere. that's where all of the research is in cryptoanalisys.  \nabusenius - (19:33): (and supports larger key size for more paranoid people)  \nabusenius - (19:34): everybody tries to break aes, nobody really succeeded so far, this is good  \nCalebJamesDeLisl - (19:34): Would they really tell you?  \nabusenius - (19:35): somebody would  \nCalebJamesDeLisl - (19:36): If I broke it I would go work for the govt and you wouldn't find out that all your data was pwnd.  \nabusenius - (19:36): it would be a mega research result  \nabusenius - (19:36): unless the person who breaks it is closed in an underground bunker, he will publish  \nCalebJamesDeLisl - (19:37): More money is in keeping the secret, but it doesn't really matter for this. Here the weakness is the passwords.  \nCalebJamesDeLisl - (19:38): And next time I'll pick a different combination :)  \nCalebJamesDeLisl - (19:38): Anyway you can just extend the class and drop in a different cipher if you want.  \nabusenius - (19:39): come on, I don'T believe in conspiacy theory  \nCalebJamesDeLisl - (19:40): In response to which?  \nabusenius - (19:40): I think all crypto methods should by default use the default algorithm  \nCalebJamesDeLisl - (19:40): Why?  \nabusenius - (19:40): and if the user wants, he can use whatever he wants, not other way around  \nabusenius - (19:41): because they are default  \nCalebJamesDeLisl - (19:41): There will never be any interchangeability. I wasn't implementing a standard.  \nabusenius - (19:41): everyone should use them, and most of the people want to use them  \nabusenius - (19:42): do you have a strong reason to trust AES less than any other algorithm?  \nabusenius - (19:42): (personal beliefs are not strong reasons)  \nCalebJamesDeLisl - (19:43): No, I have no reason to trust any one over any other, so I use all of the ones which are common.  \nabusenius - (19:44): ok, whatever, as long as it is not hardcoded it is fine  \nCalebJamesDeLisl - (19:44): Well I extended the class and switched to cast6 and it worked perfect so you can do the same.  \nCalebJamesDeLisl - (19:45): http://www.eecs.berkeley.edu/~jonah/bc/org/bouncycastle/crypto/BlockCipher.html  \nCalebJamesDeLisl - (19:45): Any one of those will work fine (I think)  \nCalebJamesDeLisl - (19:46): Do you think that CAST5 is significantly weaker than AES?  \nsdumitriu - (19:47): My take: should be configurable  \nabusenius - (19:48): probably not, what is definitely worse is that the maximal supported key size in CAST5 is 128  \nabusenius - (19:49): there is less buffer against partial breakage  \nabusenius - (19:50): there might be other differences btw, like speed etc  \nCalebJamesDeLisl - (19:51): I'm happy that the weakest link is definitely not cryptanalysis. I left an easy path to extend the class so if anyone cares, you can write it :)  \nCalebJamesDeLisl - (19:52): Oh also this doesn't touch the JCE provider so the 128 bit limit is voluntary.  \nCalebJamesDeLisl - (20:00): Is SignatureService tested anywhere?  \nabusenius - (20:02): indirectly I guess  \nCalebJamesDeLisl - (20:03): You have a test which is signing and verifying text?  \nabusenius - (20:03): or maybe not  \nCalebJamesDeLisl - (20:04): We need to try to keep calls to newCertAndPrivateKey to a minimum. That's really slowing the tests down.  \nabusenius - (20:04): no, its not tested  \nCalebJamesDeLisl - (20:04): Ok, I'll work on that next.  \nabusenius - (20:05): yea, generating random numbers is kind of slow  \nCalebJamesDeLisl - (20:05): and primality testing.  \nCalebJamesDeLisl - (20:05): BTW: Did you know that the strength of RSA comes from the fact that it's easy to raise a number to a power and hard to root it?  \nabusenius - (20:06): yes  \nabusenius - (20:06): (in a group modulo large prime)  \nCalebJamesDeLisl - (20:06): I just found that out, reading RSA step by step.  \nCalebJamesDeLisl - (20:09): Looks like I can join 3 calls to newCertAndPrivateKey into one.  \nabusenius - (20:10): afaik only one or 2 of the tests are really testing newCertAndPrivateKey, the rest is just using it as a convenient way to get a cert  \nvmassol left at 20:26 (Quit: Leaving.  \nCalebJamesDeLisl - (20:39): hmm. much faster now. Also signtext and verifytext works !!!111!11  \nCalebJamesDeLisl - (21:30): Signatures signed in firefox verify :)  \nlpereira left at 21:44 (Ping timeout: 240 seconds  \nfmancinelli joined #xwiki at 22:12  \nabusenius - (22:35): cool :)  \nabusenius - (22:36): is it possible to write a functional test that signs something?  \nCalebJamesDeLisl - (22:44): Not sure. Firefox is pretty adamant about making sure the user has to interact in order to sign stuff.  \nfmancinelli left at 22:54 (Quit: Lost terminal  \nabusenius - (22:55): its probably better this way  \nCalebJamesDeLisl - (22:56): Webdriver may have the power to handle it though. What I know is the message box comes from c++ not from Javascript Firefox UI.  \nCalebJamesDeLisl - (22:57): Just committed, we now have 31 tests.  \nsdumitriu - (22:57): But I doubt it's a common enough request to be inculded in WebDriver  \nsdumitriu - (22:57): included  \nCalebJamesDeLisl - (22:58): I seem to recall something about people not being able to handle popups which were internal to firefox.  \nCalebJamesDeLisl - (23:08): oh, abusenius you'll be happy to hear that Whirlpool is based on AES ;)  \nabusenius - (23:13): but thats a hash :)  \nabusenius - (23:17): overal test coverage in xwiki-crypto: 64.5% :)  \nCalebJamesDeLisl - (23:19): cool. \u00a0The hash is the most important part of a password based crypto scheme.  \nCalebJamesDeLisl - (23:19): The hash should be slooooooow. that way guessing the password takes forever.  \nabusenius - (23:20): the encryption is the most important part  \nabusenius - (23:20): making something slow is easy  \nCalebJamesDeLisl - (23:22): How would you go about slowing down a hash?  \nabusenius - (23:22): hash 100x  \nabusenius - (23:22): hash 100x more data than needed  \nabusenius - (23:22): add pepper  \nabusenius - (23:22): many possibilities  \nCalebJamesDeLisl - (23:23): Ok, so really big salt?  \nabusenius - (23:23): btw, length of the key for block ciphers is = block size, so using a longer hash for password is not helping  \nabusenius - (23:24): for example, and small pepper :)  \nCalebJamesDeLisl - (23:24): A lot of people stretch the hash but when you do that you have to be very careful not to amplify the danger of collisions.  \nabusenius - (23:24): pepper is unknown salt, you need to brute force it even for a legitimate operation  \nCalebJamesDeLisl - (23:24): That I didn't know.  \nabusenius - (23:25): right, so the best thing is to use the pepper + salt + 1x hash and nothing else  \nabusenius - (23:25): the encryption algorithm is good enough to rely on  \nCalebJamesDeLisl - (23:26): I think if a cipher is dangerous enough that the local wise guy can break it, the word would be all around the net.  \nabusenius - (23:26): \\*nix passwords use salt and pepper  \nCalebJamesDeLisl - (23:27): Have you seen this? http://www.mindrot.org/projects/jBCrypt/  \nabusenius - (23:28): \"with modifications designed to ...\" doesnt sound right  \nabusenius - (23:29): don't be paranoid  \nabusenius - (23:29): use known standard algorithms  \nabusenius - (23:29): they are good  \nCalebJamesDeLisl - (23:30): Supposedly this is a java implementation of unix crypt()  \nabusenius - (23:30): pepper is simple and effective  \nabusenius - (23:31): add 1 byte and you get slowdown x256  \nCalebJamesDeLisl - (23:32): Also using long hashes like sha512 is effective. nobody will ever create a meaningful rainbow table of that.  \nsdumitriu left at 23:32 (Ping timeout: 260 seconds  \nabusenius - (23:32): 128 byte is absolutely anough too  \nabusenius - (23:32): \\*enough  \nabusenius - (23:33): \\*bit  \nCalebJamesDeLisl - (23:33): 128 bit meaning CAST5 ? ;)  \nabusenius - (23:33): I meant hash  \nabusenius - (23:34): 2^128 byte is more data that the mankind ever produced :)  \nabusenius - (23:34): even counting to 2^128 is infeasible  \nabusenius - (23:34): even with a quantum computer  \nCalebJamesDeLisl - (23:35): Fortunately disk space is so cheap that there is no reason not to use huge password hashes.  \nabusenius - (23:36): as i said, if you use a cipher with 128 bit key, but 512 bit hash, you are wasting a lot  \nabusenius - (23:37): you hash a password, it is getting spread to 512 bit ynd you trow away 3/4 of it - not good  \nCalebJamesDeLisl - (23:38): I don't think that makes it any weaker than a hash which is 128 byte.  \nCalebJamesDeLisl - (23:38): \\*but  \nCalebJamesDeLisl - (23:38): \\*bit  \nabusenius - (23:39): it is \\*in the best case\\* as weak as 128 bit hash  \nabusenius - (23:39): probably weaker  \nCalebJamesDeLisl - (23:39): But if the key is 128 then nothing can ever be stronger.  \nabusenius - (23:40): if the input data is less than 128 bit, the hash has to \"invent\" more data to fill the missing bits  \nabusenius - (23:40): and the input is used as salt  \nCalebJamesDeLisl - (23:41): I'd have to look at the implementation before I could make a judgment on that. Do you know of any place where they warn about this?  \nabusenius - (23:41): it is independent of implementation  \nabusenius - (23:41): they usually use a padding to start with the hash size  \nabusenius - (23:42): something like 100000001heregoesthe data  \nabusenius - (23:42): because hash algorithms work on blocks too  \nCalebJamesDeLisl - (23:42): Hmm. actually I could tweak it to put some of the hash into the IV.  \nsdumitriu joined #xwiki at 23:48  \n\n"}